/*! koi-frontend - v1.0.0 - 2016-06-22 */
!function($, window, document, undefined) {
    var Misc = function(a) {};
    Misc.prototype = {
        initialize: function() {},
        formToJson: function(selector) {
            var o = {}, a = [];
            return a = $.prototype.isPrototypeOf(selector) ? selector.serializeArray() : $(selector).serializeArray(), 
            $.each(a, function() {
                o[this.name] !== undefined ? (o[this.name].push || (o[this.name] = [ o[this.name] ]), 
                o[this.name].push(this.value || "")) : o[this.name] = this.value || "";
            }), o;
        },
        isUrl: function(str) {
            var patt = /^(http[s]?:\/\/(www\.)?|ftp:\/\/(www\.)?|www\.){1}([0-9A-Za-z-\.@:%_\+~#=]+)+(\/(.)*)?(\?(.)*)?/i;
            return patt.test(str);
        },
        urlFull: function(route) {
            if (!this.isUrl(document.url)) return route;
            route || (route = "");
            var patt = /^\//;
            return patt.test(route) || (route = "/" + route), document.url + route;
        },
        parseErrors: function(errors) {
            var text = "";
            if (_.isObject(errors)) {
                var listError = "<ul>";
                $.each(errors, function(field, item) {
                    listError += "<li>" + item[0] + "</li>";
                }), listError += "</ul>", text = listError;
            }
            return text;
        },
        setSpinner: function(selector) {
            selector && $(selector).prepend('<div class="overlay"><i class="fa fa-refresh fa-spin"></i></div>');
        },
        removeSpinner: function(selector) {
            var $selector = $(selector).find(".overlay");
            $selector.length && $selector.remove();
        },
        dataTableES: function() {
            return {
                sProcessing: '<div class="overlay"><i class="fa fa-refresh fa-spin"></i></div>',
                sLengthMenu: "Mostrar _MENU_ registros",
                sZeroRecords: "No se encontraron resultados",
                sEmptyTable: "Ningún dato disponible en esta tabla",
                sInfo: "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                sInfoEmpty: "Mostrando registros del 0 al 0 de un total de 0 registros",
                sInfoFiltered: "(filtrado de un total de _MAX_ registros)",
                sInfoPostFix: "",
                sSearch: "Buscar:",
                sUrl: "",
                sInfoThousands: ",",
                sLoadingRecords: "Cargando...",
                oPaginate: {
                    sFirst: "Primero",
                    sLast: "Último",
                    sNext: "Siguiente",
                    sPrevious: "Anterior"
                },
                oAria: {
                    sSortAscending: ": Activar para ordenar la columna de manera ascendente",
                    sSortDescending: ": Activar para ordenar la columna de manera descendente"
                }
            };
        },
        redirect: function(url) {
            url !== undefined && "" != url ? window.location = url : window.location.reload();
        },
        successRedirect: function(msg, url) {
            alertify.success(msg), setTimeout(function() {
                window.Misc.redirect(url);
            }, 500);
        }
    }, window.Misc = new Misc(), window.Misc.initialize();
}(jQuery, this, this.document), app || (app = {}), function(window, document, undefined) {
    app.AsientoModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("asientos.index"));
        },
        idAttribute: "id",
        defaults: {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Asiento2Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("asientos.detalle.index"));
        },
        idAttribute: "id",
        defaults: {
            asiento2_asiento: "",
            asiento2_cuenta: "",
            plancuentas_nombre: "",
            asiento2_beneficiario: "",
            asiento2_beneficiario_nit: "",
            asiento2_debito: 0,
            asiento2_credito: 0,
            asiento2_centro: "",
            centrocosto_nombre: "",
            asiento2_base: 0,
            asiento2_detalle: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.CentroCostoModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("centroscosto.index"));
        },
        idAttribute: "id",
        defaults: {
            centrocosto_codigo: "",
            centrocosto_centro: "",
            centrocosto_nombre: "",
            centrocosto_descripcion1: "",
            centrocosto_descripcion2: "",
            centrocosto_estructura: "N",
            centrocosto_tipo: "N",
            centrocosto_activo: !0
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.ContactoModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("terceros.contactos.index"));
        },
        idAttribute: "id",
        defaults: {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.DocumentoModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("documentos.index"));
        },
        idAttribute: "id",
        defaults: {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.EmpresaModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("empresa.index"));
        },
        idAttribute: "id",
        defaults: {
            tercero_nit: "",
            tercero_digito: "",
            tercero_regimen: "",
            tercero_tipo: "",
            tercero_persona: "",
            tercero_razonsocial: "",
            tercero_nombre1: "",
            tercero_nombre2: "",
            tercero_apellido1: "",
            tercero_apellido2: "",
            tercero_direccion: "",
            tercero_municipio: "",
            tercero_email: "",
            tercero_telefono1: "",
            tercero_telefono2: "",
            tercero_fax: "",
            tercero_celular: "",
            tercero_actividad: "",
            tercero_cc_representante: "",
            tercero_representante: "",
            tercero_responsable_iva: !1,
            tercero_autoretenedor_cree: !1,
            tercero_gran_contribuyente: !1,
            tercero_autoretenedor_renta: !1,
            tercero_autoretenedor_ica: !1,
            actividad_tarifa: "",
            empresa_niif: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.FoldersModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("folders.index"));
        },
        idAttribute: "id",
        defaults: {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.PlanCuentaModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("plancuentas.index"));
        },
        idAttribute: "id",
        defaults: {
            plancuentas_cuenta: "",
            plancuentas_nivel: "",
            plancuentas_nombre: "",
            plancuentas_naturaleza: "D",
            plancuentas_centro: "",
            plancuentas_tercero: !1,
            plancuentas_tipo: "N",
            plancuentas_tasa: 0
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.TerceroModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("terceros.index"));
        },
        idAttribute: "id",
        defaults: {
            tercero_nit: "",
            tercero_digito: "",
            tercero_regimen: "",
            tercero_tipo: "",
            tercero_persona: "",
            tercero_razonsocial: "",
            tercero_nombre1: "",
            tercero_nombre2: "",
            tercero_apellido1: "",
            tercero_apellido2: "",
            tercero_direccion: "",
            tercero_municipio: "",
            tercero_email: "",
            tercero_telefono1: "",
            tercero_telefono2: "",
            tercero_fax: "",
            tercero_celular: "",
            tercero_actividad: "",
            tercero_cc_representante: "",
            tercero_representante: "",
            tercero_activo: !1,
            tercero_responsable_iva: !1,
            tercero_autoretenedor_cree: !1,
            tercero_gran_contribuyente: !1,
            tercero_autoretenedor_renta: !1,
            tercero_autoretenedor_ica: !1,
            tercero_socio: !1,
            tercero_cliente: !1,
            tercero_acreedor: !1,
            tercero_interno: !1,
            tercero_mandatario: !1,
            tercero_empleado: !1,
            tercero_proveedor: !1,
            tercero_extranjero: !1,
            tercero_afiliado: !1,
            tercero_otro: !1,
            tercero_cual: "",
            actividad_tarifa: ""
        }
    });
}(this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainActividadView = Backbone.View.extend({
        el: "#actividades-main",
        initialize: function() {
            this.$actividadesSearchTable = this.$("#actividades-search-table"), this.$actividadesSearchTable.DataTable({
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("actividades.index")),
                columns: [ {
                    data: "actividad_codigo",
                    name: "actividad_codigo"
                }, {
                    data: "actividad_nombre",
                    name: "actividad_nombre"
                }, {
                    data: "actividad_categoria",
                    name: "actividad_categoria"
                }, {
                    data: "actividad_tarifa",
                    name: "actividad_tarifa"
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AsientoCuentasListView = Backbone.View.extend({
        el: "#browse-detalle-asiento-list",
        events: {},
        parameters: {
            wrapper: null,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.confCollection = {
                reset: !0,
                data: {}
            }, this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "store", this.storeOne), 
            this.listenTo(this.collection, "sync", this.responseServer), _.isUndefined(this.parameters.dataFilter.asiento) || _.isNull(this.parameters.dataFilter.asiento) || (this.confCollection.data.asiento = this.parameters.dataFilter.asiento, 
            this.collection.fetch(this.confCollection));
        },
        addOne: function(Asiento2Model) {
            var view = new app.AsientoCuentasItemView({
                model: Asiento2Model
            });
            this.$el.prepend(view.render().el);
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        storeOne: function(form) {
            var _this = this, data = window.Misc.formToJson(form);
            window.Misc.setSpinner(this.parameters.wrapper);
            var asiento2Model = new app.Asiento2Model();
            asiento2Model.save(data, {
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner(_this.parameters.wrapper);
                        var text = resp.success ? "" : resp.errors;
                        if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                        _this.collection.add(model);
                    }
                },
                error: function(model, error) {
                    window.Misc.removeSpinner(_this.parameters.wrapper), alertify.error(error.statusText);
                }
            });
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(model, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AsientoCuentasItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#add-asiento2-item-tpl").html() || ""),
        events: {},
        initialize: function() {
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return this.$el.html(this.template(attributes)), this;
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateAsientoView = Backbone.View.extend({
        el: "#asientos-create",
        template: _.template($("#add-asiento-tpl").html() || ""),
        events: {
            "change select#asiento1_documento": "documentoChanged",
            "click .submit-asiento": "submitAsiento",
            "submit #form-item-asiento": "onStoreItem",
            "submit #form-asientos": "onStore"
        },
        initialize: function() {
            this.$wraperForm = this.$("#render-form-asientos"), this.asientoCuentasList = new app.AsientoCuentasList(), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.$numero = this.$("#asiento1_numero"), 
            this.$form = this.$("#form-asientos"), this.getCuentasDetalle(), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2();
        },
        documentoChanged: function(e) {
            var _this = this, documento = $(e.currentTarget).val();
            _this.$numero.val(""), _.isUndefined(documento) || _.isNull(documento) || "" == documento || $.ajax({
                url: window.Misc.urlFull(Route.route("documentos.show", {
                    documentos: documento
                })),
                type: "GET",
                beforeSend: function() {
                    window.Misc.setSpinner(_this.el);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.el), _.isObject(resp) && (_.isUndefined(resp.documento_tipo_consecutivo) || _.isNull(resp.documento_tipo_consecutivo) || (_this.$numero.val(resp.documento_consecutivo + 1), 
                "M" == resp.documento_tipo_consecutivo ? _this.$numero.prop("readonly", !1) : "A" == resp.documento_tipo_consecutivo && _this.$numero.prop("readonly", !0)));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.el), alertify.error(thrownError);
            });
        },
        submitAsiento: function(e) {
            this.$form.submit();
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                data.cuentas = this.asientoCuentasList.toJSON(), this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        getCuentasDetalle: function() {
            new app.AsientoCuentasListView({
                collection: this.asientoCuentasList,
                parameters: {
                    wrapper: this.el
                }
            });
        },
        onStoreItem: function(e) {
            console.log(this.$("#asiento2_valor").val(), e.target), console.log("-> ", this.$("#asiento2_valor").inputmask("unmaskedvalue")), 
            this.$("#asiento2_valor").inputmask("unmaskedvalue"), e.isDefaultPrevented() || (e.preventDefault(), 
            this.asientoCuentasList.trigger("store", this.$(e.target)));
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("asientos.show", {
                    asientos: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainAsientosView = Backbone.View.extend({
        el: "#asientos-main",
        initialize: function() {
            this.$asientosSearchTable = this.$("#asientos-search-table"), this.$asientosSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("asientos.index")),
                columns: [ {
                    data: "asiento1_numero",
                    name: "asiento1_numero"
                }, {
                    data: "asiento1_ano",
                    name: "asiento1_ano"
                }, {
                    data: "asiento1_mes",
                    name: "asiento1_mes"
                }, {
                    data: "tercero_nit",
                    name: "tercero_nit"
                }, {
                    data: "tercero_nombre",
                    name: "tercero_nombre"
                }, {
                    data: "tercero_razonsocial",
                    name: "tercero_razonsocial"
                }, {
                    data: "tercero_nombre1",
                    name: "tercero_nombre1"
                }, {
                    data: "tercero_nombre2",
                    name: "tercero_nombre2"
                }, {
                    data: "tercero_apellido1",
                    name: "tercero_apellido1"
                }, {
                    data: "tercero_apellido2",
                    name: "tercero_apellido2"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nueva asiento',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("asientos.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("asientos.show", {
                            asientos: full.id
                        })) + '">' + data + "</a>";
                    }
                }, {
                    targets: [ 1, 2 ],
                    width: "10%"
                }, {
                    targets: 3,
                    width: "15%"
                }, {
                    targets: 4,
                    searchable: !1
                }, {
                    targets: [ 5, 6, 7, 8, 9 ],
                    visible: !1
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ShowAsientoView = Backbone.View.extend({
        el: "#asientos-show",
        initialize: function() {
            this.model.id != undefined && (this.asientoCuentasList = new app.AsientoCuentasList(), 
            this.referenceViews());
        },
        referenceViews: function() {
            this.cuentasListView = new app.AsientoCuentasListView({
                collection: this.asientoCuentasList,
                parameters: {
                    wrapper: this.el,
                    dataFilter: {
                        asiento: this.model.get("id")
                    }
                }
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateCentroCostoView = Backbone.View.extend({
        el: "#centrocosto-create",
        template: _.template($("#add-centrocosto-tpl").html() || ""),
        events: {
            "submit #form-centrocosto": "onStore"
        },
        parameters: {
            callback: ""
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.msgSuccess = "Centro de costo guardado con exito!", this.$wraperForm = this.$("#render-form-centrocosto"), 
            this.listenTo(this.model, "change", this.render), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck(), 
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                var _this = this, stuffToDo = {
                    toShow: function() {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("centroscosto.show", {
                            centroscosto: resp.id
                        })));
                    },
                    "default": function() {
                        alertify.success(_this.msgSuccess);
                    }
                };
                stuffToDo[this.parameters.callback] ? stuffToDo[this.parameters.callback]() : stuffToDo["default"]();
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainCentrosCostoView = Backbone.View.extend({
        el: "#centroscosto-main",
        initialize: function() {
            this.$centroscostoSearchTable = this.$("#centroscosto-search-table"), this.$centroscostoSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("centroscosto.index")),
                columns: [ {
                    data: "centrocosto_codigo",
                    name: "centrocosto_codigo"
                }, {
                    data: "centrocosto_centro",
                    name: "centrocosto_centro"
                }, {
                    data: "centrocosto_nombre",
                    name: "centrocosto_nombre"
                }, {
                    data: "centrocosto_estructura",
                    name: "centrocosto_estructura"
                }, {
                    data: "centrocosto_activo",
                    name: "centrocosto_activo"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nuevo centro de costo',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("centroscosto.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("centroscosto.show", {
                            centroscosto: full.id
                        })) + '">' + data + "</a>";
                    }
                }, {
                    targets: 3,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return "S" == data ? "Si" : "No";
                    }
                }, {
                    targets: [ 4 ],
                    width: "10%",
                    render: function(data, type, full, row) {
                        return data ? "Si" : "No";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentAddressView = Backbone.View.extend({
        el: "body",
        template: _.template($("#koi-address-component-tpl").html() || ""),
        events: {
            "click .btn-address-koi-component": "focusComponent",
            "submit #form-address-component": "addAddress",
            "change select#koi_nomenclatura1": "nomenclatura1Changed",
            "change input#koi_numero1": "numero1Changed",
            "change select#koi_alfabeto1": "alfabeto1Changed",
            "change select#koi_bis": "bisChanged",
            "change select#koi_alfabeto2": "alfabeto2Changed",
            "change select#koi_cardinales1": "cardinales1Changed",
            "change input#koi_numero2": "numero2Changed",
            "change select#koi_alfabeto3": "alfabeto3Changed",
            "change input#koi_numero3": "numero3Changed",
            "change select#koi_cardinales2": "cardinales2Changed",
            "click .btn-address-component-add-complement": "addComplement",
            "click .btn-address-component-remove-item": "removeItem"
        },
        initialize: function() {
            this.$modalComponent = this.$("#modal-address-component");
        },
        focusComponent: function(e) {
            $("#" + $(e.currentTarget).attr("data-field")).focus();
        },
        addressChanged: function(e) {
            this.inputContent = $(e.currentTarget), this.$modalComponent.find(".content-modal").html(this.template({})), 
            this.$addressField = this.$modalComponent.find("#koi_direccion"), this.$postalField = this.$modalComponent.find("#koi_postal"), 
            this.$formComponent = this.$modalComponent.find("#form-address-component"), this.addressData = new Array(10), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            this.$formComponent.validator(), this.$modalComponent.modal("show");
        },
        addAddress: function(e) {
            e.isDefaultPrevented() || (e.preventDefault(), this.inputContent.val(this.$addressField.val()), 
            this.$modalComponent.modal("hide"));
        },
        nomenclatura1Changed: function(e) {
            this.addressData[0] = $(e.currentTarget).val(), this.buildAddress();
        },
        numero1Changed: function(e) {
            this.addressData[1] = $(e.currentTarget).val().trim(), this.buildAddress();
        },
        alfabeto1Changed: function(e) {
            this.addressData[2] = $(e.currentTarget).val(), this.buildAddress();
        },
        bisChanged: function(e) {
            this.addressData[3] = $(e.currentTarget).val(), this.buildAddress();
        },
        alfabeto2Changed: function(e) {
            this.addressData[4] = $(e.currentTarget).val(), this.buildAddress();
        },
        cardinales1Changed: function(e) {
            this.addressData[5] = $(e.currentTarget).val(), this.buildAddress();
        },
        numero2Changed: function(e) {
            this.addressData[6] = $(e.currentTarget).val().trim(), this.buildAddress();
        },
        alfabeto3Changed: function(e) {
            this.addressData[7] = $(e.currentTarget).val(), this.buildAddress();
        },
        numero3Changed: function(e) {
            this.addressData[8] = $(e.currentTarget).val().trim(), this.buildAddress();
        },
        cardinales2Changed: function(e) {
            this.addressData[9] = $(e.currentTarget).val(), this.buildAddress();
        },
        addComplement: function(e) {
            e.preventDefault(), _.isUndefined(this.$("#koi_complementos1").val()) || _.isNull(this.$("#koi_complementos1").val()) || "" == this.$("#koi_complementos1").val() || (this.addressData.push(this.$("#koi_complementos1").val()), 
            _.isUndefined(this.$("#koi_complementos2").val()) || _.isNull(this.$("#koi_complementos2").val()) || "" == this.$("#koi_complementos2").val() || this.addressData.push(this.$("#koi_complementos2").val()), 
            this.$("#koi_complementos1").val(""), this.$("#koi_complementos2").val(""), this.buildAddress());
        },
        removeItem: function(e) {
            e.preventDefault(), this.addressData.pop(), this.buildAddress();
        },
        buildAddress: function() {
            var addreess = $.grep(this.addressData, Boolean).join(" ").trim();
            this.$addressField.val(addreess), console.log(this.$postalField.val());
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentCreateResourceView = Backbone.View.extend({
        el: "body",
        events: {
            "click .btn-add-resource-koi-component": "addResource",
            "submit #form-create-resource-component": "onStore"
        },
        initialize: function() {
            this.$modalComponent = this.$("#modal-add-resource-component"), this.$wraperError = this.$("#error-resource-component"), 
            this.$wraperContent = this.$("#content-create-resource-component");
        },
        addResource: function(e) {
            this.resource = $(e.currentTarget).attr("data-resource"), this.$resourceField = $("#" + $(e.currentTarget).attr("data-field"));
            var _this = this, stuffToDo = {
                centrocosto: function() {
                    _this.$modalComponent.find(".inner-title-modal").html("Centros de costo"), _this.model = new app.CentroCostoModel();
                    var template = _.template($("#add-centrocosto-tpl").html());
                    _this.$modalComponent.find(".content-modal").html(template(_this.model.toJSON()));
                }
            };
            stuffToDo[this.resource] && (stuffToDo[this.resource](), this.$wraperError.hide().empty(), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner), 
            this.ready(), this.$modalComponent.modal("show"));
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initInputMask && window.initComponent.initInputMask(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck();
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                this.$wraperError.hide().empty(), e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0
                });
            }
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.$wraperConten);
        },
        responseServer: function(model, resp, opts) {
            window.Misc.removeSpinner(this.$wraperConten);
            var text = resp.success ? "" : resp.errors;
            if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return this.$wraperError.empty().append(text), 
            void this.$wraperError.show();
            var _this = this, stuffToDo = {
                centrocosto: function() {
                    _this.$resourceField.select2({
                        data: [ {
                            id: _this.model.get("id"),
                            text: _this.model.get("centrocosto_nombre")
                        } ]
                    }).trigger("change"), _this.$resourceField.val(_this.model.get("id")).trigger("change");
                }
            };
            stuffToDo[this.resource] && (stuffToDo[this.resource](), this.$modalComponent.modal("hide"));
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentDocumentView = Backbone.View.extend({
        el: "body",
        events: {
            "change .select-filter-document-koi-component": "folderChanged"
        },
        initialize: function() {},
        folderChanged: function(e) {
            var _this = this;
            this.$inputContent = $(e.currentTarget), this.$wraperConten = this.$("#" + $(e.currentTarget).attr("data-wrapper")), 
            this.$inputDocument = this.$("#" + $(e.currentTarget).attr("data-documents"));
            var folder = this.$inputContent.val();
            this.$inputDocument.find("option:gt(0)").remove(), _.isUndefined(folder) || _.isNull(folder) || "" == folder || $.ajax({
                url: window.Misc.urlFull(Route.route("documentos.filter")),
                type: "GET",
                data: {
                    folder: folder
                },
                beforeSend: function() {
                    window.Misc.setSpinner(_this.$wraperConten);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.$wraperConten), resp.success && _.isObject(resp.documents) && ($.each(resp.documents, function(index, doc) {
                    _this.$inputDocument.append($("<option></option>").attr("value", doc.id).text(doc.documento_nombre));
                }), _this.$inputDocument.change());
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.$wraperConten), alertify.error(thrownError);
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentSearchCuentaView = Backbone.View.extend({
        el: "body",
        events: {
            "change input.plancuenta-koi-component": "cuentaChanged"
        },
        initialize: function() {},
        cuentaChanged: function(e) {
            var _this = this;
            this.$inputContent = $(e.currentTarget), this.$inputName = this.$("#" + $(e.currentTarget).attr("data-name")), 
            this.$wraperConten = this.$("#" + $(e.currentTarget).attr("data-wrapper"));
            var cuenta = this.$inputContent.val();
            _.isUndefined(cuenta) || _.isNull(cuenta) || "" == cuenta || $.ajax({
                url: window.Misc.urlFull(Route.route("plancuentas.search")),
                type: "GET",
                data: {
                    plancuentas_cuenta: cuenta
                },
                beforeSend: function() {
                    _this.$inputName.val(""), window.Misc.setSpinner(_this.$wraperConten);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.$wraperConten), resp.success && (_.isUndefined(resp.plancuentas_nombre) || _.isNull(resp.plancuentas_nombre) || _this.$inputName.val(resp.plancuentas_nombre));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.$wraperConten), alertify.error(thrownError);
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentSearchTerceroView = Backbone.View.extend({
        el: "body",
        events: {
            "change input.tercero-koi-component": "terceroChanged"
        },
        initialize: function() {},
        terceroChanged: function(e) {
            var _this = this;
            this.$inputContent = $(e.currentTarget), this.$inputName = this.$("#" + $(e.currentTarget).attr("data-name")), 
            this.$wraperConten = this.$("#" + $(e.currentTarget).attr("data-wrapper"));
            var tercero = this.$inputContent.val();
            _.isUndefined(tercero) || _.isNull(tercero) || "" == tercero || $.ajax({
                url: window.Misc.urlFull(Route.route("terceros.search")),
                type: "GET",
                data: {
                    tercero_nit: tercero
                },
                beforeSend: function() {
                    _this.$inputName.val(""), window.Misc.setSpinner(_this.$wraperConten);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.$wraperConten), resp.success && (_.isUndefined(resp.tercero_nombre) || _.isNull(resp.tercero_nombre) || _this.$inputName.val(resp.tercero_nombre));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.$wraperConten), alertify.error(thrownError);
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainDepartamentoView = Backbone.View.extend({
        el: "#departamentos-main",
        initialize: function() {
            this.$departamentosSearchTable = this.$("#departamentos-search-table"), this.$departamentosSearchTable.DataTable({
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("departamentos.index")),
                columns: [ {
                    data: "departamento_codigo",
                    name: "departamento_codigo"
                }, {
                    data: "departamento_nombre",
                    name: "departamento_nombre"
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainDocumentosView = Backbone.View.extend({
        el: "#documentos-main",
        initialize: function() {
            this.$documentosSearchTable = this.$("#documentos-search-table"), this.$documentosSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("documentos.index")),
                columns: [ {
                    data: "documento_codigo",
                    name: "documento_codigo"
                }, {
                    data: "documento_nombre",
                    name: "documento_nombre"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nuevo documento',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("documentos.create")));
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateEmpresaView = Backbone.View.extend({
        el: "#empresa-create",
        template: _.template($("#add-company-tpl").html() || ""),
        templateName: _.template($("#tercero-name-tpl").html() || ""),
        events: {
            "change input#tercero_nit": "nitChanged",
            "change select#tercero_persona": "personaChanged",
            "change select#tercero_actividad": "actividadChanged",
            "submit #form-create-empresa": "onStore"
        },
        initialize: function() {
            this.$wraperForm = this.$("#render-form-empresa"), this.listenTo(this.model, "change:id", this.render), 
            this.listenTo(this.model, "change:tercero_persona", this.renderName), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.$dv = this.$("#tercero_digito"), 
            this.$retecree = this.$("#tercero_retecree"), this.ready();
        },
        renderName: function(model, value, opts) {
            this.$("#content-render-name").html(this.templateName(this.model.toJSON())), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initInputMask && window.initComponent.initInputMask(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck();
        },
        nitChanged: function(e) {
            var _this = this;
            $.ajax({
                url: window.Misc.urlFull(Route.route("terceros.dv")),
                type: "GET",
                data: {
                    tercero_nit: $(e.currentTarget).val()
                },
                beforeSend: function() {
                    window.Misc.setSpinner(_this.el);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.el), resp.success && _this.$dv.val(resp.dv);
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.el), alertify.error(thrownError);
            });
        },
        personaChanged: function(e) {
            this.model.set({
                tercero_persona: $(e.currentTarget).val()
            });
        },
        actividadChanged: function(e) {
            var _this = this;
            $.ajax({
                url: window.Misc.urlFull(Route.route("terceros.rcree")),
                type: "GET",
                data: {
                    tercero_actividad: $(e.currentTarget).val()
                },
                beforeSend: function() {
                    window.Misc.setSpinner(_this.el);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.el), resp.success && (_.isUndefined(resp.rcree) || _.isNull(resp.rcree) || _this.$retecree.html(resp.rcree));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.el), alertify.error(thrownError);
            });
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0
                });
            }
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                alertify.success("datos de empresa fueron actualizados con éxito.");
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainFoldersView = Backbone.View.extend({
        el: "#folders-main",
        initialize: function() {
            this.$foldersSearchTable = this.$("#folders-search-table"), this.$foldersSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("folders.index")),
                columns: [ {
                    data: "folder_codigo",
                    name: "folder_codigo"
                }, {
                    data: "folder_nombre",
                    name: "folder_nombre"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Agregar Folder',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("folders.create")));
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.UserLoginView = Backbone.View.extend({
        el: "#login-box",
        initialize: function() {
            this.$loginForm = $("#form-login-account"), this.$loginForm.validator();
        },
        render: function() {}
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainMunicipioView = Backbone.View.extend({
        el: "#municipios-main",
        initialize: function() {
            this.$municipiosSearchTable = this.$("#municipios-search-table"), this.$municipiosSearchTable.DataTable({
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("municipios.index")),
                columns: [ {
                    data: "departamento_codigo",
                    name: "koi_departamento.departamento_codigo"
                }, {
                    data: "departamento_nombre",
                    name: "departamento_nombre"
                }, {
                    data: "municipio_codigo",
                    name: "municipio_codigo"
                }, {
                    data: "municipio_nombre",
                    name: "municipio_nombre"
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreatePlanCuentaView = Backbone.View.extend({
        el: "#plancuentas-create",
        template: _.template($("#add-plancuentas-tpl").html() || ""),
        events: {
            "change input#plancuentas_cuenta": "cuentaChanged",
            "submit #form-plancuentas": "onStore"
        },
        initialize: function() {
            this.$wraperForm = this.$("#render-form-plancuentas"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.$nivel = this.$("#plancuentas_nivel"), 
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2();
        },
        cuentaChanged: function(e) {
            var _this = this;
            $.ajax({
                url: window.Misc.urlFull(Route.route("plancuentas.nivel")),
                type: "GET",
                data: {
                    plancuentas_cuenta: $(e.currentTarget).val()
                },
                beforeSend: function() {
                    _this.$nivel.val(""), window.Misc.setSpinner(_this.el);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.el), resp.success && ((_.isUndefined(resp.nivel) || _.isNull(resp.nivel) || !_.isNumber(resp.nivel)) && alertify.error("Ocurrió un error definiendo el nivel de la cuenta, por favor verifique el número de caracteres."), 
                _this.$nivel.val(resp.nivel));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.el), alertify.error(thrownError);
            });
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("plancuentas.show", {
                    plancuentas: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainPlanCuentasView = Backbone.View.extend({
        el: "#plancuentas-main",
        initialize: function() {
            this.$plancuentasSearchTable = this.$("#plancuentas-search-table"), this.$plancuentasSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("plancuentas.index")),
                columns: [ {
                    data: "plancuentas_cuenta",
                    name: "plancuentas_cuenta"
                }, {
                    data: "plancuentas_nivel",
                    name: "plancuentas_nivel"
                }, {
                    data: "plancuentas_nombre",
                    name: "plancuentas_nombre"
                }, {
                    data: "plancuentas_naturaleza",
                    name: "plancuentas_naturaleza"
                }, {
                    data: "plancuentas_tercero",
                    name: "plancuentas_tercero"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nueva cuenta',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("plancuentas.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "15%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("plancuentas.show", {
                            plancuentas: full.id
                        })) + '">' + data + "</a>";
                    }
                }, {
                    targets: 1,
                    width: "10%"
                }, {
                    targets: 3,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return "D" == data ? "Débito" : "Crédito";
                    }
                }, {
                    targets: 4,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return data ? "Si" : "No";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ContactItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#contact-item-list-tpl").html() || ""),
        events: {},
        initialize: function() {
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return this.$el.html(this.template(attributes)), this;
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ContactsListView = Backbone.View.extend({
        el: "#browse-contact-list",
        events: {},
        parameters: {
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "sync", this.responseServer), 
            this.collection.fetch({
                data: {
                    tercero_id: this.parameters.dataFilter.tercero_id
                },
                reset: !0
            });
        },
        render: function() {},
        addOne: function(contactModel) {
            var view = new app.ContactItemView({
                model: contactModel
            });
            this.$el.append(view.render().el);
        },
        addAll: function() {
            this.$el.html(""), this.collection.forEach(this.addOne, this);
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.el);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateTerceroView = Backbone.View.extend({
        el: "#tercero-create",
        template: _.template($("#add-tercero-tpl").html() || ""),
        templateName: _.template($("#tercero-name-tpl").html() || ""),
        events: {
            "change input#tercero_nit": "nitChanged",
            "change select#tercero_persona": "personaChanged",
            "change select#tercero_actividad": "actividadChanged",
            "submit #form-create-tercero": "onStore"
        },
        initialize: function(opts) {
            this.msgSuccess = "Tercero guardado con exito!", this.$wraperForm = this.$("#render-form-tercero"), 
            this.listenTo(this.model, "change:id", this.render), this.listenTo(this.model, "change:tercero_persona", this.renderName), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.model.id == undefined ? this.renderName() : (this.contactsList = new app.ContactsList(), 
            this.referenceViews()), this.$dv = this.$("#tercero_digito"), this.$retecree = this.$("#tercero_retecree"), 
            this.ready();
        },
        renderName: function(model, value, opts) {
            this.$("#content-render-name").html(this.templateName(this.model.toJSON())), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initInputMask && window.initComponent.initInputMask(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck();
        },
        referenceViews: function() {
            this.contactsListView = new app.ContactsListView({
                collection: this.contactsList,
                parameters: {
                    dataFilter: {
                        tercero_id: this.model.get("id")
                    }
                }
            });
        },
        nitChanged: function(e) {
            var _this = this;
            $.ajax({
                url: window.Misc.urlFull(Route.route("terceros.dv")),
                type: "GET",
                data: {
                    tercero_nit: $(e.currentTarget).val()
                },
                beforeSend: function() {
                    window.Misc.setSpinner(_this.el);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.el), resp.success && _this.$dv.val(resp.dv);
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.el), alertify.error(thrownError);
            });
        },
        personaChanged: function(e) {
            this.model.set({
                tercero_persona: $(e.currentTarget).val()
            });
        },
        actividadChanged: function(e) {
            var _this = this;
            $.ajax({
                url: window.Misc.urlFull(Route.route("terceros.rcree")),
                type: "GET",
                data: {
                    tercero_actividad: $(e.currentTarget).val()
                },
                beforeSend: function() {
                    window.Misc.setSpinner(_this.el);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.el), resp.success && (_.isUndefined(resp.rcree) || _.isNull(resp.rcree) || _this.$retecree.html(resp.rcree));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.el), alertify.error(thrownError);
            });
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0
                });
            }
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("terceros.show", {
                    terceros: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainTerceroView = Backbone.View.extend({
        el: "#terceros-main",
        initialize: function() {
            this.$tercerosSearchTable = this.$("#terceros-search-table"), this.$tercerosSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("terceros.index")),
                columns: [ {
                    data: "tercero_nit",
                    name: "tercero_nit"
                }, {
                    data: "tercero_nombre",
                    name: "tercero_nombre"
                }, {
                    data: "tercero_razonsocial",
                    name: "tercero_razonsocial"
                }, {
                    data: "tercero_nombre1",
                    name: "tercero_nombre1"
                }, {
                    data: "tercero_nombre2",
                    name: "tercero_nombre2"
                }, {
                    data: "tercero_apellido1",
                    name: "tercero_apellido1"
                }, {
                    data: "tercero_apellido2",
                    name: "tercero_apellido2"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nuevo tercero',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("terceros.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "15%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("terceros.show", {
                            terceros: full.id
                        })) + '">' + data + "</a>";
                    }
                }, {
                    targets: 1,
                    width: "85%",
                    searchable: !1
                }, {
                    targets: [ 2, 3, 4, 5, 6 ],
                    visible: !1
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ShowTerceroView = Backbone.View.extend({
        el: "#terceros-main",
        initialize: function() {
            this.model.id != undefined && (this.contactsList = new app.ContactsList(), this.referenceViews());
        },
        referenceViews: function() {
            this.contactsListView = new app.ContactsListView({
                collection: this.contactsList,
                parameters: {
                    dataFilter: {
                        tercero_id: this.model.get("id")
                    }
                }
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function(window, document, undefined) {
    app.AsientoCuentasList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("asientos.detalle.index"));
        },
        model: app.Asiento2Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.ContactsList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("terceros.contactos.index"));
        },
        model: app.ContactoModel,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AppRouter = new (Backbone.Router.extend({
        routes: {
            "login(/)": "getLogin",
            "terceros(/)": "getTercerosMain",
            "terceros/create(/)": "getTercerosCreate",
            "terceros/:tercero(/)": "getTercerosShow",
            "terceros/:tercero/edit(/)": "getTercerosEdit",
            "empresa(/)": "getEmpresaEdit",
            "municipios(/)": "getMunicipiosMain",
            "departamentos(/)": "getDepartamentosMain",
            "actividades(/)": "getActividadesMain",
            "plancuentas(/)": "getPlanCuentasMain",
            "plancuentas/create(/)": "getPlanCuentasCreate",
            "plancuentas/:plancuenta/edit(/)": "getPlanCuentasEdit",
            "centroscosto(/)": "getCentrosCostoMain",
            "centroscosto/create(/)": "getCentrosCostoCreate",
            "centroscosto/:centrocosto/edit(/)": "getCentrosCostoEdit",
            "asientos(/)": "getAsientosMain",
            "asientos/create(/)": "getAsientosCreate",
            "asientos/:asientos(/)": "getAsientosShow",
            "documentos(/)": "getDocumentosMain",
            "folders(/)": "getFoldersMain"
        },
        initialize: function(opts) {
            this.componentAddressView = new app.ComponentAddressView(), this.componentCreateResourceView = new app.ComponentCreateResourceView(), 
            this.componentSearchTerceroView = new app.ComponentSearchTerceroView(), this.componentSearchCuentaView = new app.ComponentSearchCuentaView(), 
            this.componentDocumentView = new app.ComponentDocumentView();
        },
        start: function() {
            var config = {
                pushState: !0
            };
            "-1" != document.domain.search("localhost") && (config.root = "/vaziko/public/"), 
            Backbone.history.start(config);
        },
        getLogin: function() {
            this.loginView instanceof Backbone.View && (this.loginView.stopListening(), this.loginView.undelegateEvents()), 
            this.loginView = new app.UserLoginView();
        },
        getTercerosMain: function() {
            this.mainTerceroView instanceof Backbone.View && (this.mainTerceroView.stopListening(), 
            this.mainTerceroView.undelegateEvents()), this.mainTerceroView = new app.MainTerceroView();
        },
        getTercerosCreate: function() {
            this.terceroModel = new app.TerceroModel(), this.createTerceroView instanceof Backbone.View && (this.createTerceroView.stopListening(), 
            this.createTerceroView.undelegateEvents()), this.createTerceroView = new app.CreateTerceroView({
                model: this.terceroModel
            }), this.createTerceroView.render();
        },
        getTercerosShow: function(tercero) {
            this.terceroModel = new app.TerceroModel(), this.terceroModel.set({
                id: tercero
            }, {
                silent: !0
            }), this.showTerceroView instanceof Backbone.View && (this.showTerceroView.stopListening(), 
            this.showTerceroView.undelegateEvents()), this.showTerceroView = new app.ShowTerceroView({
                model: this.terceroModel
            });
        },
        getTercerosEdit: function(tercero) {
            this.terceroModel = new app.TerceroModel(), this.terceroModel.set({
                id: tercero
            }, {
                silent: !0
            }), this.createTerceroView instanceof Backbone.View && (this.createTerceroView.stopListening(), 
            this.createTerceroView.undelegateEvents()), this.createTerceroView = new app.CreateTerceroView({
                model: this.terceroModel
            }), this.terceroModel.fetch();
        },
        getEmpresaEdit: function() {
            this.empresaModel = new app.EmpresaModel(), this.createEmpresaView instanceof Backbone.View && (this.createEmpresaView.stopListening(), 
            this.createEmpresaView.undelegateEvents()), this.createEmpresaView = new app.CreateEmpresaView({
                model: this.empresaModel
            }), this.empresaModel.fetch();
        },
        getMunicipiosMain: function() {
            this.mainMunicipioView instanceof Backbone.View && (this.mainMunicipioView.stopListening(), 
            this.mainMunicipioView.undelegateEvents()), this.mainMunicipioView = new app.MainMunicipioView();
        },
        getDepartamentosMain: function() {
            this.mainDepartamentoView instanceof Backbone.View && (this.mainDepartamentoView.stopListening(), 
            this.mainDepartamentoView.undelegateEvents()), this.mainDepartamentoView = new app.MainDepartamentoView();
        },
        getActividadesMain: function() {
            this.mainActividadView instanceof Backbone.View && (this.mainActividadView.stopListening(), 
            this.mainActividadView.undelegateEvents()), this.mainActividadView = new app.MainActividadView();
        },
        getPlanCuentasMain: function() {
            this.mainPlanCuentasView instanceof Backbone.View && (this.mainPlanCuentasView.stopListening(), 
            this.mainPlanCuentasView.undelegateEvents()), this.mainPlanCuentasView = new app.MainPlanCuentasView();
        },
        getPlanCuentasCreate: function() {
            this.planCuentaModel = new app.PlanCuentaModel(), this.createPlanCuentaView instanceof Backbone.View && (this.createPlanCuentaView.stopListening(), 
            this.createPlanCuentaView.undelegateEvents()), this.createPlanCuentaView = new app.CreatePlanCuentaView({
                model: this.planCuentaModel
            }), this.createPlanCuentaView.render();
        },
        getPlanCuentasEdit: function(plancuenta) {
            this.planCuentaModel = new app.PlanCuentaModel(), this.planCuentaModel.set({
                id: plancuenta
            }, {
                silent: !0
            }), this.createPlanCuentaView instanceof Backbone.View && (this.createPlanCuentaView.stopListening(), 
            this.createPlanCuentaView.undelegateEvents()), this.createPlanCuentaView = new app.CreatePlanCuentaView({
                model: this.planCuentaModel
            }), this.planCuentaModel.fetch();
        },
        getCentrosCostoMain: function() {
            this.mainCentrosCostoView instanceof Backbone.View && (this.mainCentrosCostoView.stopListening(), 
            this.mainCentrosCostoView.undelegateEvents()), this.mainCentrosCostoView = new app.MainCentrosCostoView();
        },
        getCentrosCostoCreate: function() {
            this.centroCostoModel = new app.CentroCostoModel(), this.createCentroCostoView instanceof Backbone.View && (this.createCentroCostoView.stopListening(), 
            this.createCentroCostoView.undelegateEvents()), this.createCentroCostoView = new app.CreateCentroCostoView({
                model: this.centroCostoModel,
                parameters: {
                    callback: "toShow"
                }
            }), this.createCentroCostoView.render();
        },
        getCentrosCostoEdit: function(centrocosto) {
            this.centroCostoModel = new app.CentroCostoModel(), this.centroCostoModel.set({
                id: centrocosto
            }, {
                silent: !0
            }), this.createCentroCostoView instanceof Backbone.View && (this.createCentroCostoView.stopListening(), 
            this.createCentroCostoView.undelegateEvents()), this.createCentroCostoView = new app.CreateCentroCostoView({
                model: this.centroCostoModel,
                parameters: {
                    callback: "toShow"
                }
            }), this.centroCostoModel.fetch();
        },
        getAsientosMain: function() {
            this.mainAsientosView instanceof Backbone.View && (this.mainAsientosView.stopListening(), 
            this.mainAsientosView.undelegateEvents()), this.mainAsientosView = new app.MainAsientosView();
        },
        getAsientosCreate: function() {
            this.asientoModel = new app.AsientoModel(), this.createAsientoView instanceof Backbone.View && (this.createAsientoView.stopListening(), 
            this.createAsientoView.undelegateEvents()), this.createAsientoView = new app.CreateAsientoView({
                model: this.asientoModel
            }), this.createAsientoView.render();
        },
        getAsientosShow: function(asiento) {
            this.asientoModel = new app.AsientoModel(), this.asientoModel.set({
                id: asiento
            }, {
                silent: !0
            }), this.showAsientoView instanceof Backbone.View && (this.showAsientoView.stopListening(), 
            this.showAsientoView.undelegateEvents()), this.showAsientoView = new app.ShowAsientoView({
                model: this.asientoModel
            });
        },
        getFoldersMain: function() {
            this.mainFoldersView instanceof Backbone.View && (this.mainFoldersView.stopListening(), 
            this.mainFoldersView.undelegateEvents()), this.mainFoldersView = new app.MainFoldersView();
        },
        getDocumentosMain: function() {
            this.mainDocumentosView instanceof Backbone.View && (this.mainDocumentosView.stopListening(), 
            this.mainDocumentosView.undelegateEvents()), this.mainDocumentosView = new app.MainDocumentosView();
        }
    }))();
}(jQuery, this, this.document);

var app = app || {};

!function($, window, document, undefined) {
    var InitComponent = function() {
        $.ajaxSetup({
            cache: !1,
            headers: {
                "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
            }
        });
    };
    InitComponent.prototype = {
        initialize: function() {
            this.initApp(), this.initICheck(), this.initAlertify(), this.initInputMask(), this.initSelect2(), 
            this.initToUpper();
        },
        initApp: function() {
            window.app.AppRouter.start();
        },
        initICheck: function() {
            $("input").iCheck({
                checkboxClass: "icheckbox_minimal-green",
                radioClass: "iradio_minimal-green"
            });
        },
        initAlertify: function() {
            alertify.logPosition("bottom right");
        },
        initInputMask: function() {
            $("[data-mask]").inputmask(), $("[data-currency]").inputmask({
                alias: "decimal",
                autoGroup: !0,
                digits: "2",
                groupSeparator: ","
            });
        },
        initSelect2: function() {
            $(".select2-default").select2({
                language: "es",
                placeholder: "Seleccione"
            }), $(".select2-default-clear").select2({
                language: "es",
                placeholder: "Seleccione",
                allowClear: !0
            });
        },
        initToUpper: function() {
            $(".input-toupper").keyup(function() {
                $(this).val($(this).val().toUpperCase());
            });
        }
    }, $(function() {
        window.initComponent = new InitComponent(), window.initComponent.initialize();
    });
}(jQuery, this, this.document);