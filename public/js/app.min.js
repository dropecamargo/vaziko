/*! koi-frontend - v1.0.0 - 2017-06-12 */
!function($, window, document, undefined) {
    var Misc = function(a) {};
    Misc.prototype = {
        initialize: function() {},
        formToJson: function(selector) {
            var o = {}, a = [];
            return a = $.prototype.isPrototypeOf(selector) ? selector.serializeArray() : $(selector).serializeArray(), 
            $.each(a, function() {
                o[this.name] !== undefined ? (o[this.name].push || (o[this.name] = [ o[this.name] ]), 
                o[this.name].push(this.value || "")) : o[this.name] = this.value || "";
            }), o;
        },
        isUrl: function(str) {
            return /^(http[s]?:\/\/(www\.)?|ftp:\/\/(www\.)?|www\.){1}([0-9A-Za-z-\.@:%_\+~#=]+)+(\/(.)*)?(\?(.)*)?/i.test(str);
        },
        urlFull: function(route) {
            return this.isUrl(document.url) ? (route || (route = ""), /^\//.test(route) || (route = "/" + route), 
            document.url + route) : route;
        },
        parseErrors: function(errors) {
            var text = "";
            if (_.isObject(errors)) {
                var listError = "<ul>";
                $.each(errors, function(field, item) {
                    listError += "<li>" + item[0] + "</li>";
                }), listError += "</ul>", text = listError;
            }
            return text;
        },
        setSpinner: function(selector) {
            selector && $(selector).prepend('<div class="overlay"><i class="fa fa-refresh fa-spin"></i></div>');
        },
        removeSpinner: function(selector) {
            var $selector = $(selector).find(".overlay");
            $selector.length && $selector.remove();
        },
        clearForm: function(form) {
            form.find(":input").each(function() {
                field_type = $(this), "" != field_type.attr("data-currency") && "" != field_type.attr("data-currency-negative") || field_type.val(""), 
                field_type.attr("checked") && field_type.iCheck("check"), (field_type.hasClass("select2-default-clear") || field_type.hasClass("select2-default")) && field_type.select2("destroy").val("").select2();
            }), form.trigger("reset");
        },
        dataTableES: function() {
            return {
                sProcessing: '<div class="overlay"><i class="fa fa-refresh fa-spin"></i></div>',
                sLengthMenu: "Mostrar _MENU_ registros",
                sZeroRecords: "No se encontraron resultados",
                sEmptyTable: "Ningún dato disponible en esta tabla",
                sInfo: "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                sInfoEmpty: "Mostrando registros del 0 al 0 de un total de 0 registros",
                sInfoFiltered: "(filtrado de un total de _MAX_ registros)",
                sInfoPostFix: "",
                sSearch: "Buscar:",
                sUrl: "",
                sInfoThousands: ",",
                sLoadingRecords: "Cargando...",
                oPaginate: {
                    sFirst: "Primero",
                    sLast: "Último",
                    sNext: "Siguiente",
                    sPrevious: "Anterior"
                },
                oAria: {
                    sSortAscending: ": Activar para ordenar la columna de manera ascendente",
                    sSortDescending: ": Activar para ordenar la columna de manera descendente"
                }
            };
        },
        redirect: function(url) {
            url !== undefined && "" != url ? window.location = url : window.location.reload();
        },
        successRedirect: function(msg, url) {
            alertify.success(msg), setTimeout(function() {
                window.Misc.redirect(url);
            }, 500);
        },
        currency: function(value) {
            return accounting.formatMoney(value, "", 2, ".", ",");
        },
        evaluateActionsAccount: function(options) {
            options || (options = {});
            var defaults = {
                callback: null,
                wrap: "body",
                data: null
            }, settings = {};
            settings = $.extend({}, defaults, options), $.ajax({
                url: window.Misc.urlFull(Route.route("asientos.detalle.evaluate")),
                type: "POST",
                data: settings.data,
                beforeSend: function() {
                    window.Misc.setSpinner(settings.wrap);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(settings.wrap);
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                "Function" === {}.toString.call(settings.callback).slice(8, -1) && settings.callback(resp.actions);
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(settings.wrap), alertify.error(thrownError);
            });
        },
        evaluateFacturap: function(options) {
            options || (options = {});
            var defaults = {
                callback: null,
                wrap: "body",
                facturap: null,
                tercero: null,
                naturaleza: null
            }, settings = {};
            settings = $.extend({}, defaults, options), $.ajax({
                url: window.Misc.urlFull(Route.route("facturap.search")),
                type: "GET",
                data: {
                    facturap1_factura: settings.facturap,
                    tercero_nit: settings.tercero
                },
                beforeSend: function() {
                    window.Misc.setSpinner(settings.wrap);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(settings.wrap);
                var response = {
                    actions: !1
                };
                resp.success ? (response.actions = !0, response.facturap = resp.id, response.action = "quota") : "C" == settings.naturaleza ? (response.actions = !0, 
                response.action = "add") : "D" == settings.naturaleza && (response.message = "Para realizar movimientos de naturaleza débito de ingresar un numero de factura existente."), 
                "Function" === {}.toString.call(settings.callback).slice(8, -1) && settings.callback(response);
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(settings.wrap), alertify.error(thrownError);
            });
        },
        cloneOrden: function(options) {
            options || (options = {});
            var defaults = {
                callback: null,
                wrap: "body",
                data: null
            }, settings = {};
            settings = $.extend({}, defaults, options), $.ajax({
                url: window.Misc.urlFull(Route.route("ordenes.clonar", {
                    ordenes: settings.data.orden_codigo
                })),
                type: "GET",
                beforeSend: function() {
                    window.Misc.setSpinner(settings.wrap);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(settings.wrap);
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                "Function" === {}.toString.call(settings.callback).slice(8, -1) && settings.callback(resp);
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(settings.wrap), alertify.error(thrownError);
            });
        }
    }, window.Misc = new Misc(), window.Misc.initialize();
}(jQuery, this, this.document), app || (app = {}), function(window, document, undefined) {
    app.AcabadopModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("acabadosp.index"));
        },
        idAttribute: "id",
        defaults: {
            acabadop_nombre: "",
            acabadop_descripcion: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.ActividadModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("actividades.index"));
        },
        idAttribute: "id",
        defaults: {
            actividad_codigo: "",
            actividad_nombre: "",
            actividad_tarifa: "0",
            actividad_categoria: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.AreapModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("areasp.index"));
        },
        idAttribute: "id",
        defaults: {
            areap_nombre: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.AsientoModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("asientos.index"));
        },
        idAttribute: "id",
        defaults: {
            asiento1_ano: moment().format("YYYY"),
            asiento1_mes: moment().format("M"),
            asiento1_dia: moment().format("D"),
            asiento1_folder: "",
            asiento1_documento: "",
            documento_tipo_consecutivo: "",
            asiento1_numero: "",
            asiento1_beneficiario: "",
            tercero_nit: "",
            tercero_nombre: "",
            asiento1_sucursal: "",
            asiento1_preguardado: "",
            asiento1_detalle: "",
            asiento1_fecha_elaboro: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Asiento2Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("asientos.detalle.index"));
        },
        idAttribute: "id",
        defaults: {
            asiento2_asiento: "",
            asiento2_cuenta: "",
            asiento2_beneficiario: "",
            asiento2_debito: 0,
            asiento2_credito: 0,
            asiento2_centro: "",
            asiento2_base: 0,
            asiento2_detalle: "",
            asiento2_orden: "",
            plancuentas_cuenta: "",
            plancuentas_nombre: "",
            tercero_nit: "",
            tercero_nombre: "",
            centrocosto_nombre: "",
            ordenp_codigo: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.AsientoMovModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("asientos.detalle.movimientos"));
        },
        idAttribute: "id",
        defaults: {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.CentroCostoModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("centroscosto.index"));
        },
        idAttribute: "id",
        defaults: {
            centrocosto_codigo: "",
            centrocosto_centro: "",
            centrocosto_nombre: "",
            centrocosto_descripcion1: "",
            centrocosto_descripcion2: "",
            centrocosto_estructura: "N",
            centrocosto_tipo: "N",
            centrocosto_activo: !0
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.ContactoModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("terceros.contactos.index"));
        },
        idAttribute: "id",
        defaults: {
            tcontacto_nombres: "",
            tcontacto_apellidos: "",
            tcontacto_telefono: "",
            tcontacto_celular: "",
            tcontacto_municipio: "",
            tcontacto_direccion: "",
            tcontacto_direccion_nomenclatura: "",
            tcontacto_email: "",
            tcontacto_cargo: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.DespachopModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("ordenes.despachos.index"));
        },
        idAttribute: "id",
        defaults: {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.DocumentoModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("documentos.index"));
        },
        idAttribute: "id",
        defaults: {
            documento_codigo: "",
            documento_nombre: "",
            documento_folder: "",
            documento_tipo_consecutivo: "A"
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.EmpresaModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("empresa.index"));
        },
        idAttribute: "id",
        defaults: {
            tercero_nit: "",
            tercero_digito: "",
            tercero_regimen: "",
            tercero_tipo: "",
            tercero_persona: "",
            tercero_razonsocial: "",
            tercero_nombre1: "",
            tercero_nombre2: "",
            tercero_apellido1: "",
            tercero_apellido2: "",
            tercero_direccion: "",
            tercero_dir_nomenclatura: "",
            tercero_municipio: "",
            tercero_email: "",
            tercero_telefono1: "",
            tercero_telefono2: "",
            tercero_fax: "",
            tercero_celular: "",
            tercero_actividad: "",
            tercero_cc_representante: "",
            tercero_representante: "",
            tercero_responsable_iva: !1,
            tercero_autoretenedor_cree: !1,
            tercero_gran_contribuyente: !1,
            tercero_autoretenedor_renta: !1,
            tercero_autoretenedor_ica: !1,
            actividad_tarifa: "",
            empresa_niif: "",
            empresa_iva: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.FacturaModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("asientos.facturas.index"));
        },
        idAttribute: "id",
        defaults: {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Factura3Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("asientos.facturas.detalle.index"));
        },
        idAttribute: "id",
        defaults: {
            factura3_factura2: "",
            factura3_observaciones: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Factura4Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("asientos.facturas.factura.index"));
        },
        idAttribute: "id",
        defaults: {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.FacturapModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("facturap.index"));
        },
        idAttribute: "id",
        defaults: {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Facturap2Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("facturap.cuotas.index"));
        },
        idAttribute: "id",
        defaults: {
            facturap2_factura: "",
            facturap2_cuota: "",
            facturap2_vencimiento: "",
            facturap2_valor: 0,
            facturap2_saldo: 0
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.FolderModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("folders.index"));
        },
        idAttribute: "id",
        defaults: {
            folder_codigo: "",
            folder_nombre: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.GrupoModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("grupos.index"));
        },
        idAttribute: "id",
        defaults: {
            grupo_codigo: "",
            grupo_nombre: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.ItemRolloModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("productos.rollos.index"));
        },
        idAttribute: "id",
        defaults: {
            prodboderollo_item: 0,
            prodboderollo_centimetro: 0,
            prodboderollo_saldo: 0
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.MaquinapModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("maquinasp.index"));
        },
        idAttribute: "id",
        defaults: {
            maquinap_nombre: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.MaterialpModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("materialesp.index"));
        },
        idAttribute: "id",
        defaults: {
            materialp_nombre: "",
            materialp_descripcion: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.ModuloModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("roles.permisos.index"));
        },
        idAttribute: "id",
        defaults: {
            name: "",
            display_name: "",
            nivel1: "",
            nivel2: "",
            nivel3: "",
            nivel4: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.OrdenpModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("ordenes.index"));
        },
        idAttribute: "id",
        defaults: {
            orden_codigo: "",
            orden_referencia: "",
            orden_cliente: "",
            tercero_nit: "",
            tercero_nombre: "",
            tercero_direccion: "",
            tercero_dir_nomenclatura: "",
            tercero_municipio: "",
            orden_fecha_inicio: moment().format("YYYY-MM-DD"),
            orden_fecha_entrega: moment().format("YYYY-MM-DD"),
            orden_hora_entrega: "",
            orden_formapago: "CO",
            orden_iva: "",
            orden_contacto: "",
            tcontacto_nombre: "",
            tcontacto_telefono: "",
            orden_suministran: "",
            orden_observaciones: "",
            orden_terminado: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Ordenp2Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("ordenes.productos.index"));
        },
        idAttribute: "id",
        defaults: {
            orden2_referencia: "",
            orden2_cantidad: 0,
            orden2_precio_formula: "",
            orden2_round_formula: "",
            orden2_precio_venta: "",
            orden2_observaciones: "",
            orden2_ancho: 0,
            orden2_alto: 0,
            orden2_c_ancho: 0,
            orden2_c_alto: 0,
            orden2_3d_ancho: 0,
            orden2_3d_alto: 0,
            orden2_3d_profundidad: 0,
            orden2_tiro: !1,
            orden2_yellow: !1,
            orden2_magenta: !1,
            orden2_cyan: !1,
            orden2_key: !1,
            orden2_color1: !1,
            orden2_color2: !1,
            orden2_nota_tiro: "",
            orden2_retiro: !1,
            orden2_yellow2: !1,
            orden2_magenta2: !1,
            orden2_cyan2: !1,
            orden2_key2: !1,
            orden2_color12: !1,
            orden2_color22: !1,
            orden2_nota_retiro: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Ordenp3Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("ordenes.productos.maquinas.index"));
        },
        idAttribute: "id",
        defaults: {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Ordenp4Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("ordenes.productos.materiales.index"));
        },
        idAttribute: "id",
        defaults: {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Ordenp5Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("ordenes.productos.acabados.index"));
        },
        idAttribute: "id",
        defaults: {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.PlanCuentaModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("plancuentas.index"));
        },
        idAttribute: "id",
        defaults: {
            plancuentas_cuenta: "",
            plancuentas_nivel: "",
            plancuentas_nombre: "",
            plancuentas_naturaleza: "D",
            plancuentas_centro: "",
            plancuentas_tercero: !1,
            plancuentas_tipo: "N",
            plancuentas_tasa: 0
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.ProductoModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("productos.index"));
        },
        idAttribute: "id",
        defaults: {
            producto_nombre: "",
            producto_codigo: "",
            producto_codigoori: "",
            producto_referencia: "",
            producto_grupo: "",
            producto_subgrupo: "",
            producto_unidadmedida: "",
            producto_precio: 0,
            producto_costo: 0,
            producto_vidautil: 0,
            producto_unidades: !0,
            producto_serie: !1,
            producto_metrado: !1
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.ProductopModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("productosp.index"));
        },
        idAttribute: "id",
        defaults: {
            productop_nombre: "",
            productop_observaciones: "",
            productop_tiro: !1,
            productop_retiro: !1,
            productop_abierto: !1,
            productop_cerrado: !1,
            productop_3d: !1,
            productop_ancho_med: "",
            productop_alto_med: "",
            productop_c_med_ancho: "",
            productop_c_med_alto: "",
            productop_3d_profundidad_med: "",
            productop_3d_ancho_med: "",
            productop_3d_alto_med: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Productop2Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("productosp.tips.index"));
        },
        idAttribute: "id",
        defaults: {
            productop2_productop: "",
            productop2_tip: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Productop3Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("productosp.areas.index"));
        },
        idAttribute: "id",
        defaults: {
            productop3_productop: "",
            productop3_areap: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Productop4Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("productosp.maquinas.index"));
        },
        idAttribute: "id",
        defaults: {
            productop4_productop: "",
            productop4_maquinap: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Productop5Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("productosp.materiales.index"));
        },
        idAttribute: "id",
        defaults: {
            productop5_productop: "",
            productop5_materialp: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Productop6Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("productosp.acabados.index"));
        },
        idAttribute: "id",
        defaults: {
            productop6_productop: "",
            productop6_acabadop: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.PuntoVentaModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("puntosventa.index"));
        },
        idAttribute: "id",
        defaults: {
            puntoventa_nombre: "",
            puntoventa_numero: "",
            puntoventa_prefijo: "",
            puntoventa_resolucion_dian: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.RolModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("roles.index"));
        },
        idAttribute: "id",
        defaults: {
            name: "",
            display_name: "",
            description: "",
            permissions: []
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.SubGrupoModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("subgrupos.index"));
        },
        idAttribute: "id",
        defaults: {
            subgrupo_codigo: "",
            subgrupo_nombre: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.SucursalModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("sucursales.index"));
        },
        idAttribute: "id",
        defaults: {
            sucursal_nombre: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.TerceroModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("terceros.index"));
        },
        idAttribute: "id",
        defaults: {
            tercero_nit: "",
            tercero_digito: "",
            tercero_regimen: "",
            tercero_tipo: "",
            tercero_persona: "",
            tercero_razonsocial: "",
            tercero_nombre1: "",
            tercero_nombre2: "",
            tercero_apellido1: "",
            tercero_apellido2: "",
            tercero_direccion: "",
            tercero_dir_nomenclatura: "",
            tercero_municipio: "",
            tercero_email: "",
            tercero_telefono1: "",
            tercero_telefono2: "",
            tercero_fax: "",
            tercero_celular: "",
            tercero_actividad: "",
            tercero_cc_representante: "",
            tercero_representante: "",
            tercero_activo: !1,
            tercero_responsable_iva: !1,
            tercero_autoretenedor_cree: !1,
            tercero_gran_contribuyente: !1,
            tercero_autoretenedor_renta: !1,
            tercero_autoretenedor_ica: !1,
            tercero_socio: !1,
            tercero_cliente: !1,
            tercero_acreedor: !1,
            tercero_interno: !1,
            tercero_mandatario: !1,
            tercero_empleado: !1,
            tercero_proveedor: !1,
            tercero_extranjero: !1,
            tercero_afiliado: !1,
            tercero_otro: !1,
            tercero_tecnico: !1,
            tercero_coordinador: !1,
            tercero_coordinador_por: "",
            tercero_cual: "",
            username: "",
            actividad_tarifa: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.TrasladoModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("traslados.index"));
        },
        idAttribute: "id",
        defaults: {
            traslado1_sucursal: "",
            traslado1_numero: "",
            traslado1_destino: "",
            traslado1_fecha: moment().format("YYYY-MM-DD"),
            traslado1_observaciones: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.Traslado2Model = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("traslados.detalle.index"));
        },
        idAttribute: "id",
        defaults: {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.UnidadModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("unidades.index"));
        },
        idAttribute: "id",
        defaults: {
            unidadmedida_sigla: "",
            unidadmedida_nombre: ""
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.UsuarioRolModel = Backbone.Model.extend({
        urlRoot: function() {
            return window.Misc.urlFull(Route.route("terceros.roles.index"));
        },
        idAttribute: "id",
        defaults: {
            user_id: "",
            role_id: ""
        }
    });
}(this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateAcabadospView = Backbone.View.extend({
        el: "#acabadosp-create",
        template: _.template($("#add-acabadop-tpl").html() || ""),
        events: {
            "submit #form-acabadosp": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-acabadop"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("acabadosp.show", {
                    acabadosp: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainAcabadospView = Backbone.View.extend({
        el: "#acabadosp-main",
        initialize: function() {
            this.$acabadospSearchTable = this.$("#acabadosp-search-table"), this.$acabadospSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("acabadosp.index")),
                columns: [ {
                    data: "id",
                    name: "id"
                }, {
                    data: "acabadop_nombre",
                    name: "acabadop_nombre"
                }, {
                    data: "acabadop_descripcion",
                    name: "acabadop_descripcion"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-plus"></i> Nuevo acabado',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("acabadosp.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("acabadosp.show", {
                            acabadosp: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateActividadView = Backbone.View.extend({
        el: "#actividad-create",
        template: _.template($("#add-actividad-tpl").html() || ""),
        events: {
            "submit #form-actividad": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-actividad"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initSpinner && window.initComponent.initSpinner();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("actividades.show", {
                    actividades: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainActividadView = Backbone.View.extend({
        el: "#actividades-main",
        initialize: function() {
            this.$actividadesSearchTable = this.$("#actividades-search-table"), this.$actividadesSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull(Route.route("actividades.index")),
                    data: function(data) {
                        data.datatables = !0;
                    }
                },
                columns: [ {
                    data: "actividad_codigo",
                    name: "actividad_codigo"
                }, {
                    data: "actividad_nombre",
                    name: "actividad_nombre"
                }, {
                    data: "actividad_categoria",
                    name: "actividad_categoria"
                }, {
                    data: "actividad_tarifa",
                    name: "actividad_tarifa"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nueva actividad',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("actividades.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "15%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("actividades.show", {
                            actividades: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateAreapView = Backbone.View.extend({
        el: "#areasp-create",
        template: _.template($("#add-areap-tpl").html() || ""),
        events: {
            "submit #form-areasp": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-areap"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("areasp.show", {
                    areasp: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainAreaspView = Backbone.View.extend({
        el: "#areasp-main",
        initialize: function() {
            this.$areaspSearchTable = this.$("#areasp-search-table"), this.$areaspSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("areasp.index")),
                columns: [ {
                    data: "id",
                    name: "id"
                }, {
                    data: "areap_nombre",
                    name: "areap_nombre"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-plus"></i> Nueva area',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("areasp.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("areasp.show", {
                            areasp: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AsientoActionView = Backbone.View.extend({
        el: "#asiento-content",
        templateOrdenp: _.template($("#searchordenp-asiento-tpl").html() || ""),
        templateFacturap: _.template($("#rfacturap-asiento-tpl").html() || ""),
        templateAddFacturap: _.template($("#add-rfacturap-asiento-tpl").html() || ""),
        templateCuotasFacturap: _.template($("#add-rfacturap2-asiento-tpl").html() || ""),
        templateCartera: _.template($("#rcartera-asiento-tpl").html() || ""),
        templateAddFactura: _.template($("#add-facturacartera-asiento-tpl").html() || ""),
        templateCuotasFactura: _.template($("#add-cuotasfacturacartera-asiento-tpl").html() || ""),
        templateCommentsFactura: _.template($("#add-comments-tpl").html() || ""),
        templateInventario: _.template($("#add-inventario-asiento-tpl").html() || ""),
        templateAddItemRollo: _.template($("#add-itemrollo-asiento-tpl").html() || ""),
        templateChooseItemsRollo: _.template($("#choose-itemrollo-asiento-tpl").html() || ""),
        templateAddSeries: _.template($("#add-series-asiento-tpl").html() || ""),
        events: {
            "submit #form-create-ordenp-asiento-component-source": "onStoreItemOrdenp",
            "submit #form-create-asiento-component-source": "onStoreItemFacturap",
            "change input#facturap1_factura": "facturapChanged",
            "submit #form-create-cartera-component-source": "onStoreItemFactura",
            "change select#factura_nueva": "facturaNuevaChanged",
            "change .orden-change-koi": "ordenChange",
            "change .factura-koi-component": "facturaChange",
            "click .add-comments": "addComments",
            "click .item-factura-remove": "removeComment",
            "submit #form-comments-component": "onStoreComment",
            "submit #form-create-inventario-asiento-component-source": "onStoreItemInventario",
            "change .evaluate-producto-movimiento-asiento": "evaluateProductoInventario"
        },
        parameters: {
            data: {},
            actions: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$modalOp = this.$("#modal-asiento-ordenp-component"), this.$modalFp = this.$("#modal-asiento-facturap-component"), 
            this.$modalIn = this.$("#modal-asiento-inventario-component"), this.$modalCt = this.$("#modal-asiento-cartera-component"), 
            this.cuotasFPList = new app.CuotasFPList(), this.itemRolloINList = new app.ItemRolloINList(), 
            this.productoSeriesINList = new app.ProductoSeriesINList(), this.facturaList = new app.FacturaList(), 
            this.listenTo(this.cuotasFPList, "reset", this.addAllCuotasFacturap), this.listenTo(this.facturaList, "reset", this.addAllFactura), 
            this.listenTo(this.itemRolloINList, "reset", this.addAllItemRolloInventario), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.collection, "sync", this.responseServer);
        },
        render: function() {
            this.runAction();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initInputMask && window.initComponent.initInputMask(), 
            "function" == typeof window.initComponent.initValidator && window.initComponent.initValidator(), 
            "function" == typeof window.initComponent.initDatePicker && window.initComponent.initDatePicker(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck();
        },
        runAction: function() {
            var resp = this.evaluateNextAction(), _this = this, stuffToDo = {
                facturap: function() {
                    _this.$modalFp.find(".content-modal").empty().html(_this.templateFacturap(_this.parameters.data)), 
                    _this.referenceFacturap();
                },
                cartera: function() {
                    _this.$modalCt.find(".content-modal").empty().html(_this.templateCartera(_this.parameters.data)), 
                    _this.referenceCartera();
                },
                ordenp: function() {
                    _this.$modalOp.find(".content-modal").empty().html(_this.templateOrdenp(_this.parameters.data)), 
                    _this.referenceOrdenp();
                },
                inventario: function() {
                    _this.$modalIn.find(".content-modal").empty().html(_this.templateInventario(_this.parameters.data)), 
                    _this.referenceInventario();
                },
                store: function() {
                    _this.onStoreItem();
                }
            };
            stuffToDo[resp.action] && stuffToDo[resp.action]();
        },
        evaluateNextAction: function() {
            var index;
            for (index = this.parameters.actions.length - 1; index >= 0; --index) if (action = this.parameters.actions[index], 
            0 == action.success) return action;
            return {
                action: "store"
            };
        },
        setSuccessAction: function(action) {
            var index;
            for (index = this.parameters.actions.length - 1; index >= 0; --index) item = this.parameters.actions[index], 
            item.action == action && (item.success = !0);
        },
        isLastAction: function(action) {
            var index;
            for (index = this.parameters.actions.length - 1; index >= 0; --index) if (item = this.parameters.actions[index], 
            0 == item.success && item.action != action) return !1;
            return !0;
        },
        validateAction: function(options) {
            options || (options = {});
            var defaults = {
                callback: null,
                action: null
            }, data = {}, settings = {};
            _this = this, settings = $.extend({}, defaults, options), data.action = settings.action, 
            data = $.extend({}, this.parameters.data, data), $.ajax({
                url: window.Misc.urlFull(Route.route("asientos.detalle.validate")),
                type: "POST",
                data: data,
                beforeSend: function() {
                    window.Misc.setSpinner(_this.$wraper);
                }
            }).done(function(resp) {
                if (window.Misc.removeSpinner(_this.$wraper), !_.isUndefined(resp.success)) {
                    var text = resp.success ? "" : resp.errors;
                    if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                    "Function" === {}.toString.call(settings.callback).slice(8, -1) && settings.callback(resp);
                }
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(settings.wrap), alertify.error(thrownError);
            });
        },
        referenceFacturap: function() {
            this.$wraper = this.$("#modal-asiento-wrapper-facturap"), this.$wraperFormFp = this.$("#content-invoice"), 
            this.$wraperErrorFp = this.$("#error-eval-facturap"), this.$wraperErrorFp.hide().empty(), 
            this.$modalFp.modal("show");
        },
        referenceCartera: function() {
            this.$wraper = this.$("#modal-asiento-wrapper-cartera"), this.$wraperFormCt = this.$("#content-cartera"), 
            this.$wraperErrorCt = this.$("#error-eval-cartera"), this.$wraperErrorCt.hide().empty(), 
            this.$modalCt.modal("show"), "C" == this.parameters.data.asiento2_naturaleza && this.$wraperFormCt.html(this.templateCuotasFactura());
        },
        referenceOrdenp: function() {
            this.$wraper = this.$("#modal-asiento-wrapper-ordenp"), this.$wraperFormOp = this.$modalOp.find(".content-modal"), 
            this.$wraperErrorOp = this.$("#error-search-orden-asiento2"), this.$wraperErrorOp.hide().empty(), 
            this.$modalOp.modal("show");
        },
        referenceInventario: function() {
            this.$wraper = this.$("#modal-asiento-wrapper-inventario"), this.$wraperFormIn = this.$modalIn.find(".content-modal"), 
            this.$wraperDetailIn = this.$modalIn.find("#content-detail-inventory"), this.$wraperErrorIn = this.$("#error-inventario-asiento2"), 
            this.$inputInProducto = this.$("#producto_codigo"), this.$inputInUnidades = this.$("#movimiento_cantidad"), 
            this.$inputInSucursal = this.$("#movimiento_sucursal"), this.$wraperErrorIn.hide().empty(), 
            this.$modalIn.modal("show");
        },
        onStoreItemOrdenp: function(e) {
            e.isDefaultPrevented() || (e.preventDefault(), this.parameters.data = $.extend({}, this.parameters.data, window.Misc.formToJson(e.target)), 
            this.validateAction({
                action: "ordenp",
                callback: function(_this) {
                    return function(resp) {
                        resp.success && (_this.setSuccessAction("ordenp", _this.parameters.actions), _this.isLastAction("ordenp") || _this.$modalOp.modal("hide"), 
                        _this.runAction());
                    };
                }(this)
            }));
        },
        facturapChanged: function(e) {
            this.$wraperErrorFp.hide().empty(), this.$wraperFormFp.empty(), window.Misc.evaluateFacturap({
                facturap: $(e.currentTarget).val(),
                naturaleza: this.parameters.data.asiento2_naturaleza,
                tercero: this.parameters.data.tercero_nit,
                wrap: this.$wraperFormFp,
                callback: function(_this) {
                    return function(resp) {
                        if (resp.actions) {
                            var stuffToDo = {
                                add: function() {
                                    _this.$wraperFormFp.html(_this.templateAddFacturap()), _this.ready();
                                },
                                quota: function() {
                                    _this.$wraperFormFp.html(_this.templateCuotasFacturap()), _this.$wraperCuotasFp = _this.$("#browse-rfacturap2-list"), 
                                    _this.cuotasFPList.fetch({
                                        reset: !0,
                                        data: {
                                            facturap1: resp.facturap
                                        }
                                    });
                                }
                            };
                            stuffToDo[resp.action] && stuffToDo[resp.action]();
                        } else _.isUndefined(resp.message) || _.isNull(resp.message) || "" == resp.message || (_this.$wraperErrorFp.empty().append(resp.message), 
                        _this.$wraperErrorFp.show());
                    };
                }(this)
            });
        },
        addOneCuotaFacturap: function(Facturap2Model) {
            var view = new app.CuotasFPListView({
                model: Facturap2Model
            });
            this.$wraperCuotasFp.append(view.render().el), this.ready();
        },
        addAllCuotasFacturap: function() {
            this.cuotasFPList.forEach(this.addOneCuotaFacturap, this);
        },
        onStoreItemFacturap: function(e) {
            e.isDefaultPrevented() || (e.preventDefault(), this.parameters.data = $.extend({}, this.parameters.data, window.Misc.formToJson(e.target)), 
            this.validateAction({
                action: "facturap",
                callback: function(_this) {
                    return function(resp) {
                        resp.success && (_this.setSuccessAction("facturap", _this.parameters.actions), _this.isLastAction("facturap") || _this.$modalFp.modal("hide"), 
                        _this.runAction());
                    };
                }(this)
            }));
        },
        addOneItemRolloInventario: function(ItemRolloModel, choose) {
            choose || (choose = !1);
            var view = new app.ItemRolloINListView({
                model: ItemRolloModel,
                parameters: {
                    choose: choose
                }
            });
            this.$wraperItemRollo.append(view.render().el), this.ready();
        },
        addAllItemRolloInventario: function() {
            var _this = this;
            this.itemRolloINList.forEach(function(model, index) {
                _this.addOneItemRolloInventario(model, !0);
            });
        },
        addOneSerieInventario: function(ProductoModel) {
            var view = new app.ProductoSeriesINListView({
                model: ProductoModel
            });
            this.$wraperSeries.append(view.render().el), this.ready();
        },
        evaluateProductoInventario: function(e) {
            var _this = this, producto = this.$inputInProducto.val(), sucursal = this.$inputInSucursal.val(), unidades = this.$inputInUnidades.val();
            this.$wraperDetailIn.empty(), producto && sucursal && unidades && $.ajax({
                url: window.Misc.urlFull(Route.route("productos.search")),
                type: "GET",
                data: {
                    producto_codigo: producto
                },
                beforeSend: function() {
                    _this.$wraperErrorIn.hide().empty(), window.Misc.setSpinner(_this.$wraperFormIn);
                }
            }).done(function(resp) {
                if (window.Misc.removeSpinner(_this.$wraperFormIn), resp.success) {
                    if (!resp.producto_unidades) return _this.$wraperErrorIn.empty().append("No es posible realizar movimientos para productos que no manejan unidades"), 
                    void _this.$wraperErrorIn.show();
                    if (resp.producto_metrado) if ("D" == _this.parameters.data.asiento2_naturaleza) {
                        _this.$wraperDetailIn.html(_this.templateAddItemRollo()), _this.$wraperItemRollo = _this.$("#browse-itemtollo-list");
                        for (var item = 1; item <= unidades; item++) _this.addOneItemRolloInventario(new app.ItemRolloModel({
                            id: item
                        }));
                    } else _this.$wraperDetailIn.html(_this.templateChooseItemsRollo()), _this.$wraperItemRollo = _this.$("#browse-chooseitemtollo-list"), 
                    _this.itemRolloINList.fetch({
                        reset: !0,
                        data: {
                            producto: resp.id,
                            sucursal: sucursal
                        }
                    }); else if (resp.producto_serie && "D" == _this.parameters.data.asiento2_naturaleza) {
                        _this.$wraperDetailIn.html(_this.templateAddSeries()), _this.$wraperSeries = _this.$("#browse-series-list");
                        for (var item = 1; item <= unidades; item++) _this.addOneSerieInventario(new app.ProductoModel({
                            id: item
                        }));
                    }
                }
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                _this.$wraperErrorIn.empty().append(thrownError), _this.$wraperErrorIn.show();
            });
        },
        onStoreItemInventario: function(e) {
            e.isDefaultPrevented() || (e.preventDefault(), this.parameters.data = $.extend({}, this.parameters.data, window.Misc.formToJson(e.target)), 
            this.validateAction({
                action: "inventario",
                callback: function(_this) {
                    return function(resp) {
                        resp.success && (_this.setSuccessAction("inventario", _this.parameters.actions), 
                        _this.isLastAction("inventario") || _this.$modalIn.modal("hide"), _.isUndefined(resp.asiento2_valor) || _.isNull(resp.asiento2_valor) || resp.asiento2_valor == _this.parameters.data.asiento2_valor || (_this.parameters.data.asiento2_valor = resp.asiento2_valor), 
                        _this.runAction());
                    };
                }(this)
            }));
        },
        onStoreItemFactura: function(e) {
            e.isDefaultPrevented() || (e.preventDefault(), this.parameters.data = $.extend({}, this.parameters.data, window.Misc.formToJson(e.target)), 
            this.validateAction({
                action: "cartera",
                callback: function(_this) {
                    return function(resp) {
                        resp.success && (_this.setSuccessAction("cartera", _this.parameters.actions), _this.isLastAction("cartera") || _this.$modalCt.modal("hide"), 
                        _.isUndefined(resp.asiento2_valor) || _.isNull(resp.asiento2_valor) || resp.asiento2_valor == _this.parameters.data.asiento2_valor || (_this.parameters.data.asiento2_valor = resp.asiento2_valor), 
                        _this.runAction());
                    };
                }(this)
            }));
        },
        facturaNuevaChanged: function(e) {
            this.$wraperErrorCt.hide().empty(), this.$wraperFormCt.empty(), "N" == $(e.currentTarget).val() ? this.$wraperFormCt.html(this.templateAddFactura()) : this.$wraperFormCt.html(this.templateCuotasFactura()), 
            this.ready();
        },
        ordenChange: function(e) {
            var factura1_orden = this.$(e.currentTarget).val();
            this.$("#wrapper-table-orden").removeAttr("hidden"), this.facturaList.reset(), this.facturaList.fetch({
                reset: !0,
                data: {
                    factura1_orden: factura1_orden
                }
            }), this.$wraper = this.$("#browse-orden-pendientes-list"), this.$call = "ordenChange";
        },
        addComments: function(e) {
            this.$modalCtComments = this.$("#modal-comments-component"), this.asientoFacturaCommentsList = new app.AsientoFacturaCommentsList();
            var id = this.$(e.currentTarget).attr("data-resource");
            this.$modalCtComments.find(".content-modal").empty().html(this.templateCommentsFactura({})), 
            this.$modalCtComments.find(".modal-title").text("Orden #" + id), this.$modalCtComments.modal("show"), 
            this.wrapp = $("#render_comments_" + id), this.referenceViews();
        },
        referenceViews: function() {
            this.facturaCommentsListView = new app.FacturaCommentsListView({
                collection: this.asientoFacturaCommentsList,
                parameters: {
                    el: this.wrapp,
                    edit: !0
                }
            });
        },
        onStoreComment: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.asientoFacturaCommentsList.trigger("store", data);
            }
        },
        facturaChange: function(e) {
            var factura1_id = this.$(e.currentTarget).val();
            this.$("#wrapper-table-factura-exists").removeAttr("hidden"), this.facturaList.reset(), 
            this.facturaList.fetch({
                reset: !0,
                data: {
                    factura1_id: factura1_id
                }
            }), this.$wraper = this.$("#browse-factura-exists-list"), this.$call = "facturaChange";
        },
        addOneFactura: function(FacturaModel) {
            var view = new app.FacturaPendienteOrdenItemView({
                model: FacturaModel,
                parameters: {
                    call: this.$call
                }
            });
            this.$wraper.append(view.render().el), this.ready();
        },
        addAllFactura: function() {
            this.$wraper.find("tbody").html(""), this.facturaList.forEach(this.addOneFactura, this);
        },
        onStoreItem: function(e) {
            this.model.id != undefined ? this.collection.trigger("store", this.parameters.data) : this.model.save(this.parameters.data, {
                patch: !0,
                silent: !0
            });
        },
        responseServer: function(model, resp, opts) {
            _.isUndefined(resp.success) || resp.success && (this.$modalOp.modal("hide"), this.$modalIn.modal("hide"), 
            this.$modalFp.modal("hide"), this.$modalCt.modal("hide"));
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AsientoCuentasListView = Backbone.View.extend({
        el: "#browse-detalle-asiento-list",
        events: {
            "click .item-asiento2-remove": "removeOne"
        },
        parameters: {
            wrapper: null,
            edit: !1,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$debitos = this.$("#total-debitos"), this.$creditos = this.$("#total-creditos"), 
            this.$diferencia = this.$("#total-diferencia"), this.confCollection = {
                reset: !0,
                data: {}
            }, this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "store", this.storeOne), 
            this.listenTo(this.collection, "sync", this.responseServer), _.isUndefined(this.parameters.dataFilter.asiento) || _.isNull(this.parameters.dataFilter.asiento) || (this.confCollection.data.asiento = this.parameters.dataFilter.asiento, 
            this.collection.fetch(this.confCollection));
        },
        addOne: function(Asiento2Model) {
            var view = new app.AsientoCuentasItemView({
                model: Asiento2Model,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            Asiento2Model.view = view, this.$el.append(view.render().el), this.totalize();
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        storeOne: function(data) {
            var _this = this;
            window.Misc.setSpinner(this.parameters.wrapper), new app.Asiento2Model().save(data, {
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner(_this.parameters.wrapper);
                        var text = resp.success ? "" : resp.errors;
                        if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                        _this.collection.add(model);
                    }
                },
                error: function(model, error) {
                    window.Misc.removeSpinner(_this.parameters.wrapper), alertify.error(error.statusText);
                }
            });
        },
        removeOne: function(e) {
            e.preventDefault();
            var resource = $(e.currentTarget).attr("data-resource"), model = this.collection.get(resource), _this = this;
            model instanceof Backbone.Model && model.destroy({
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        if (window.Misc.removeSpinner(_this.parameters.wrapper), !resp.success) return void alertify.error(resp.errors);
                        model.view.remove(), _this.collection.remove(model), _this.totalize();
                    }
                }
            });
        },
        totalize: function() {
            var data = this.collection.totalize();
            this.$debitos.length && this.$debitos.html(window.Misc.currency(data.debitos)), 
            this.$creditos.length && this.$creditos.html(window.Misc.currency(data.creditos)), 
            this.$diferencia.length && this.$diferencia.html(window.Misc.currency(data.diferencia));
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(model, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AsientoCuentasItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#add-asiento2-item-tpl").html() || ""),
        templateInfo: _.template($("#show-info-asiento2-tpl").html() || ""),
        templateInfoFacturaItem: _.template($("#add-info-factura-item").html() || ""),
        templateInfoFacturapItem: _.template($("#add-info-facturap-item").html() || ""),
        templateInfoInventarioItem: _.template($("#add-info-inventario-item").html() || ""),
        events: {
            "click .item-asiento2-show-info": "showInfo"
        },
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$modalInfo = $("#modal-asiento-show-info-component"), this.asientoMovimientosList = new app.AsientoMovimientosList(), 
            this.listenTo(this.model, "change", this.render), this.listenTo(this.asientoMovimientosList, "request", this.loadSpinner), 
            this.listenTo(this.asientoMovimientosList, "sync", this.responseServer), this.listenTo(this.asientoMovimientosList, "reset", this.addAll);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$tercero = {
                tercero_nit: attributes.tercero_nit,
                tercero_nombre: attributes.tercero_nombre
            }, this.$naturaleza = attributes.asiento2_naturaleza, this.$el.html(this.template(attributes)), 
            this;
        },
        showInfo: function() {
            var attributes = this.model.toJSON();
            this.$modalInfo.find(".content-modal").empty().html(this.templateInfo(attributes)), 
            this.$wrapGeneral = this.$modalInfo.find("#render-info-modal"), this.count = 0, 
            this.asientoMovimientosList.fetch({
                reset: !0,
                data: {
                    asiento2: this.model.get("id")
                }
            }), this.$modalInfo.modal("show");
        },
        addOne: function(AsientoMovModel) {
            var attributes = AsientoMovModel.toJSON();
            if (attributes.tercero = this.$tercero, attributes.naturaleza = this.$naturaleza, 
            "F" == attributes.movimiento_tipo) this.$wrapGeneral.empty().html(this.templateInfoFacturaItem(attributes)), 
            this.$wrapperList = this.$modalInfo.find("#browse-showinfo-factura-list"); else if ("FP" == attributes.movimiento_tipo) {
                if (attributes.movimiento_nuevo) return void this.$wrapGeneral.empty().html(this.templateInfoFacturapItem(attributes));
                0 == this.count && (this.$wrapGeneral.empty().html(this.templateInfoFacturapItem(attributes)), 
                this.$wrapperList = this.$modalInfo.find("#browse-showinfo-facturap-list"), this.count = this.count + 1);
            } else "IP" == attributes.movimiento_tipo && (this.$wrapGeneral.empty().html(this.templateInfoInventarioItem(attributes)), 
            this.$wrapperList = this.$modalInfo.find("#browse-showinfo-asiento-list"));
            var view = new app.AsientoMovimientosItemView({
                model: AsientoMovModel
            });
            this.$wrapperList.append(view.render().el);
        },
        addAll: function() {
            this.asientoMovimientosList.forEach(this.addOne, this);
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.$wrapperList);
        },
        responseServer: function(model, resp, opts) {
            window.Misc.removeSpinner(this.$wrapperList);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AsientoMovimientosItemView = Backbone.View.extend({
        tagName: "tr",
        templateDetalleInventario: _.template($("#show-info-detalle-inventario").html() || ""),
        templateDetalleFactura: _.template($("#show-info-detalle-factura").html() || ""),
        templateDetalleFacturap: _.template($("#show-info-detalle-facturap").html() || ""),
        initialize: function() {
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return "FH" == attributes.movimiento_tipo ? this.$el.html(this.templateDetalleFactura(attributes)) : "IH" == attributes.movimiento_tipo ? ("IH" != attributes.movimiento_tipo || _.isNull(attributes.movimiento_serie) ? ($(".first-row").text("Item"), 
            $(".second-row").text("Metros (m)")) : ($(".first-row").text("Item"), $(".second-row").text("Series")), 
            this.$el.html(this.templateDetalleInventario(attributes))) : "FP" == attributes.movimiento_tipo && this.$el.html(this.templateDetalleFacturap(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateAsientoView = Backbone.View.extend({
        el: "#asientos-create",
        template: _.template($("#add-asiento-tpl").html() || ""),
        templateFp: _.template($("#add-rfacturap-tpl").html() || ""),
        events: {
            "change select#asiento1_documento": "documentoChanged",
            "change input#asiento2_base": "baseChanged",
            "submit #form-asientos": "onStore"
        },
        initialize: function() {
            this.$modalFactura = $("#modal-facturap-component"), this.asientoCuentasList = new app.AsientoCuentasList(), 
            this.listenTo(this.model, "change", this.render), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            attributes.edit = !1, this.$el.html(this.template(attributes)), this.$numero = this.$("#asiento1_numero"), 
            this.$form = this.$("#form-asientos"), this.$formItem = this.$("#form-item-asiento"), 
            this.$inputTasa = this.$("#asiento2_tasa"), this.$inputValor = this.$("#asiento2_valor"), 
            this.$inputBase = this.$("#asiento2_base"), this.spinner = this.$("#spinner-main"), 
            this.referenceViews(), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initValidator && window.initComponent.initValidator(), 
            "function" == typeof window.initComponent.initDatePicker && window.initComponent.initDatePicker();
        },
        referenceViews: function() {
            this.cuentasListView = new app.AsientoCuentasListView({
                collection: this.asientoCuentasList,
                parameters: {
                    wrapper: this.el,
                    edit: !0,
                    dataFilter: {
                        asiento: this.model.get("id")
                    }
                }
            });
        },
        documentoChanged: function(e) {
            var _this = this, documento = $(e.currentTarget).val();
            _this.$numero.val(""), _.isUndefined(documento) || _.isNull(documento) || "" == documento || $.ajax({
                url: window.Misc.urlFull(Route.route("documentos.show", {
                    documentos: documento
                })),
                type: "GET",
                beforeSend: function() {
                    window.Misc.setSpinner(_this.spinner);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.spinner), _.isObject(resp) && (_.isUndefined(resp.documento_tipo_consecutivo) || _.isNull(resp.documento_tipo_consecutivo) || (_this.$numero.val(resp.documento_consecutivo + 1), 
                "M" == resp.documento_tipo_consecutivo ? _this.$numero.prop("readonly", !1) : "A" == resp.documento_tipo_consecutivo && _this.$numero.prop("readonly", !0)));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.spinner), alertify.error(thrownError);
            });
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                data.tercero_nit = data.tercero_nit ? data.tercero_nit : data.asiento1_beneficiario, 
                data.tercero_nombre = data.tercero_nombre ? data.tercero_nombre : data.asiento1_beneficiario_nombre, 
                window.Misc.evaluateActionsAccount({
                    data: data,
                    wrap: this.spinner,
                    callback: function(_this) {
                        return function(actions) {
                            Array.isArray(actions) && actions.length > 0 ? (_this.asientoActionView instanceof Backbone.View && (_this.asientoActionView.stopListening(), 
                            _this.asientoActionView.undelegateEvents()), _this.asientoActionView = new app.AsientoActionView({
                                model: _this.model,
                                collection: _this.asientoCuentasList,
                                parameters: {
                                    data: data,
                                    actions: actions
                                }
                            }), _this.asientoActionView.render()) : _this.model.save(data, {
                                patch: !0,
                                silent: !0
                            });
                        };
                    }(this)
                });
            }
        },
        baseChanged: function(e) {
            var tasa = this.$inputTasa.val(), base = this.$inputBase.inputmask("unmaskedvalue");
            !_.isUndefined(tasa) && !_.isNull(tasa) && tasa > 0 ? this.$inputValor.val(tasa * base / 100) : this.$inputValor.val("");
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.spinner);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.spinner), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                this.createFacturapView instanceof Backbone.View && (this.createFacturapView.stopListening(), 
                this.createFacturapView.undelegateEvents()), this.asientoActionView instanceof Backbone.View && (this.asientoActionView.stopListening(), 
                this.asientoActionView.undelegateEvents()), Backbone.history.navigate(Route.route("asientos.edit", {
                    asientos: resp.id
                }), {
                    trigger: !0
                });
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.EditAsientoView = Backbone.View.extend({
        el: "#asientos-create",
        template: _.template($("#add-asiento-tpl").html() || ""),
        templateFp: _.template($("#add-rfacturap-tpl").html() || ""),
        events: {
            "change select#asiento1_documento": "documentoChanged",
            "submit #form-item-asiento": "onStoreItem",
            "change input#asiento2_base": "baseChanged",
            "click .submit-asiento": "submitAsiento",
            "submit #form-asientos": "onStore"
        },
        initialize: function() {
            this.asientoCuentasList = new app.AsientoCuentasList(), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            attributes.edit = !0, this.$el.html(this.template(attributes)), this.$numero = this.$("#asiento1_numero"), 
            this.$form = this.$("#form-asientos"), this.$formItem = this.$("#form-item-asiento"), 
            this.$inputTasa = this.$("#asiento2_tasa"), this.$inputValor = this.$("#asiento2_valor"), 
            this.$inputBase = this.$("#asiento2_base"), this.$inputDocumento = this.$("#asiento1_documento"), 
            this.spinner = this.$("#spinner-main"), this.referenceViews(), this.ready(), "A" == this.model.get("documento_tipo_consecutivo") && this.$inputDocumento.change();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initValidator && window.initComponent.initValidator(), 
            "function" == typeof window.initComponent.initDatePicker && window.initComponent.initDatePicker(), 
            "function" == typeof window.initComponent.initInputMask && window.initComponent.initInputMask();
        },
        referenceViews: function() {
            this.cuentasListView = new app.AsientoCuentasListView({
                collection: this.asientoCuentasList,
                parameters: {
                    wrapper: this.spinner,
                    edit: !0,
                    dataFilter: {
                        asiento: this.model.get("id")
                    }
                }
            });
        },
        documentoChanged: function(e) {
            var _this = this, documento = $(e.currentTarget).val();
            _this.$numero.val(""), _.isUndefined(documento) || _.isNull(documento) || "" == documento || $.ajax({
                url: window.Misc.urlFull(Route.route("documentos.show", {
                    documentos: documento
                })),
                type: "GET",
                beforeSend: function() {
                    window.Misc.setSpinner(_this.spinner);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.spinner), _.isObject(resp) && (_.isUndefined(resp.documento_tipo_consecutivo) || _.isNull(resp.documento_tipo_consecutivo) || (_this.$numero.val(resp.documento_consecutivo + 1), 
                "M" == resp.documento_tipo_consecutivo ? _this.$numero.prop("readonly", !1) : "A" == resp.documento_tipo_consecutivo && _this.$numero.prop("readonly", !0)));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.spinner), alertify.error(thrownError);
            });
        },
        submitAsiento: function(e) {
            this.$form.submit();
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        onStoreItem: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                data.asiento1_id = this.model.get("id"), data.tercero_nit = data.tercero_nit ? data.tercero_nit : this.model.get("tercero_nit"), 
                data.tercero_nombre = data.tercero_nombre ? data.tercero_nombre : this.model.get("tercero_nombre"), 
                window.Misc.evaluateActionsAccount({
                    data: data,
                    wrap: this.spinner,
                    callback: function(_this) {
                        return function(actions) {
                            Array.isArray(actions) && actions.length > 0 ? (_this.asientoActionView instanceof Backbone.View && (_this.asientoActionView.stopListening(), 
                            _this.asientoActionView.undelegateEvents()), _this.asientoActionView = new app.AsientoActionView({
                                model: _this.model,
                                collection: _this.asientoCuentasList,
                                parameters: {
                                    data: data,
                                    actions: actions
                                }
                            }), _this.asientoActionView.render()) : _this.asientoCuentasList.trigger("store", data);
                        };
                    }(this)
                }), window.Misc.clearForm(this.$formItem);
            }
        },
        baseChanged: function(e) {
            var tasa = this.$inputTasa.val(), base = this.$inputBase.inputmask("unmaskedvalue");
            !_.isUndefined(tasa) && !_.isNull(tasa) && tasa > 0 ? this.$inputValor.val(tasa * base / 100) : this.$inputValor.val("");
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.spinner);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.spinner), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("asientos.edit", {
                    asientos: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.FacturaCommentsListView = Backbone.View.extend({
        el: null,
        parameters: {
            edit: !1,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.confCollection = {
                reset: !0,
                data: {}
            }, this.$modalCtComments = $("#modal-comments-component"), this.$el = this.parameters.el, 
            this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "store", this.storeOne), 
            this.listenTo(this.collection, "sync", this.responseServer), _.isUndefined(this.parameters.dataFilter.orden_id) || _.isNull(this.parameters.dataFilter.orden_id) || (this.confCollection.data.orden_id = this.parameters.dataFilter.orden_id, 
            this.collection.fetch(this.confCollection));
        },
        addOne: function(factura3Model) {
            var view = new app.FacturaCommentItemView({
                model: factura3Model,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            factura3Model.view = view, this.$el.append(view.render().el);
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        storeOne: function(data) {
            var _this = this;
            window.Misc.setSpinner(this.parameters.wrapper), new app.Factura3Model().save(data, {
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner(_this.parameters.wrapper);
                        var text = resp.success ? "" : resp.errors;
                        if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                        _this.collection.add(model);
                    }
                },
                error: function(model, error) {
                    window.Misc.removeSpinner(_this.parameters.wrapper), alertify.error(error.statusText);
                }
            });
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(model, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper), this.$modalCtComments.modal("hide");
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.FacturaCommentItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#add-comments-item-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.FacturaPendienteOrdenItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#factura-item-list-tpl").html() || ""),
        parameters: {
            edit: !1,
            call: null
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            "facturaChange" == this.parameters.call && (this.template = _.template($("#add-item-factura-exists-tpl").html() || "")), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, attributes.call = this.parameters.call, 
            this.$el.html(this.template(attributes)), this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CuotasFPListView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#add-rfacturap2-item-tpl").html() || ""),
        initialize: function() {
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return this.$el.html(this.template(attributes)), this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ItemRolloINListView = Backbone.View.extend({
        tagName: "tr",
        template: null,
        initialize: function(opts) {
            opts.parameters.choose ? this.template = _.template($("#choose-itemrollo-tpl").html() || "") : this.template = _.template($("#add-itemrollo-tpl").html() || ""), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return this.$el.html(this.template(attributes)), this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainAsientosView = Backbone.View.extend({
        el: "#asientos-main",
        initialize: function() {
            this.$asientosSearchTable = this.$("#asientos-search-table"), this.$asientosSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("asientos.index")),
                columns: [ {
                    data: "asiento1_numero",
                    name: "asiento1_numero"
                }, {
                    data: "asiento1_ano",
                    name: "asiento1_ano"
                }, {
                    data: "asiento1_mes",
                    name: "asiento1_mes"
                }, {
                    data: "tercero_nit",
                    name: "tercero_nit"
                }, {
                    data: "tercero_nombre",
                    name: "tercero_nombre"
                }, {
                    data: "tercero_razonsocial",
                    name: "tercero_razonsocial"
                }, {
                    data: "tercero_nombre1",
                    name: "tercero_nombre1"
                }, {
                    data: "tercero_nombre2",
                    name: "tercero_nombre2"
                }, {
                    data: "tercero_apellido1",
                    name: "tercero_apellido1"
                }, {
                    data: "tercero_apellido2",
                    name: "tercero_apellido2"
                }, {
                    data: "asiento1_preguardado",
                    name: "asiento1_preguardado"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nueva asiento',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("asientos.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return parseInt(full.asiento1_preguardado) ? '<a href="' + window.Misc.urlFull(Route.route("asientos.edit", {
                            asientos: full.id
                        })) + '">' + data + ' <span class="label label-warning">PRE</span></a>' : '<a href="' + window.Misc.urlFull(Route.route("asientos.show", {
                            asientos: full.id
                        })) + '">' + data + "</a>";
                    }
                }, {
                    targets: [ 1, 2 ],
                    width: "10%"
                }, {
                    targets: 3,
                    width: "15%"
                }, {
                    targets: 4,
                    searchable: !1
                }, {
                    targets: [ 5, 6, 7, 8, 9 ],
                    visible: !1
                }, {
                    targets: 10,
                    visible: !1,
                    searchable: !1
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ProductoSeriesINListView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#add-serie-tpl").html() || ""),
        initialize: function() {
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return this.$el.html(this.template(attributes)), this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ShowAsientoView = Backbone.View.extend({
        el: "#asientos-show",
        initialize: function() {
            this.model.id != undefined && (this.asientoCuentasList = new app.AsientoCuentasList(), 
            this.referenceViews());
        },
        referenceViews: function() {
            this.cuentasListView = new app.AsientoCuentasListView({
                collection: this.asientoCuentasList,
                parameters: {
                    wrapper: this.el,
                    dataFilter: {
                        asiento: this.model.get("id")
                    }
                }
            });
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateCentroCostoView = Backbone.View.extend({
        el: "#centrocosto-create",
        template: _.template($("#add-centrocosto-tpl").html() || ""),
        events: {
            "submit #form-centrocosto": "onStore"
        },
        parameters: {
            callback: ""
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.msgSuccess = "Centro de costo guardado con exito!", this.$wraperForm = this.$("#render-form-centrocosto"), 
            this.listenTo(this.model, "change", this.render), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck(), 
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                var _this = this, stuffToDo = {
                    toShow: function() {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("centroscosto.show", {
                            centroscosto: resp.id
                        })));
                    },
                    default: function() {
                        alertify.success(_this.msgSuccess);
                    }
                };
                stuffToDo[this.parameters.callback] ? stuffToDo[this.parameters.callback]() : stuffToDo.default();
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainCentrosCostoView = Backbone.View.extend({
        el: "#centroscosto-main",
        initialize: function() {
            this.$centroscostoSearchTable = this.$("#centroscosto-search-table"), this.$centroscostoSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("centroscosto.index")),
                columns: [ {
                    data: "centrocosto_codigo",
                    name: "centrocosto_codigo"
                }, {
                    data: "centrocosto_centro",
                    name: "centrocosto_centro"
                }, {
                    data: "centrocosto_nombre",
                    name: "centrocosto_nombre"
                }, {
                    data: "centrocosto_estructura",
                    name: "centrocosto_estructura"
                }, {
                    data: "centrocosto_activo",
                    name: "centrocosto_activo"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nuevo centro de costo',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("centroscosto.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("centroscosto.show", {
                            centroscosto: full.id
                        })) + '">' + data + "</a>";
                    }
                }, {
                    targets: 3,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return "S" == data ? "Si" : "No";
                    }
                }, {
                    targets: [ 4 ],
                    width: "10%",
                    render: function(data, type, full, row) {
                        return data ? "Si" : "No";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentAddressView = Backbone.View.extend({
        el: "body",
        template: _.template($("#koi-address-component-tpl").html() || ""),
        templateSelect: _.template($("#koi-component-select-tpl").html() || ""),
        events: {
            "focus input.address-koi-component": "addressChanged",
            "click .btn-address-koi-component": "focusComponent",
            "submit #form-address-component": "addAddress",
            "change #component-select": "ChangeSelect",
            "click .koi-component-remove-last": "removeLastItem",
            "click .koi-component-remove": "removeItem",
            "click .koi-component-add": "listeningAddress"
        },
        initialize: function() {
            this.$modalComponent = this.$("#modal-address-component"), this.$modalComponentValidacion = this.$("#modal-address-component-validacion");
        },
        focusComponent: function(e) {
            $("#" + $(e.currentTarget).attr("data-field")).focus();
        },
        addressChanged: function(e) {
            this.inputContent = $(e.currentTarget), this.inputContentNm = this.$("#" + this.inputContent.attr("data-nm-name")), 
            this.inputContentNmValue = this.$("#" + this.inputContent.attr("data-nm-value")), 
            this.$modalComponent.find(".content-modal").html(this.template({})), this.$addressField = this.$modalComponent.find("#koi_direccion"), 
            this.$addressNomenclaturaField = this.$modalComponent.find("#koi_direccion_nm"), 
            this.$formComponent = this.$modalComponent.find("#form-address-component"), this.addressData = new Array(), 
            this.addressDataNm = new Array(), this.num = new Array(), this.validaciones = [ "Agencia", "Agrupación", "Almacen", "Autopista", "Avenida", "Avenida Carrera", "Barrio", "Boulevar", "Calle", "Camino", "Carrera", "Carretera", "Casa", "Celula", "Centro Comercial", "Ciudadela", "Conjunto", "Conjunto Residencial", "Corregimiento", "Departamento", "Deposito", "Edificio", "Entrada", "Etapa", "Finca", "Hacienda", "Lote", "Modulo", "Municipio", "Parcela", "Parque", "Parqueadero", "Pasaje", "Paseo", "Predio", "Puente", "Puesto", "Salón", "Salón Comunal", "Sector", "Suite", "Terminal", "Terraza", "Torre", "Unidad", "Unidad Residencial", "Urbanización", "Variante", "Vereda", "Zona", "Zona Franca" ], 
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initAlertify && window.initComponent.initAlertify(), 
            this.$formComponent.validator(), this.$modalComponent.modal("show");
        },
        addAddress: function(e) {
            e.isDefaultPrevented() || (e.preventDefault(), this.inputContent.val(this.$addressField.val()), 
            this.inputContentNm.text(this.$addressNomenclaturaField.val()), this.inputContentNmValue.val(this.$addressNomenclaturaField.val()), 
            this.$modalComponent.modal("hide"));
        },
        listeningAddress: function(e) {
            if (parseInt($(e.target).text().trim()) > 0 || parseInt($(e.target).text().trim()) < 9) this.num = $(e.target).text().trim(), 
            parseInt(this.addressData[this.addressData.length - 1]) > 0 || parseInt(this.addressData[this.addressData.length - 1]) < 9 ? (this.addressData[this.addressData.length - 1] += this.num, 
            this.addressDataNm[this.addressDataNm.length - 1] += this.num) : (this.addressData.push(this.num), 
            this.addressDataNm.push(this.num)); else if (this.num = [], this.addressData[this.addressData.length - 1] != $(e.target).text().trim()) {
                for (var i = 0; i < this.validaciones.length; i++) $(e.target).text().trim() == this.validaciones[i] && (this.$modalComponentValidacion.find(".modal-content").html(this.templateSelect({})), 
                this.$modalComponentValidacion.find(".modal-title").text($(e.target).text().trim()), 
                this.$modalComponentValidacion.modal("show"));
                "#" == $(e.target).text().trim() || "-" == $(e.target).text().trim() ? (this.addressData.push($(e.target).text().trim()), 
                this.addressDataNm.push(" ")) : (this.addressData.push($(e.target).text().trim()), 
                this.addressDataNm.push($(e.target).attr("data-key")));
            } else alertify.error("No puede seleccionar dos nomenclaturas iguales ni más de dos letras seguidas");
            this.buildAddress();
        },
        ChangeSelect: function(e) {
            var _this = this;
            this.$component = this.$("#component-input").hide();
            var valor = "";
            if ("si" == $(e.target).val()) _this.$component.show(), $("input#component-input-text").change(function() {
                for (var dato = $(this).val($(this).val().toUpperCase()), reg = /[^A-Za-z0-9&ÑñáéíóúÁÉÍÓÚ\/\s\/]/i, i = 0; i <= dato.val().length - 1; i++) reg.test(dato.val().charAt(i)) || (dato.val().replace(reg, ""), 
                valor += dato.val().charAt(i));
                _this.addressData.push(valor), _this.addressDataNm.push(valor), _this.buildAddress(), 
                _this.$modalComponentValidacion.modal("hide");
            }); else {
                if ("no" != $(e.target).val()) return !1;
                _this.$modalComponentValidacion.modal("hide");
            }
        },
        removeLastItem: function(e) {
            e.isDefaultPrevented() || (e.preventDefault(), this.addressData.pop(), this.addressDataNm.pop(), 
            this.buildAddress());
        },
        removeItem: function(e) {
            e.isDefaultPrevented() || (e.preventDefault(), this.addressData.length = 0, this.addressDataNm.length = 0, 
            this.num.length = 0, this.buildAddress());
        },
        buildAddress: function() {
            var addreess = $.grep(this.addressData, Boolean).join(" ").trim();
            this.$addressField.val(addreess);
            var addreessNm = $.grep(this.addressDataNm, Boolean).join(" ").trim();
            this.$addressNomenclaturaField.val(addreessNm);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ConfirmWindow = Backbone.View.extend({
        el: "#modal-confirm-component",
        parameters: {
            template: null,
            titleConfirm: "",
            onConfirm: null,
            callBack: null,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts != undefined && _.isObject(opts.parameters) && (this.parameters = _.extend({}, this.parameters, opts.parameters));
        },
        render: function() {
            var attributes = {};
            return _.extend(attributes, this.parameters.dataFilter), this.$el.find(".content-modal").html(this.parameters.template(attributes)), 
            this.$el.find(".inner-title-modal").html(this.parameters.titleConfirm), this.$el.modal("show"), 
            $(this.el).off("click", ".confirm-action"), this.undelegateEvents(), this.delegateEvents({
                "click .confirm-action": "onConfirm"
            }), this;
        },
        onConfirm: function(e) {
            e.preventDefault();
            this.$el.modal("hide"), "function" == typeof this.parameters.onConfirm && this.parameters.onConfirm.call(null, this.parameters.dataFilter);
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentConsecutiveView = Backbone.View.extend({
        el: "body",
        events: {
            "change .change-sucursal-consecutive-koi-component": "sucursalChange"
        },
        initialize: function() {},
        sucursalChange: function(e) {
            var _this = this;
            module = $(e.currentTarget).attr("data-module"), sucursal = $(e.currentTarget).val(), 
            this.$consecutive = $("#" + $(e.currentTarget).attr("data-field")), this.$wrapperContent = $("#" + $(e.currentTarget).attr("data-wrapper")), 
            $.ajax({
                url: window.Misc.urlFull(Route.route("sucursales.show", {
                    sucursales: sucursal
                })),
                type: "GET",
                beforeSend: function() {
                    window.Misc.setSpinner(_this.$wrapperContent);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.$wrapperContent);
                var consecutive = 0;
                "traslados" == module && (consecutive = resp.sucursal_traslado), _this.$consecutive.val(consecutive + 1);
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.$wrapperContent), alertify.error(thrownError);
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentCreateResourceView = Backbone.View.extend({
        el: "body",
        events: {
            "click .btn-add-resource-koi-component": "addResource",
            "submit #form-create-resource-component": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$modalComponent = this.$("#modal-add-resource-component"), this.$wraperError = this.$("#error-resource-component"), 
            this.$wraperContent = this.$("#content-create-resource-component").find(".modal-body");
        },
        addResource: function(e) {
            if (this.resource = $(e.currentTarget).attr("data-resource"), this.$resourceField = $("#" + $(e.currentTarget).attr("data-field")), 
            this.parameters = {}, "contacto" == this.resource) {
                var address = null, nomenclatura = null, municipio = null;
                if (this.$inputPhone = this.$("#" + $(e.currentTarget).attr("data-phone")), this.$inputAddress = this.$("#" + $(e.currentTarget).attr("data-address")), 
                this.$inputCity = this.$("#" + $(e.currentTarget).attr("data-city")), this.$inputEmail = this.$("#" + $(e.currentTarget).attr("data-email")), 
                this.parameters.tcontacto_tercero = $(e.currentTarget).attr("data-tercero"), _.isUndefined(this.parameters.tcontacto_tercero) || _.isNull(this.parameters.tcontacto_tercero) || "" == this.parameters.tcontacto_tercero) return void alertify.error("Por favor ingrese cliente antes agregar contacto.");
                address = $(e.currentTarget).attr("data-address-default"), nomenclatura = $(e.currentTarget).attr("data-address-nomenclatura-default"), 
                municipio = $(e.currentTarget).attr("data-municipio-default");
            }
            var _this = this, stuffToDo = {
                centrocosto: function() {
                    _this.$modalComponent.find(".inner-title-modal").html("Centros de costo"), _this.model = new app.CentroCostoModel();
                    var template = _.template($("#add-centrocosto-tpl").html());
                    _this.$modalComponent.find(".content-modal").html(template(_this.model.toJSON()));
                },
                folder: function() {
                    _this.$modalComponent.find(".inner-title-modal").html("Folder"), _this.model = new app.FolderModel();
                    var template = _.template($("#add-folder-tpl").html());
                    _this.$modalComponent.find(".content-modal").html(template(_this.model.toJSON()));
                },
                tercero: function() {
                    _this.$modalComponent.find(".inner-title-modal").html("Tercero"), _this.model = new app.TerceroModel();
                    var template = _.template($("#add-tercero-tpl").html());
                    _this.$modalComponent.find(".content-modal").html(template(_this.model.toJSON())), 
                    _this.$formAccounting = _this.$modalComponent.find("#form-accounting");
                },
                grupo: function() {
                    _this.$modalComponent.find(".inner-title-modal").html("Grupo inventario"), _this.model = new app.GrupoModel();
                    var template = _.template($("#add-grupo-tpl").html());
                    _this.$modalComponent.find(".content-modal").html(template(_this.model.toJSON()));
                },
                subgrupo: function() {
                    _this.$modalComponent.find(".inner-title-modal").html("Subrupo inventario"), _this.model = new app.SubGrupoModel();
                    var template = _.template($("#add-subgrupo-tpl").html());
                    _this.$modalComponent.find(".content-modal").html(template(_this.model.toJSON()));
                },
                unidadmedida: function() {
                    _this.$modalComponent.find(".inner-title-modal").html("Unidad de medida"), _this.model = new app.UnidadModel();
                    var template = _.template($("#add-unidad-tpl").html());
                    _this.$modalComponent.find(".content-modal").html(template(_this.model.toJSON()));
                },
                producto: function() {
                    _this.$modalComponent.find(".inner-title-modal").html("Producto"), _this.model = new app.ProductoModel();
                    var template = _.template($("#add-producto-tpl").html());
                    _this.$modalComponent.find(".content-modal").html(template(_this.model.toJSON()));
                },
                contacto: function() {
                    _this.$resourceName = $("#" + $(e.currentTarget).attr("data-name")), _this.$modalComponent.find(".inner-title-modal").html("Contacto"), 
                    _this.model = new app.ContactoModel({
                        tcontacto_direccion: address,
                        tcontacto_direccion_nomenclatura: nomenclatura,
                        tcontacto_municipio: municipio
                    });
                    var template = _.template($("#add-contacto-tpl").html());
                    _this.$modalComponent.find(".content-modal").html(template(_this.model.toJSON()));
                },
                areap: function() {
                    _this.$modalComponent.find(".inner-title-modal").html("Área de producción"), _this.model = new app.AreapModel();
                    var template = _.template($("#add-areap-tpl").html());
                    _this.$modalComponent.find(".content-modal").html(template(_this.model.toJSON()));
                },
                maquinap: function() {
                    _this.$modalComponent.find(".inner-title-modal").html("Máquina de producción"), 
                    _this.model = new app.MaquinapModel();
                    var template = _.template($("#add-maquinap-tpl").html());
                    _this.$modalComponent.find(".content-modal").html(template(_this.model.toJSON()));
                },
                materialp: function() {
                    _this.$modalComponent.find(".inner-title-modal").html("Material de producción"), 
                    _this.model = new app.MaterialpModel();
                    var template = _.template($("#add-materialp-tpl").html());
                    _this.$modalComponent.find(".content-modal").html(template(_this.model.toJSON()));
                },
                acabadop: function() {
                    _this.$modalComponent.find(".inner-title-modal").html("Acabado de producción"), 
                    _this.model = new app.AcabadopModel();
                    var template = _.template($("#add-acabadop-tpl").html());
                    _this.$modalComponent.find(".content-modal").html(template(_this.model.toJSON()));
                }
            };
            stuffToDo[this.resource] && (stuffToDo[this.resource](), this.$wraperError.hide().empty(), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner), 
            this.ready(), this.$modalComponent.modal("show"));
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initInputMask && window.initComponent.initInputMask(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck();
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                this.$wraperError.hide().empty(), e.preventDefault();
                var data = $.extend({}, this.parameters, window.Misc.formToJson(e.target));
                "tercero" == this.resource && (data = $.extend({}, data, window.Misc.formToJson(this.$formAccounting))), 
                this.model.save(data, {
                    patch: !0
                });
            }
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.$wraperContent);
        },
        responseServer: function(model, resp, opts) {
            window.Misc.removeSpinner(this.$wraperContent);
            var text = resp.success ? "" : resp.errors;
            if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return this.$wraperError.empty().append(text), 
            void this.$wraperError.show();
            var _this = this, stuffToDo = {
                centrocosto: function() {
                    _this.$resourceField.select2({
                        data: [ {
                            id: _this.model.get("id"),
                            text: _this.model.get("centrocosto_nombre")
                        } ]
                    }).trigger("change"), _this.$resourceField.val(_this.model.get("id")).trigger("change");
                },
                folder: function() {
                    _this.$resourceField.select2({
                        data: [ {
                            id: _this.model.get("id"),
                            text: _this.model.get("folder_nombre")
                        } ]
                    }).trigger("change"), _this.$resourceField.val(_this.model.get("id")).trigger("change");
                },
                tercero: function() {
                    _this.$resourceField.val(_this.model.get("tercero_nit")).trigger("change");
                },
                grupo: function() {
                    _this.$resourceField.select2({
                        data: [ {
                            id: _this.model.get("id"),
                            text: _this.model.get("grupo_nombre")
                        } ]
                    }).trigger("change"), _this.$resourceField.val(_this.model.get("id")).trigger("change");
                },
                subgrupo: function() {
                    _this.$resourceField.select2({
                        data: [ {
                            id: _this.model.get("id"),
                            text: _this.model.get("subgrupo_nombre")
                        } ]
                    }).trigger("change"), _this.$resourceField.val(_this.model.get("id")).trigger("change");
                },
                unidadmedida: function() {
                    _this.$resourceField.select2({
                        data: [ {
                            id: _this.model.get("id"),
                            text: _this.model.get("unidadmedida_nombre")
                        } ]
                    }).trigger("change"), _this.$resourceField.val(_this.model.get("id")).trigger("change");
                },
                producto: function() {
                    _this.$resourceField.val(_this.model.get("producto_codigo")).trigger("change");
                },
                contacto: function() {
                    _this.$resourceField.val(_this.model.get("id")), _this.$resourceName.val(_this.model.get("tcontacto_nombre")), 
                    _this.$inputPhone.length && _this.$inputPhone.val(_this.model.get("tcontacto_telefono")), 
                    _this.$inputAddress.length && _this.$inputAddress.val(_this.model.get("tcontacto_direccion")), 
                    _this.$inputEmail.length && _this.$inputEmail.val(_this.model.get("tcontacto_email")), 
                    _this.$inputCity.length && _this.$inputCity.val(_this.model.get("tcontacto_municipio")).trigger("change");
                },
                areap: function() {
                    _this.$resourceField.select2({
                        data: [ {
                            id: _this.model.get("id"),
                            text: _this.model.get("areap_nombre")
                        } ]
                    }).trigger("change"), _this.$resourceField.val(_this.model.get("id")).trigger("change");
                },
                maquinap: function() {
                    _this.$resourceField.select2({
                        data: [ {
                            id: _this.model.get("id"),
                            text: _this.model.get("maquinap_nombre")
                        } ]
                    }).trigger("change"), _this.$resourceField.val(_this.model.get("id")).trigger("change");
                },
                materialp: function() {
                    _this.$resourceField.select2({
                        data: [ {
                            id: _this.model.get("id"),
                            text: _this.model.get("materialp_nombre")
                        } ]
                    }).trigger("change"), _this.$resourceField.val(_this.model.get("id")).trigger("change");
                },
                acabadop: function() {
                    _this.$resourceField.select2({
                        data: [ {
                            id: _this.model.get("id"),
                            text: _this.model.get("acabadop_nombre")
                        } ]
                    }).trigger("change"), _this.$resourceField.val(_this.model.get("id")).trigger("change");
                }
            };
            stuffToDo[this.resource] && (stuffToDo[this.resource](), "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            this.$modalComponent.modal("hide"));
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentDocumentView = Backbone.View.extend({
        el: "body",
        events: {
            "change .select-filter-document-koi-component": "folderChanged"
        },
        initialize: function() {},
        folderChanged: function(e) {
            var _this = this;
            this.$inputContent = $(e.currentTarget), this.$wraperConten = this.$("#" + $(e.currentTarget).attr("data-wrapper")), 
            this.$inputDocument = this.$("#" + $(e.currentTarget).attr("data-documents"));
            var folder = this.$inputContent.val();
            this.$inputDocument.find("option:gt(0)").remove(), _.isUndefined(folder) || _.isNull(folder) || "" == folder || $.ajax({
                url: window.Misc.urlFull(Route.route("documentos.filter")),
                type: "GET",
                data: {
                    folder: folder
                },
                beforeSend: function() {
                    window.Misc.setSpinner(_this.$wraperConten);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.$wraperConten), resp.success && _.isObject(resp.documents) && ($.each(resp.documents, function(index, doc) {
                    _this.$inputDocument.append($("<option></option>").attr("value", doc.id).text(doc.documento_nombre));
                }), _this.$inputDocument.change());
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.$wraperConten), alertify.error(thrownError);
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentGlobalView = Backbone.View.extend({
        el: "body",
        events: {
            "click .sidebar-toggle": "clickSidebar",
            "click .history-back": "clickHistoryBack",
            "hidden.bs.modal": "multiModal"
        },
        initialize: function() {},
        clickSidebar: function(e) {
            e.preventDefault();
            var expiration = new Date();
            expiration.setFullYear(expiration.getFullYear() + 1), document.cookie = "sidebar_toggle=" + (this.$el.hasClass("sidebar-collapse") ? "" : "sidebar-collapse") + "; path=/; expires=" + expiration.toUTCString();
        },
        clickHistoryBack: function(e) {
            e.preventDefault(), window.history.back();
        },
        multiModal: function() {
            $(".modal.in").length > 0 && $("body").addClass("modal-open");
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentReportView = Backbone.View.extend({
        el: "body",
        events: {
            "click .btn-export-pdf-koi-component": "onPdf",
            "click .btn-export-xls-koi-component": "onXls"
        },
        initialize: function() {},
        onPdf: function(e) {
            this.$("#type-report-koi-component").val("pdf");
        },
        onXls: function(e) {
            this.$("#type-report-koi-component").val("xls");
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentSearchContactoView = Backbone.View.extend({
        el: "body",
        template: _.template($("#koi-search-contacto-component-tpl").html() || ""),
        events: {
            "click .btn-koi-search-contacto-component-table": "searchOrden",
            "click .btn-search-koi-search-contacto-component": "search",
            "click .btn-clear-koi-search-contacto-component": "clear",
            "click .a-koi-search-contacto-component-table": "setContacto"
        },
        initialize: function() {
            this.$modalComponent = this.$("#modal-search-contacto-component");
        },
        searchOrden: function(e) {
            e.preventDefault();
            var _this = this;
            this.$modalComponent.find(".content-modal").html(this.template({})), this.$searchContactoNombres = this.$("#koi_search_contacto_nombres"), 
            this.$searchContactoApellidos = this.$("#koi_search_contacto_apellidos"), this.$resourceTercero = this.$("#" + $(e.currentTarget).attr("data-tercero"));
            var tercero = this.$resourceTercero.attr("data-tercero");
            if (_.isUndefined(tercero) || _.isNull(tercero) || "" == tercero) return void alertify.error("Por favor ingrese cliente antes agregar contacto.");
            this.$contactoSearchTable = this.$modalComponent.find("#koi-search-contacto-component-table"), 
            this.$inputContent = this.$("#" + $(e.currentTarget).attr("data-field")), this.$inputName = this.$("#" + $(e.currentTarget).attr("data-name")), 
            this.$inputPhone = this.$("#" + $(e.currentTarget).attr("data-phone")), this.$inputAddress = this.$("#" + $(e.currentTarget).attr("data-address")), 
            this.$inputNomenclatura = this.$("#" + $(e.currentTarget).attr("data-nomenclatura")), 
            this.$labelNomenclatura = this.$("#" + $(e.currentTarget).attr("data-name-nomenclatura")), 
            this.$inputCity = this.$("#" + $(e.currentTarget).attr("data-city")), this.$inputEmail = this.$("#" + $(e.currentTarget).attr("data-email")), 
            this.contactoSearchTable = this.$contactoSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull(Route.route("terceros.contactos.index")),
                    data: function(data) {
                        data.tcontacto_nombres = _this.$searchContactoNombres.val(), data.tcontacto_apellidos = _this.$searchContactoApellidos.val(), 
                        data.tcontacto_tercero = tercero;
                    }
                },
                columns: [ {
                    data: "id",
                    name: "id"
                }, {
                    data: "tcontacto_nombres",
                    name: "tcontacto_nombres"
                }, {
                    data: "tcontacto_apellidos",
                    name: "tcontacto_apellidos"
                }, {
                    data: "tcontacto_nombre",
                    name: "tcontacto_nombre"
                }, {
                    data: "tcontacto_telefono",
                    name: "tcontacto_telefono"
                }, {
                    data: "municipio_nombre",
                    name: "municipio_nombre"
                }, {
                    data: "tcontacto_direccion",
                    name: "tcontacto_direccion"
                }, {
                    data: "tcontacto_municipio",
                    name: "tcontacto_municipio"
                }, {
                    data: "tcontacto_email",
                    name: "tcontacto_email"
                } ],
                columnDefs: [ {
                    targets: 3,
                    width: "40%",
                    searchable: !1,
                    render: function(data, type, full, row) {
                        return '<a href="#" class="a-koi-search-contacto-component-table">' + data + "</a>";
                    }
                }, {
                    targets: [ 0, 1, 2, 7, 8 ],
                    visible: !1
                } ]
            }), this.ready(), this.$modalComponent.modal("show");
        },
        setContacto: function(e) {
            e.preventDefault();
            var data = this.contactoSearchTable.row($(e.currentTarget).parents("tr")).data();
            this.$inputContent.val(data.id), this.$inputName.val(data.tcontacto_nombre), this.$inputPhone.length && this.$inputPhone.val(data.tcontacto_telefono), 
            this.$inputAddress.length && this.$inputAddress.val(data.tcontacto_direccion), this.$inputNomenclatura.length && this.$inputNomenclatura.val(data.tcontacto_direccion_nomenclatura), 
            this.$labelNomenclatura.length && this.$labelNomenclatura.text(data.tcontacto_direccion_nomenclatura), 
            this.$inputCity.length && this.$inputCity.val(data.tcontacto_municipio).trigger("change"), 
            this.$inputEmail.length && this.$inputEmail.val(data.tcontacto_email), this.$modalComponent.modal("hide");
        },
        search: function(e) {
            e.preventDefault(), this.contactoSearchTable.ajax.reload();
        },
        clear: function(e) {
            e.preventDefault(), this.$searchContactoNombres.val(""), this.$searchContactoApellidos.val(""), 
            this.contactoSearchTable.ajax.reload();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentSearchCuentaView = Backbone.View.extend({
        el: "body",
        template: _.template($("#koi-search-plancuenta-component-tpl").html() || ""),
        events: {
            "change input.plancuenta-koi-component": "cuentaChanged",
            "click .btn-koi-search-plancuenta-component": "searchCuenta",
            "click .btn-search-koi-search-plancuenta-component": "search",
            "click .btn-clear-koi-search-plancuenta-component": "clear",
            "click .a-koi-search-plancuenta-component-table": "setCuenta"
        },
        initialize: function() {
            this.$modalComponent = this.$("#modal-search-component");
        },
        searchCuenta: function(e) {
            e.preventDefault();
            var _this = this;
            this.$modalComponent.find(".content-modal").html(this.template({})), this.$searchCuenta = this.$("#koi_search_plancuentas_cuenta"), 
            this.$searchName = this.$("#koi_search_plancuentas_nombre"), this.$plancuentasSearchTable = this.$modalComponent.find("#koi-search-plancuenta-component-table"), 
            this.$inputContent = this.$("#" + $(e.currentTarget).attr("data-field")), this.$inputName = this.$("#" + this.$inputContent.attr("data-name")), 
            this.$inputCentro = this.$("#" + this.$inputContent.attr("data-centro")), this.$inputBase = this.$("#" + this.$inputContent.attr("data-base")), 
            this.$inputValor = this.$("#" + this.$inputContent.attr("data-valor")), this.$inputTasa = this.$("#" + this.$inputContent.attr("data-tasa")), 
            this.plancuentasSearchTable = this.$plancuentasSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull(Route.route("plancuentas.index")),
                    data: function(data) {
                        data.plancuentas_cuenta = _this.$searchCuenta.val(), data.plancuentas_nombre = _this.$searchName.val();
                    }
                },
                columns: [ {
                    data: "plancuentas_cuenta",
                    name: "plancuentas_cuenta"
                }, {
                    data: "plancuentas_nivel",
                    name: "plancuentas_nivel"
                }, {
                    data: "plancuentas_nombre",
                    name: "plancuentas_nombre"
                }, {
                    data: "plancuentas_naturaleza",
                    name: "plancuentas_naturaleza"
                }, {
                    data: "plancuentas_tercero",
                    name: "plancuentas_tercero"
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "15%",
                    searchable: !1,
                    render: function(data, type, full, row) {
                        return '<a href="#" class="a-koi-search-plancuenta-component-table">' + data + "</a>";
                    }
                }, {
                    targets: 1,
                    width: "10%",
                    searchable: !1
                }, {
                    targets: 3,
                    width: "10%",
                    searchable: !1,
                    render: function(data, type, full, row) {
                        return "D" == data ? "Débito" : "Crédito";
                    }
                }, {
                    targets: 4,
                    width: "10%",
                    searchable: !1,
                    render: function(data, type, full, row) {
                        return data ? "Si" : "No";
                    }
                } ]
            }), this.ready(), this.$modalComponent.modal("show");
        },
        setCuenta: function(e) {
            e.preventDefault();
            var data = this.plancuentasSearchTable.row($(e.currentTarget).parents("tr")).data();
            this.$inputContent.val(data.plancuentas_cuenta), this.$inputName.val(data.plancuentas_nombre), 
            this.$inputName.val(data.plancuentas_nombre), this.$inputCentro.length && this.$inputCentro.val("").trigger("change"), 
            this.$inputBase.length && this.$inputBase.prop("readonly", !0), this.$modalComponent.modal("hide"), 
            this.actions(data);
        },
        search: function(e) {
            e.preventDefault(), this.plancuentasSearchTable.ajax.reload();
        },
        clear: function(e) {
            e.preventDefault(), this.$searchCuenta.val(""), this.$searchName.val(""), this.plancuentasSearchTable.ajax.reload();
        },
        cuentaChanged: function(e) {
            var _this = this;
            this.$inputContent = $(e.currentTarget), this.$inputName = this.$("#" + $(e.currentTarget).attr("data-name")), 
            this.$inputBase = this.$("#" + $(e.currentTarget).attr("data-base")), this.$inputTasa = this.$("#" + $(e.currentTarget).attr("data-tasa")), 
            this.$inputValor = this.$("#" + $(e.currentTarget).attr("data-valor")), this.$inputCentro = this.$("#" + $(e.currentTarget).attr("data-centro")), 
            this.$wraperConten = this.$("#" + $(e.currentTarget).attr("data-wrapper"));
            var cuenta = this.$inputContent.val();
            this.$inputName.val(""), this.$inputCentro.length && this.$inputCentro.val("").trigger("change"), 
            this.$inputBase.length && this.$inputBase.prop("readonly", !0), this.$inputTasa.length && this.$inputTasa.val(""), 
            _.isUndefined(cuenta) || _.isNull(cuenta) || "" == cuenta || $.ajax({
                url: window.Misc.urlFull(Route.route("plancuentas.search")),
                type: "GET",
                data: {
                    plancuentas_cuenta: cuenta
                },
                beforeSend: function() {
                    window.Misc.setSpinner(_this.$wraperConten);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.$wraperConten), resp.success && (_.isUndefined(resp.plancuentas_nombre) || _.isNull(resp.plancuentas_nombre) || _this.$inputName.val(resp.plancuentas_nombre), 
                _this.actions(resp));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.$wraperConten), alertify.error(thrownError);
            });
        },
        actions: function(data) {
            if (this.$inputBase.length) if (!_.isUndefined(data.plancuentas_tasa) && !_.isNull(data.plancuentas_tasa) && data.plancuentas_tasa > 0) {
                this.$inputBase.prop("readonly", !1);
                var base = this.$inputBase.inputmask("unmaskedvalue");
                this.$inputValor.val(data.plancuentas_tasa * base / 100);
            } else this.$inputBase.val("");
            this.$inputCentro.length && !_.isUndefined(data.plancuentas_centro) && !_.isNull(data.plancuentas_centro) && data.plancuentas_centro > 0 && this.$inputCentro.val(data.plancuentas_centro).trigger("change"), 
            this.$inputTasa.length && (!_.isUndefined(data.plancuentas_tasa) && !_.isNull(data.plancuentas_tasa) && data.plancuentas_tasa > 0 ? this.$inputTasa.val(data.plancuentas_tasa) : this.$inputTasa.val(""));
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentSearchFacturaView = Backbone.View.extend({
        el: "body",
        template: _.template($("#koi-search-factura-component-tpl").html() || ""),
        events: {
            "change input.factura-koi-component": "facturaChanged",
            "click .btn-koi-search-factura-component-table": "searchFactura",
            "click .btn-search-koi-search-factura-component": "search",
            "click .btn-clear-koi-search-factura-component": "clear",
            "click .a-koi-search-factura-component-table": "setFactura"
        },
        initialize: function() {
            this.$modalComponent = this.$("#modal-search-factura-component");
        },
        searchFactura: function(e) {
            e.preventDefault();
            var _this = this;
            this.$modalComponent.find(".content-modal").html(this.template({})), this.$searchfacturaNumero = this.$("#searchfactura_numero"), 
            this.$searchfacturaOrdenp = this.$("#searchfactura_ordenp"), this.$searchfacturaOrdenpBeneficiario = this.$("#searchfactura_ordenp_beneficiario"), 
            this.$searchfacturaTercero = this.$("#searchfactura_tercero"), this.$searchfacturaTerceroNombre = this.$("#searchfactura_tercero_nombre"), 
            this.$facturaSearchTable = this.$modalComponent.find("#koi-search-factura-component-table"), 
            this.$inputContent = this.$("#" + $(e.currentTarget).attr("data-field")), this.$inputName = this.$("#" + this.$inputContent.attr("data-name")), 
            this.$factura = this.$inputContent.attr("data-factura"), this.facturaSearchTable = this.$facturaSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull(Route.route("asientos.facturas.index")),
                    data: function(data) {
                        data.id = _this.$searchfacturaNumero.val(), data.factura_orden = _this.$searchfacturaOrdenp.val(), 
                        data.factura_tercero_nit = _this.$searchfacturaTercero.val();
                    }
                },
                columns: [ {
                    data: "id",
                    name: "id"
                }, {
                    data: "factura_ordenp",
                    name: "factura_ordenp"
                }, {
                    data: "tercero_nombre",
                    name: "tercero_nombre"
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    searchable: !1,
                    render: function(data, type, full, row) {
                        return '<a href="#" class="a-koi-search-factura-component-table">' + data + "</a>";
                    }
                } ]
            }), this.ready(), this.$modalComponent.modal("show");
        },
        setFactura: function(e) {
            e.preventDefault();
            var data = this.facturaSearchTable.row($(e.currentTarget).parents("tr")).data();
            this.$inputContent.val(data.id), this.$inputName.val(data.tercero_nombre), "true" == this.$factura && this.$inputContent.trigger("change"), 
            this.$modalComponent.modal("hide");
        },
        search: function(e) {
            e.preventDefault(), this.facturaSearchTable.ajax.reload();
        },
        clear: function(e) {
            e.preventDefault(), this.$searchfacturaNumero.val(""), this.$searchfacturaOrdenp.val(""), 
            this.$searchfacturaOrdenpBeneficiario.val(""), this.$searchfacturaTercero.val(""), 
            this.$searchfacturaTerceroNombre.val(""), this.facturaSearchTable.ajax.reload();
        },
        facturaChanged: function(e) {
            var _this = this;
            this.$inputContent = $(e.currentTarget), this.$inputName = this.$("#" + $(e.currentTarget).attr("data-name")), 
            this.$wraperConten = this.$("#" + $(e.currentTarget).attr("data-wrapper"));
            var factura = this.$inputContent.val();
            this.$inputName.val(""), _.isUndefined(factura) || _.isNull(factura) || "" == factura || $.ajax({
                url: window.Misc.urlFull(Route.route("asientos.facturas.search")),
                type: "GET",
                data: {
                    factura_numero: factura
                },
                beforeSend: function() {
                    _this.$inputName.val(""), window.Misc.setSpinner(_this.$wraperConten);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.$wraperConten), resp.success && (_.isUndefined(resp.tercero_nombre) || _.isNull(resp.tercero_nombre) || _this.$inputName.val(resp.tercero_nombre));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.$wraperConten), alertify.error(thrownError);
            });
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentSearchOrdenPView = Backbone.View.extend({
        el: "body",
        template: _.template($("#koi-search-ordenp-component-tpl").html() || ""),
        events: {
            "change input.ordenp-koi-component": "ordenpChanged",
            "click .btn-koi-search-orden-component-table": "searchOrden",
            "click .btn-search-koi-search-ordenp-component": "search",
            "click .btn-clear-koi-search-ordenp-component": "clear",
            "click .a-koi-search-ordenp-component-table": "setOrden"
        },
        initialize: function() {
            this.$modalComponent = this.$("#modal-search-ordenp-component");
        },
        searchOrden: function(e) {
            e.preventDefault();
            var _this = this;
            this.$modalComponent.find(".content-modal").html(this.template({})), this.$searchordenpOrden = this.$("#searchordenp_ordenp_numero"), 
            this.$searchordenpTercero = this.$("#searchordenp_tercero"), this.$searchordenpTerceroNombre = this.$("#searchordenp_tercero_nombre"), 
            this.$ordersSearchTable = this.$modalComponent.find("#koi-search-ordenp-component-table"), 
            this.$inputContent = this.$("#" + $(e.currentTarget).attr("data-field")), this.$inputName = this.$("#" + this.$inputContent.attr("data-name")), 
            this.$factura = this.$inputContent.attr("data-factura"), this.ordersSearchTable = this.$ordersSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull(Route.route("ordenes.index")),
                    data: function(data) {
                        data.orden_numero = _this.$searchordenpOrden.val(), data.orden_tercero_nit = _this.$searchordenpTercero.val();
                    }
                },
                columns: [ {
                    data: "orden_codigo",
                    name: "orden_codigo"
                }, {
                    data: "orden_ano",
                    name: "orden_ano"
                }, {
                    data: "orden_numero",
                    name: "orden_numero"
                }, {
                    data: "tercero_nombre",
                    name: "tercero_nombre"
                }, {
                    data: "orden_fecha",
                    name: "orden_fecha"
                } ],
                order: [ [ 1, "desc" ], [ 2, "desc" ] ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    searchable: !1,
                    render: function(data, type, full, row) {
                        return '<a href="#" class="a-koi-search-ordenp-component-table">' + data + "</a>";
                    }
                }, {
                    targets: [ 1, 2 ],
                    visible: !1
                }, {
                    targets: 4,
                    render: function(data, type, full, row) {
                        return window.moment(data).format("YYYY-MM-DD");
                    }
                } ]
            }), this.ready(), this.$modalComponent.modal("show");
        },
        setOrden: function(e) {
            e.preventDefault();
            var data = this.ordersSearchTable.row($(e.currentTarget).parents("tr")).data();
            this.$inputContent.val(data.orden_codigo), this.$inputName.val(data.tercero_nombre), 
            "true" == this.$factura && this.$inputContent.trigger("change"), this.$modalComponent.modal("hide");
        },
        search: function(e) {
            e.preventDefault(), this.ordersSearchTable.ajax.reload();
        },
        clear: function(e) {
            e.preventDefault(), this.$searchordenpOrden.val(""), this.$searchordenpTercero.val(""), 
            this.$searchordenpTerceroNombre.val(""), this.ordersSearchTable.ajax.reload();
        },
        ordenpChanged: function(e) {
            var _this = this;
            this.$inputContent = $(e.currentTarget), this.$inputName = this.$("#" + $(e.currentTarget).attr("data-name")), 
            this.$wraperConten = this.$("#" + $(e.currentTarget).attr("data-wrapper"));
            var orden = this.$inputContent.val();
            this.$inputName.val(""), _.isUndefined(orden) || _.isNull(orden) || "" == orden || $.ajax({
                url: window.Misc.urlFull(Route.route("ordenes.search")),
                type: "GET",
                data: {
                    orden_codigo: orden
                },
                beforeSend: function() {
                    _this.$inputName.val(""), window.Misc.setSpinner(_this.$wraperConten);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.$wraperConten), resp.success && (_.isUndefined(resp.tercero_nombre) || _.isNull(resp.tercero_nombre) || _this.$inputName.val(resp.tercero_nombre));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.$wraperConten), alertify.error(thrownError);
            });
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentSearchProductoView = Backbone.View.extend({
        el: "body",
        template: _.template($("#koi-search-producto-component-tpl").html() || ""),
        events: {
            "change input.producto-koi-component": "productoChanged",
            "click .btn-koi-search-producto-component": "searchProducto",
            "click .btn-search-koi-search-producto-component": "search",
            "click .btn-clear-koi-search-producto-component": "clear",
            "click .a-koi-search-producto-component-table": "setProducto"
        },
        initialize: function() {
            this.$modalComponent = this.$("#modal-search-producto-component");
        },
        searchProducto: function(e) {
            e.preventDefault();
            var _this = this;
            this.$modalComponent.find(".content-modal").html(this.template({})), this.$searchCodigo = this.$("#koi_search_producto_codigo"), 
            this.$searchNombre = this.$("#koi_search_producto_nombre"), this.$productosSearchTable = this.$modalComponent.find("#koi-search-producto-component-table"), 
            this.$inputContent = this.$("#" + $(e.currentTarget).attr("data-field")), this.$inputName = this.$("#" + this.$inputContent.attr("data-name")), 
            this.productosSearchTable = this.$productosSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull(Route.route("productos.index")),
                    data: function(data) {
                        data.producto_codigo = _this.$searchCodigo.val(), data.producto_nombre = _this.$searchNombre.val();
                    }
                },
                columns: [ {
                    data: "producto_codigo",
                    name: "producto_codigo"
                }, {
                    data: "producto_nombre",
                    name: "producto_nombre"
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    searchable: !1,
                    render: function(data, type, full, row) {
                        return '<a href="#" class="a-koi-search-producto-component-table">' + data + "</a>";
                    }
                } ]
            }), this.ready(), this.$modalComponent.modal("show");
        },
        setProducto: function(e) {
            e.preventDefault();
            var data = this.productosSearchTable.row($(e.currentTarget).parents("tr")).data();
            this.$inputContent.val(data.producto_codigo), this.$inputName.val(data.producto_nombre), 
            this.$modalComponent.modal("hide");
        },
        search: function(e) {
            e.preventDefault(), this.productosSearchTable.ajax.reload();
        },
        clear: function(e) {
            e.preventDefault(), this.$searchCodigo.val(""), this.$searchNombre.val(""), this.productosSearchTable.ajax.reload();
        },
        productoChanged: function(e) {
            var _this = this;
            this.$inputContent = $(e.currentTarget), this.$inputName = this.$("#" + $(e.currentTarget).attr("data-name")), 
            this.$wraperConten = this.$("#" + $(e.currentTarget).attr("data-wrapper"));
            var producto = this.$inputContent.val();
            this.$inputName.val(""), _.isUndefined(producto) || _.isNull(producto) || "" == producto || $.ajax({
                url: window.Misc.urlFull(Route.route("productos.search")),
                type: "GET",
                data: {
                    producto_codigo: producto
                },
                beforeSend: function() {
                    _this.$inputName.val(""), window.Misc.setSpinner(_this.$wraperConten);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.$wraperConten), resp.success && (_.isUndefined(resp.producto_nombre) || _.isNull(resp.producto_nombre) || _this.$inputName.val(resp.producto_nombre));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.$wraperConten), alertify.error(thrownError);
            });
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentSearchTerceroView = Backbone.View.extend({
        el: "body",
        template: _.template($("#koi-search-tercero-component-tpl").html() || ""),
        events: {
            "change input.tercero-koi-component": "terceroChanged",
            "click .btn-koi-search-tercero-component-table": "searchTercero",
            "click .btn-search-koi-search-tercero-component": "search",
            "click .btn-clear-koi-search-tercero-component": "clear",
            "click .a-koi-search-tercero-component-table": "setTercero"
        },
        initialize: function() {
            this.$modalComponent = this.$("#modal-search-component");
        },
        searchTercero: function(e) {
            e.preventDefault();
            var _this = this;
            this.$modalComponent.find(".content-modal").html(this.template({})), this.$searchNit = this.$("#koi_search_tercero_nit"), 
            this.$searchName = this.$("#koi_search_tercero_nombre"), this.$tercerosSearchTable = this.$modalComponent.find("#koi-search-tercero-component-table"), 
            this.$inputContent = this.$("#" + $(e.currentTarget).attr("data-field")), this.$inputName = this.$("#" + this.$inputContent.attr("data-name")), 
            this.$btnContact = this.$("#" + this.$inputContent.attr("data-contacto")), this.tercerosSearchTable = this.$tercerosSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull(Route.route("terceros.index")),
                    data: function(data) {
                        data.tercero_nit = _this.$searchNit.val(), data.tercero_nombre = _this.$searchName.val();
                    }
                },
                columns: [ {
                    data: "tercero_nit",
                    name: "tercero_nit"
                }, {
                    data: "tercero_nombre",
                    name: "tercero_nombre"
                }, {
                    data: "tercero_razonsocial",
                    name: "tercero_razonsocial"
                }, {
                    data: "tercero_nombre1",
                    name: "tercero_nombre1"
                }, {
                    data: "tercero_nombre2",
                    name: "tercero_nombre2"
                }, {
                    data: "tercero_apellido1",
                    name: "tercero_apellido1"
                }, {
                    data: "tercero_apellido2",
                    name: "tercero_apellido2"
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "15%",
                    searchable: !1,
                    render: function(data, type, full, row) {
                        return '<a href="#" class="a-koi-search-tercero-component-table">' + data + "</a>";
                    }
                }, {
                    targets: 1,
                    width: "85%",
                    searchable: !1
                }, {
                    targets: [ 2, 3, 4, 5, 6 ],
                    visible: !1,
                    searchable: !1
                } ]
            }), this.ready(), this.$modalComponent.modal("show");
        },
        setTercero: function(e) {
            e.preventDefault();
            var data = this.tercerosSearchTable.row($(e.currentTarget).parents("tr")).data();
            this.$inputContent.val(data.tercero_nit), this.$inputName.val(data.tercero_nombre), 
            this.$btnContact.length > 0 && (this.$btnContact.attr("data-tercero", data.id), 
            this.$btnContact.attr("data-address-default", data.tercero_direccion), this.$btnContact.attr("data-address-nomenclatura-default", data.tercero_dir_nomenclatura), 
            this.$btnContact.attr("data-municipio-default", data.tercero_municipio)), this.$modalComponent.modal("hide");
        },
        search: function(e) {
            e.preventDefault(), this.tercerosSearchTable.ajax.reload();
        },
        clear: function(e) {
            e.preventDefault(), this.$searchNit.val(""), this.$searchName.val(""), this.tercerosSearchTable.ajax.reload();
        },
        terceroChanged: function(e) {
            var _this = this;
            this.$inputContent = $(e.currentTarget), this.$inputName = this.$("#" + $(e.currentTarget).attr("data-name")), 
            this.$wraperConten = this.$("#" + $(e.currentTarget).attr("data-wrapper")), this.$btnContact = this.$("#" + this.$inputContent.attr("data-contacto")), 
            this.$btnContact.length > 0 && (this.$btnContact.attr("data-tercero", ""), this.$btnContact.attr("data-address-default", ""), 
            this.$btnContact.attr("ata-address-nomenclatura-default", ""), this.$btnContact.attr("data-municipio-default", ""));
            var tercero = this.$inputContent.val();
            this.$inputName.val(""), _.isUndefined(tercero) || _.isNull(tercero) || "" == tercero || $.ajax({
                url: window.Misc.urlFull(Route.route("terceros.search")),
                type: "GET",
                data: {
                    tercero_nit: tercero
                },
                beforeSend: function() {
                    _this.$inputName.val(""), window.Misc.setSpinner(_this.$wraperConten);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.$wraperConten), resp.success && (_.isUndefined(resp.tercero_nombre) || _.isNull(resp.tercero_nombre) || _this.$inputName.val(resp.tercero_nombre), 
                _this.$btnContact.length > 0 && (_this.$btnContact.attr("data-tercero", resp.id), 
                _this.$btnContact.attr("data-address-default", resp.tercero_direccion), _this.$btnContact.attr("data-address-nomenclatura-default", resp.tercero_dir_nomenclatura), 
                _this.$btnContact.attr("data-municipio-default", resp.tercero_municipio)));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.$wraperConten), alertify.error(thrownError);
            });
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ComponentTerceroView = Backbone.View.extend({
        el: "body",
        templateName: _.template($("#tercero-name-tpl").html() || ""),
        events: {
            "change .change-nit-koi-component": "nitChanged",
            "change .change-actividad-koi-component": "actividadChanged"
        },
        initialize: function() {},
        nitChanged: function(e) {
            var _this = this;
            this.$dv = $("#" + $(e.currentTarget).attr("data-field")), this.$wraperContent = this.$("#tercero-create"), 
            this.$wraperContent.length || (this.$modalComponent = this.$("#modal-add-resource-component"), 
            this.$wraperContent = this.$modalComponent.find(".modal-body")), $.ajax({
                url: window.Misc.urlFull(Route.route("terceros.dv")),
                type: "GET",
                data: {
                    tercero_nit: $(e.currentTarget).val()
                },
                beforeSend: function() {
                    window.Misc.setSpinner(_this.$wraperContent);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.$wraperContent), resp.success && _this.$dv.val(resp.dv);
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.$wraperContent), alertify.error(thrownError);
            });
        },
        actividadChanged: function(e) {
            var _this = this;
            this.$retecree = $("#" + $(e.currentTarget).attr("data-field")), this.$wraperContent = this.$("#tercero-create"), 
            this.$wraperContent.length || (this.$modalComponent = this.$("#modal-add-resource-component"), 
            this.$wraperContent = this.$modalComponent.find(".modal-body")), $.ajax({
                url: window.Misc.urlFull(Route.route("terceros.rcree")),
                type: "GET",
                data: {
                    tercero_actividad: $(e.currentTarget).val()
                },
                beforeSend: function() {
                    window.Misc.setSpinner(_this.$wraperContent);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.$wraperContent), resp.success && (_.isUndefined(resp.rcree) || _.isNull(resp.rcree) || _this.$retecree.html(resp.rcree));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.$wraperContent), alertify.error(thrownError);
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainDepartamentoView = Backbone.View.extend({
        el: "#departamentos-main",
        initialize: function() {
            this.$departamentosSearchTable = this.$("#departamentos-search-table"), this.$departamentosSearchTable.DataTable({
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("departamentos.index")),
                columns: [ {
                    data: "departamento_codigo",
                    name: "departamento_codigo"
                }, {
                    data: "departamento_nombre",
                    name: "departamento_nombre"
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateDocumentoView = Backbone.View.extend({
        el: "#documento-create",
        template: _.template($("#add-documento-tpl").html() || ""),
        events: {
            "submit #form-documento": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-documento"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("documentos.show", {
                    documentos: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainDocumentosView = Backbone.View.extend({
        el: "#documentos-main",
        initialize: function() {
            this.$documentosSearchTable = this.$("#documentos-search-table"), this.$documentosSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("documentos.index")),
                columns: [ {
                    data: "documento_codigo",
                    name: "documento_codigo"
                }, {
                    data: "documento_nombre",
                    name: "documento_nombre"
                }, {
                    data: "folder_codigo",
                    name: "folder_codigo"
                }, {
                    data: "folder_id",
                    name: "folder_id"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nuevo documento',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("documentos.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "15%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("documentos.show", {
                            documentos: full.id
                        })) + '">' + data + "</a>";
                    }
                }, {
                    targets: 1,
                    width: "70%"
                }, {
                    targets: 2,
                    width: "15%",
                    render: function(data, type, full, row) {
                        return _.isNull(full.folder_codigo) || _.isUndefined(full.folder_codigo) ? "" : '<a href="' + window.Misc.urlFull(Route.route("folders.show", {
                            folders: full.folder_id
                        })) + '">' + data + "</a>";
                    }
                }, {
                    targets: 3,
                    visible: !1,
                    searchable: !1
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateEmpresaView = Backbone.View.extend({
        el: "#empresa-create",
        template: _.template($("#add-company-tpl").html() || ""),
        templateName: _.template($("#tercero-name-tpl").html() || ""),
        events: {
            "change input#tercero_nit": "nitChanged",
            "change select#tercero_persona": "personaChanged",
            "change select#tercero_actividad": "actividadChanged",
            "submit #form-create-empresa": "onStore"
        },
        initialize: function() {
            this.$wraperForm = this.$("#render-form-empresa"), this.listenTo(this.model, "change:id", this.render), 
            this.listenTo(this.model, "change:tercero_persona", this.renderName), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.$dv = this.$("#tercero_digito"), 
            this.$retecree = this.$("#tercero_retecree"), this.ready();
        },
        renderName: function(model, value, opts) {
            this.$("#content-render-name").html(this.templateName(this.model.toJSON())), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initInputMask && window.initComponent.initInputMask(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck();
        },
        nitChanged: function(e) {
            var _this = this;
            $.ajax({
                url: window.Misc.urlFull(Route.route("terceros.dv")),
                type: "GET",
                data: {
                    tercero_nit: $(e.currentTarget).val()
                },
                beforeSend: function() {
                    window.Misc.setSpinner(_this.el);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.el), resp.success && _this.$dv.val(resp.dv);
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.el), alertify.error(thrownError);
            });
        },
        personaChanged: function(e) {
            this.model.set({
                tercero_persona: $(e.currentTarget).val()
            });
        },
        actividadChanged: function(e) {
            var _this = this;
            $.ajax({
                url: window.Misc.urlFull(Route.route("terceros.rcree")),
                type: "GET",
                data: {
                    tercero_actividad: $(e.currentTarget).val()
                },
                beforeSend: function() {
                    window.Misc.setSpinner(_this.el);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.el), resp.success && (_.isUndefined(resp.rcree) || _.isNull(resp.rcree) || _this.$retecree.html(resp.rcree));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.el), alertify.error(thrownError);
            });
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0
                });
            }
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                alertify.success("Empresa fue actualizada con éxito.");
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateFolderView = Backbone.View.extend({
        el: "#folder-create",
        template: _.template($("#add-folder-tpl").html() || ""),
        events: {
            "submit #form-folder": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-folder"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("folders.show", {
                    folders: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainFoldersView = Backbone.View.extend({
        el: "#folders-main",
        initialize: function() {
            this.$foldersSearchTable = this.$("#folders-search-table"), this.$foldersSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("folders.index")),
                columns: [ {
                    data: "folder_codigo",
                    name: "folder_codigo"
                }, {
                    data: "folder_nombre",
                    name: "folder_nombre"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Agregar Folder',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("folders.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "15%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("folders.show", {
                            folders: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateGrupoView = Backbone.View.extend({
        el: "#grupos-create",
        template: _.template($("#add-grupo-tpl").html() || ""),
        events: {
            "submit #form-grupos": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-grupo"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("grupos.show", {
                    grupos: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainGruposView = Backbone.View.extend({
        el: "#grupos-main",
        initialize: function() {
            this.$gruposSearchTable = this.$("#grupos-search-table"), this.$gruposSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("grupos.index")),
                columns: [ {
                    data: "grupo_codigo",
                    name: "grupo_codigo"
                }, {
                    data: "grupo_nombre",
                    name: "grupo_nombre"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nuevo grupo',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("grupos.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("grupos.show", {
                            grupos: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.UserLoginView = Backbone.View.extend({
        el: "#login-box",
        initialize: function() {
            this.$loginForm = $("#form-login-account"), this.$loginForm.validator();
        },
        render: function() {}
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateMaquinapView = Backbone.View.extend({
        el: "#maquinasp-create",
        template: _.template($("#add-maquinap-tpl").html() || ""),
        events: {
            "submit #form-maquinasp": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-maquinap"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("maquinasp.show", {
                    maquinasp: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainMaquinaspView = Backbone.View.extend({
        el: "#maquinasp-main",
        initialize: function() {
            this.$maquinaspSearchTable = this.$("#maquinasp-search-table"), this.$maquinaspSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("maquinasp.index")),
                columns: [ {
                    data: "id",
                    name: "id"
                }, {
                    data: "maquinap_nombre",
                    name: "maquinap_nombre"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-plus"></i> Nueva máquina',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("maquinasp.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("maquinasp.show", {
                            maquinasp: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateMaterialpView = Backbone.View.extend({
        el: "#materialesp-create",
        template: _.template($("#add-materialp-tpl").html() || ""),
        events: {
            "submit #form-materialesp": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-materialp"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("materialesp.show", {
                    materialesp: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainMaterialespView = Backbone.View.extend({
        el: "#materialesp-main",
        initialize: function() {
            this.$materialespSearchTable = this.$("#materialesp-search-table"), this.$materialespSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("materialesp.index")),
                columns: [ {
                    data: "id",
                    name: "id"
                }, {
                    data: "materialp_nombre",
                    name: "materialp_nombre"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-plus"></i> Nuevo material',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("materialesp.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("materialesp.show", {
                            materialesp: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainModuloView = Backbone.View.extend({
        el: "#modulos-main",
        initialize: function() {
            this.$modulosSearchTable = this.$("#modulos-search-table"), this.$modulosSearchTable.DataTable({
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("modulos.index")),
                columns: [ {
                    data: "display_name",
                    name: "display_name"
                }, {
                    data: "name",
                    name: "name"
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "25%"
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainMunicipioView = Backbone.View.extend({
        el: "#municipios-main",
        initialize: function() {
            this.$municipiosSearchTable = this.$("#municipios-search-table"), this.$municipiosSearchTable.DataTable({
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull(Route.route("municipios.index")),
                    data: function(data) {
                        data.datatables = !0;
                    }
                },
                columns: [ {
                    data: "departamento_codigo",
                    name: "koi_departamento.departamento_codigo"
                }, {
                    data: "departamento_nombre",
                    name: "departamento_nombre"
                }, {
                    data: "municipio_codigo",
                    name: "municipio_codigo"
                }, {
                    data: "municipio_nombre",
                    name: "municipio_nombre"
                }, {
                    data: "departamento_id",
                    name: "departamento_id"
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "15%"
                }, {
                    targets: 1,
                    width: "35%"
                }, {
                    targets: 2,
                    width: "15%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("departamentos.show", {
                            departamentos: full.departamento_id
                        })) + '">' + data + "</a>";
                    }
                }, {
                    targets: 3,
                    width: "35%"
                }, {
                    targets: 4,
                    visible: !1,
                    searchable: !1
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AcabadosProductopListView = Backbone.View.extend({
        el: "#browse-orden-producto-acabados-list",
        events: {},
        parameters: {
            wrapper: null,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "sync", this.responseServer), 
            this.collection.fetch({
                data: this.parameters.dataFilter,
                reset: !0
            });
        },
        render: function() {},
        addOne: function(ordenp5Model) {
            var view = new app.AcabadosProductopItemView({
                model: ordenp5Model
            });
            ordenp5Model.view = view, this.$el.append(view.render().el);
        },
        addAll: function() {
            this.$el.find("tbody").html(""), this.collection.forEach(this.addOne, this);
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.$el);
        },
        responseServer: function(target, resp, opts) {
            this.ready(), window.Misc.removeSpinner(this.$el);
        },
        ready: function() {
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AcabadosProductopItemView = Backbone.View.extend({
        tagName: "div",
        className: "row",
        template: _.template($("#orden-producto-acabado-item-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateOrdenpView = Backbone.View.extend({
        el: "#ordenes-create",
        template: _.template($("#add-ordenp-tpl").html() || ""),
        events: {
            "click .submit-ordenp": "submitOrdenp",
            "click .close-ordenp": "closeOrdenp",
            "click .clone-ordenp": "cloneOrdenp",
            "click .export-ordenp": "exportOrdenp",
            "submit #form-ordenes": "onStore",
            "submit #form-despachosp": "onStoreDespacho"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-orden"), this.model.id != undefined && (this.productopOrdenList = new app.ProductopOrdenList(), 
            this.despachopOrdenList = new app.DespachopOrdenList(), this.despachospPendientesOrdenList = new app.DespachospPendientesOrdenList()), 
            this.listenTo(this.model, "change", this.render), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.$form = this.$("#form-ordenes"), 
            this.model.id != undefined && this.referenceViews(), this.ready();
        },
        renderIva: function(model, value, opts) {
            console.log("Ingreo renderIva");
        },
        referenceViews: function() {
            this.productopOrdenListView = new app.ProductopOrdenListView({
                collection: this.productopOrdenList,
                parameters: {
                    edit: !0,
                    iva: this.model.get("orden_iva"),
                    wrapper: this.$("#wrapper-productop-orden"),
                    dataFilter: {
                        orden2_orden: this.model.get("id")
                    }
                }
            }), this.despachospPendientesOrdenListView = new app.DespachospPendientesOrdenListView({
                collection: this.despachospPendientesOrdenList,
                parameters: {
                    dataFilter: {
                        orden2_orden: this.model.get("id")
                    }
                }
            }), this.despachopOrdenListView = new app.DespachopOrdenListView({
                collection: this.despachopOrdenList,
                parameters: {
                    edit: !0,
                    wrapper: this.$el,
                    collectionPendientes: this.despachospPendientesOrdenList,
                    dataFilter: {
                        despachop1_orden: this.model.get("id")
                    }
                }
            });
        },
        submitOrdenp: function(e) {
            this.$form.submit();
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        onStoreDespacho: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                data.despachop1_orden = this.model.get("id"), this.despachopOrdenList.trigger("store", data);
            }
        },
        exportOrdenp: function(e) {
            e.preventDefault(), window.open(window.Misc.urlFull(Route.route("ordenes.exportar", {
                ordenes: this.model.get("id")
            })), "_blank");
        },
        closeOrdenp: function(e) {
            e.preventDefault();
            var _this = this;
            new window.app.ConfirmWindow({
                parameters: {
                    dataFilter: {
                        orden_codigo: _this.model.get("orden_codigo")
                    },
                    template: _.template($("#ordenp-close-confirm-tpl").html() || ""),
                    titleConfirm: "Cerrar orden de producción",
                    onConfirm: function() {
                        $.ajax({
                            url: window.Misc.urlFull(Route.route("ordenes.cerrar", {
                                ordenes: _this.model.get("id")
                            })),
                            type: "GET",
                            beforeSend: function() {
                                window.Misc.setSpinner(_this.el);
                            }
                        }).done(function(resp) {
                            if (window.Misc.removeSpinner(_this.el), !_.isUndefined(resp.success)) {
                                var text = resp.success ? "" : resp.errors;
                                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                                window.Misc.successRedirect(resp.msg, window.Misc.urlFull(Route.route("ordenes.show", {
                                    ordenes: _this.model.get("id")
                                })));
                            }
                        }).fail(function(jqXHR, ajaxOptions, thrownError) {
                            window.Misc.removeSpinner(_this.el), alertify.error(thrownError);
                        });
                    }
                }
            }).render();
        },
        cloneOrdenp: function(e) {
            e.preventDefault();
            var _this = this;
            data = {
                orden_codigo: this.model.get("id")
            }, new window.app.ConfirmWindow({
                parameters: {
                    dataFilter: data,
                    template: _.template($("#ordenp-clone-confirm-tpl").html() || ""),
                    titleConfirm: "Clonar orden de producción",
                    onConfirm: function() {
                        window.Misc.cloneOrden({
                            data: data,
                            wrap: _this.$el,
                            callback: function(_this) {
                                return function(resp) {
                                    window.Misc.successRedirect(resp.msg, window.Misc.urlFull(Route.route("ordenes.edit", {
                                        ordenes: resp.id
                                    })));
                                };
                            }()
                        });
                    }
                }
            }).render();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initTimePicker && window.initComponent.initTimePicker(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initValidator && window.initComponent.initValidator(), 
            "function" == typeof window.initComponent.initInputMask && window.initComponent.initInputMask(), 
            "function" == typeof window.initComponent.initDatePicker && window.initComponent.initDatePicker();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                this.createOrdenpView instanceof Backbone.View && (this.createOrdenpView.stopListening(), 
                this.createOrdenpView.undelegateEvents()), Backbone.history.navigate(Route.route("ordenes.edit", {
                    ordenes: resp.id
                }), {
                    trigger: !0
                });
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateOrdenp2View = Backbone.View.extend({
        el: "#ordenes-productos-create",
        template: _.template($("#add-orden-producto-tpl").html() || ""),
        events: {
            "change #orden2_precio_formula": "changeFormula",
            "change #orden2_round_formula": "changeFormula",
            "ifChanged #orden2_tiro": "changedTiro",
            "ifChanged #orden2_retiro": "changedRetiro",
            "click .submit-ordenp2": "submitOrdenp2",
            "submit #form-orden-producto": "onStore"
        },
        parameters: {
            data: {
                orden2_productop: null
            }
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-orden-producto"), this.maquinasProductopList = new app.MaquinasProductopList(), 
            this.materialesProductopList = new app.MaterialesProductopList(), this.acabadosProductopList = new app.AcabadosProductopList(), 
            this.listenTo(this.model, "change", this.render), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.$form = this.$("#form-orden-producto"), 
            this.$inputFormula = this.$("#orden2_precio_formula"), this.$inputRound = this.$("#orden2_round_formula"), 
            this.$inputPrecio = this.$("#orden2_precio_venta"), this.$inputYellow = this.$("#orden2_yellow"), 
            this.$inputMagenta = this.$("#orden2_magenta"), this.$inputCyan = this.$("#orden2_cyan"), 
            this.$inputKey = this.$("#orden2_key"), this.$inputYellow2 = this.$("#orden2_yellow2"), 
            this.$inputMagenta2 = this.$("#orden2_magenta2"), this.$inputCyan2 = this.$("#orden2_cyan2"), 
            this.$inputKey2 = this.$("#orden2_key2"), this.referenceViews(), this.ready();
        },
        referenceViews: function() {
            var dataFilter = {
                productop: this.parameters.data.orden2_productop
            };
            this.model.id != undefined && (dataFilter.orden2 = this.model.get("id"), dataFilter.productop = this.model.get("orden2_productop")), 
            this.maquinasProductopListView = new app.MaquinasProductopListView({
                collection: this.maquinasProductopList,
                parameters: {
                    dataFilter: dataFilter
                }
            }), this.materialesProductopListView = new app.MaterialesProductopListView({
                collection: this.materialesProductopList,
                parameters: {
                    dataFilter: dataFilter
                }
            }), this.acabadosProductopListView = new app.AcabadosProductopListView({
                collection: this.acabadosProductopList,
                parameters: {
                    dataFilter: dataFilter
                }
            });
        },
        changeFormula: function() {
            var _this = this, formula = this.$inputFormula.val(), round = this.$inputRound.val();
            formula = formula.replaceAll("(", "n"), formula = formula.replaceAll(")", "m"), 
            formula = formula.replaceAll("+", "t"), $.ajax({
                url: window.Misc.urlFull(Route.route("ordenes.productos.formula")),
                type: "GET",
                data: {
                    equation: formula,
                    round: round
                },
                beforeSend: function() {
                    window.Misc.setSpinner(_this.el);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.el), _this.$inputPrecio.val(resp.precio_venta);
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                _this.$inputPrecio.val(0), window.Misc.removeSpinner(_this.el), alertify.error(thrownError);
            });
        },
        changedTiro: function(e) {
            $(e.target).is(":checked") ? (this.$inputYellow.iCheck("check"), this.$inputMagenta.iCheck("check"), 
            this.$inputCyan.iCheck("check"), this.$inputKey.iCheck("check")) : (this.$inputYellow.iCheck("uncheck"), 
            this.$inputMagenta.iCheck("uncheck"), this.$inputCyan.iCheck("uncheck"), this.$inputKey.iCheck("uncheck"));
        },
        changedRetiro: function(e) {
            $(e.target).is(":checked") ? (this.$inputYellow2.iCheck("check"), this.$inputMagenta2.iCheck("check"), 
            this.$inputCyan2.iCheck("check"), this.$inputKey2.iCheck("check")) : (this.$inputYellow2.iCheck("uncheck"), 
            this.$inputMagenta2.iCheck("uncheck"), this.$inputCyan2.iCheck("uncheck"), this.$inputKey2.iCheck("uncheck"));
        },
        submitOrdenp2: function(e) {
            this.$form.submit();
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = $.extend({}, window.Misc.formToJson(e.target), this.parameters.data);
                this.model.save(data, {
                    silent: !0
                });
            }
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initTimePicker && window.initComponent.initTimePicker(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initValidator && window.initComponent.initValidator(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck(), 
            "function" == typeof window.initComponent.initInputMask && window.initComponent.initInputMask();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("ordenes.edit", {
                    ordenes: this.model.get("orden2_orden")
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {});

!function($, window, document, undefined) {
    app.DespachopOrdenListView = Backbone.View.extend({
        el: "#browse-orden-despachosp-list",
        events: {
            "click .item-orden-despacho-remove": "removeOne"
        },
        parameters: {
            wrapper: null,
            collectionPendientes: null,
            edit: !1,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "store", this.storeOne), 
            this.listenTo(this.collection, "sync", this.responseServer), this.collection.fetch({
                data: {
                    despachop1_orden: this.parameters.dataFilter.despachop1_orden
                },
                reset: !0
            });
        },
        render: function() {},
        addOne: function(despachopModel) {
            var view = new app.DespachopOrdenItemView({
                model: despachopModel,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            despachopModel.view = view, this.$el.append(view.render().el);
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        storeOne: function(data) {
            var _this = this;
            window.Misc.setSpinner(this.parameters.wrapper), new app.DespachopModel().save(data, {
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner(_this.parameters.wrapper);
                        var text = resp.success ? "" : resp.errors;
                        if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                        _this.collection.add(model), _this.parameters.collectionPendientes.fetch({
                            data: {
                                orden2_orden: _this.parameters.dataFilter.despachop1_orden
                            },
                            reset: !0
                        });
                    }
                },
                error: function(model, error) {
                    window.Misc.removeSpinner(_this.parameters.wrapper), alertify.error(error.statusText);
                }
            });
        },
        removeOne: function(e) {
            e.preventDefault();
            var resource = $(e.currentTarget).attr("data-resource"), model = this.collection.get(resource), _this = this;
            model instanceof Backbone.Model && model.destroy({
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        if (window.Misc.removeSpinner(_this.parameters.wrapper), !resp.success) return void alertify.error(resp.errors);
                        model.view.remove(), _this.collection.remove(model), _this.parameters.collectionPendientes.fetch({
                            data: {
                                orden2_orden: _this.parameters.dataFilter.despachop1_orden
                            },
                            reset: !0
                        });
                    }
                }
            });
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.DespachopOrdenItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#ordenp-despacho-item-list-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.DespachospPendientesOrdenListView = Backbone.View.extend({
        el: "#browse-orden-despachosp-pendientes-list",
        events: {},
        parameters: {
            wrapper: null,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "sync", this.responseServer), 
            this.collection.fetch({
                data: {
                    orden2_orden: this.parameters.dataFilter.orden2_orden
                },
                reset: !0
            });
        },
        render: function() {},
        addOne: function(ordenp2Model) {
            var view = new app.DespachopPendienteOrdenItemView({
                model: ordenp2Model
            });
            ordenp2Model.view = view, this.$el.prepend(view.render().el);
        },
        addAll: function() {
            this.$el.find("tbody").html(""), this.collection.forEach(this.addOne, this);
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.$el);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.$el);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.DespachopPendienteOrdenItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#ordenp-despacho-pendiente-item-list-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainOrdenesView = Backbone.View.extend({
        el: "#ordenes-main",
        events: {
            "click .btn-search": "search",
            "click .btn-clear": "clear"
        },
        initialize: function() {
            var _this = this;
            this.$ordersSearchTable = this.$("#ordenes-search-table"), this.$searchordenpOrden = this.$("#searchordenp_ordenp_numero"), 
            this.$searchordenpTercero = this.$("#searchordenp_tercero"), this.$searchordenpTerceroName = this.$("#searchordenp_tercero_nombre"), 
            this.$searchordenpEstado = this.$("#searchordenp_ordenp_estado"), this.$searchordenpReferencia = this.$("#searchordenp_ordenp_referencia"), 
            this.$searchordenpProductop = this.$("#searchordenp_ordenp_productop"), this.ordersSearchTable = this.$ordersSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull(Route.route("ordenes.index")),
                    data: function(data) {
                        data.persistent = !0, data.orden_numero = _this.$searchordenpOrden.val(), data.orden_tercero_nit = _this.$searchordenpTercero.val(), 
                        data.orden_tercero_nombre = _this.$searchordenpTerceroName.val(), data.orden_estado = _this.$searchordenpEstado.val(), 
                        data.orden_referencia = _this.$searchordenpReferencia.val(), data.orden_productop = _this.$searchordenpProductop.val();
                    }
                },
                columns: [ {
                    data: "orden_codigo",
                    name: "orden_codigo"
                }, {
                    data: "orden_ano",
                    name: "orden_ano"
                }, {
                    data: "orden_numero",
                    name: "orden_numero"
                }, {
                    data: "orden_fecha_inicio",
                    name: "orden_fecha_inicio"
                }, {
                    data: "orden_fecha_entrega",
                    name: "orden_fecha_entrega"
                }, {
                    data: "orden_hora_entrega",
                    name: "orden_hora_entrega"
                }, {
                    data: "tercero_nombre",
                    name: "tercero_nombre"
                } ],
                order: [ [ 1, "desc" ], [ 2, "desc" ] ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    searchable: !1,
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("ordenes.show", {
                            ordenes: full.id
                        })) + '">' + data + "</a>";
                    }
                }, {
                    targets: [ 1, 2 ],
                    visible: !1,
                    width: "10%"
                }, {
                    targets: 3,
                    width: "10%"
                } ],
                fnRowCallback: function(row, data) {
                    data.orden_abierta ? $(row).css({
                        color: "#00a65a"
                    }) : data.orden_anulada && $(row).css({
                        color: "red"
                    });
                }
            });
        },
        search: function(e) {
            e.preventDefault(), this.ordersSearchTable.ajax.reload();
        },
        clear: function(e) {
            e.preventDefault(), this.$searchordenpOrden.val(""), this.$searchordenpTercero.val(""), 
            this.$searchordenpTerceroName.val(""), this.$searchordenpEstado.val(""), this.$searchordenpReferencia.val(""), 
            this.$searchordenpProductop.val("").trigger("change"), this.ordersSearchTable.ajax.reload();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MaquinasProductopListView = Backbone.View.extend({
        el: "#browse-orden-producto-maquinas-list",
        events: {},
        parameters: {
            wrapper: null,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "sync", this.responseServer), 
            this.collection.fetch({
                data: this.parameters.dataFilter,
                reset: !0
            });
        },
        render: function() {},
        addOne: function(ordenp3Model) {
            var view = new app.MaquinasProductopItemView({
                model: ordenp3Model
            });
            ordenp3Model.view = view, this.$el.append(view.render().el);
        },
        addAll: function() {
            this.$el.find("tbody").html(""), this.collection.forEach(this.addOne, this);
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.$el);
        },
        responseServer: function(target, resp, opts) {
            this.ready(), window.Misc.removeSpinner(this.$el);
        },
        ready: function() {
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MaquinasProductopItemView = Backbone.View.extend({
        tagName: "div",
        className: "row",
        template: _.template($("#orden-producto-maquina-item-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MaterialesProductopListView = Backbone.View.extend({
        el: "#browse-orden-producto-materiales-list",
        events: {},
        parameters: {
            wrapper: null,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "sync", this.responseServer), 
            this.collection.fetch({
                data: this.parameters.dataFilter,
                reset: !0
            });
        },
        render: function() {},
        addOne: function(ordenp4Model) {
            var view = new app.MaterialesProductopItemView({
                model: ordenp4Model
            });
            ordenp4Model.view = view, this.$el.append(view.render().el);
        },
        addAll: function() {
            this.$el.find("tbody").html(""), this.collection.forEach(this.addOne, this);
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.$el);
        },
        responseServer: function(target, resp, opts) {
            this.ready(), window.Misc.removeSpinner(this.$el);
        },
        ready: function() {
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MaterialesProductopItemView = Backbone.View.extend({
        tagName: "div",
        className: "row",
        template: _.template($("#orden-producto-material-item-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ProductopOrdenListView = Backbone.View.extend({
        el: "#browse-orden-productop-list",
        events: {
            "click .item-orden-producto-remove": "removeOne",
            "click .item-orden-producto-clone": "cloneOne"
        },
        parameters: {
            wrapper: null,
            edit: !1,
            iva: 0,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$unidades = this.$("#subtotal-cantidad"), this.$subtotal = this.$("#subtotal-total"), 
            this.$iva = this.$("#iva-total"), this.$total = this.$("#total-total"), this.listenTo(this.collection, "add", this.addOne), 
            this.listenTo(this.collection, "reset", this.addAll), this.listenTo(this.collection, "request", this.loadSpinner), 
            this.listenTo(this.collection, "sync", this.responseServer), this.collection.fetch({
                data: {
                    orden2_orden: this.parameters.dataFilter.orden2_orden
                },
                reset: !0
            });
        },
        render: function() {},
        addOne: function(ordenp2Model) {
            var view = new app.ProductopOrdenItemView({
                model: ordenp2Model,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            ordenp2Model.view = view, this.$el.append(view.render().el), this.totalize();
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        removeOne: function(e) {
            e.preventDefault();
            var resource = $(e.currentTarget).attr("data-resource"), model = this.collection.get(resource), _this = this;
            model instanceof Backbone.Model && model.destroy({
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        if (window.Misc.removeSpinner(_this.parameters.wrapper), !resp.success) return void alertify.error(resp.errors);
                        model.view.remove(), _this.collection.remove(model), _this.totalize();
                    }
                }
            });
        },
        cloneOne: function(e) {
            e.preventDefault();
            var _this = this, resource = $(e.currentTarget).attr("data-resource"), model = this.collection.get(resource), data = {
                orden2_codigo: model.get("id"),
                productop_nombre: model.get("productop_nombre")
            };
            new window.app.ConfirmWindow({
                parameters: {
                    dataFilter: data,
                    template: _.template($("#ordenp-productop-clone-confirm-tpl").html() || ""),
                    titleConfirm: "Clonar producto orden de producción",
                    onConfirm: function() {
                        $.ajax({
                            url: window.Misc.urlFull(Route.route("ordenes.productos.clonar", {
                                productos: data.orden2_codigo
                            })),
                            type: "GET",
                            beforeSend: function() {
                                window.Misc.setSpinner(_this.parameters.wrapper);
                            }
                        }).done(function(resp) {
                            if (window.Misc.removeSpinner(_this.parameters.wrapper), !_.isUndefined(resp.success)) {
                                var text = resp.success ? "" : resp.errors;
                                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                                window.Misc.successRedirect(resp.msg, window.Misc.urlFull(Route.route("ordenes.productos.show", {
                                    productos: resp.id
                                })));
                            }
                        }).fail(function(jqXHR, ajaxOptions, thrownError) {
                            window.Misc.removeSpinner(_this.parameters.wrapper), alertify.error(thrownError);
                        });
                    }
                }
            }).render();
        },
        totalize: function() {
            var data = this.collection.totalize();
            this.$unidades.length && this.$unidades.html(data.unidades), this.$subtotal.length && this.$subtotal.html(window.Misc.currency(data.subtotal));
            var iva = data.subtotal * (this.parameters.iva / 100);
            this.$iva.length && this.$iva.html(window.Misc.currency(iva));
            var total = data.subtotal + iva;
            this.$total.length && this.$total.html(window.Misc.currency(total));
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ProductopOrdenItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#ordenp-producto-item-list-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ShowOrdenesView = Backbone.View.extend({
        el: "#ordenes-show",
        events: {
            "click .export-ordenp": "exportOrdenp",
            "click .open-ordenp": "openOrdenp",
            "click .clone-ordenp": "cloneOrdenp"
        },
        initialize: function() {
            this.model.id != undefined && (this.productopOrdenList = new app.ProductopOrdenList(), 
            this.despachopOrdenList = new app.DespachopOrdenList(), this.referenceViews());
        },
        referenceViews: function() {
            this.productopOrdenListView = new app.ProductopOrdenListView({
                collection: this.productopOrdenList,
                parameters: {
                    wrapper: this.$("#wrapper-productop-orden"),
                    dataFilter: {
                        orden2_orden: this.model.get("id")
                    }
                }
            }), this.despachopOrdenListView = new app.DespachopOrdenListView({
                collection: this.despachopOrdenList,
                parameters: {
                    wrapper: this.$el,
                    dataFilter: {
                        despachop1_orden: this.model.get("id")
                    }
                }
            });
        },
        openOrdenp: function(e) {
            e.preventDefault();
            var _this = this;
            new window.app.ConfirmWindow({
                parameters: {
                    dataFilter: {
                        orden_codigo: _this.model.get("orden_codigo")
                    },
                    template: _.template($("#ordenp-open-confirm-tpl").html() || ""),
                    titleConfirm: "Reabir orden de producción",
                    onConfirm: function() {
                        $.ajax({
                            url: window.Misc.urlFull(Route.route("ordenes.abrir", {
                                ordenes: _this.model.get("id")
                            })),
                            type: "GET",
                            beforeSend: function() {
                                window.Misc.setSpinner(_this.el);
                            }
                        }).done(function(resp) {
                            if (window.Misc.removeSpinner(_this.el), !_.isUndefined(resp.success)) {
                                var text = resp.success ? "" : resp.errors;
                                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                                window.Misc.successRedirect(resp.msg, window.Misc.urlFull(Route.route("ordenes.edit", {
                                    ordenes: _this.model.get("id")
                                })));
                            }
                        }).fail(function(jqXHR, ajaxOptions, thrownError) {
                            window.Misc.removeSpinner(_this.el), alertify.error(thrownError);
                        });
                    }
                }
            }).render();
        },
        cloneOrdenp: function(e) {
            e.preventDefault();
            var _this = this, data = {
                orden_codigo: this.model.get("id")
            };
            new window.app.ConfirmWindow({
                parameters: {
                    dataFilter: data,
                    template: _.template($("#ordenp-clone-confirm-tpl").html() || ""),
                    titleConfirm: "Clonar orden de producción",
                    onConfirm: function() {
                        window.Misc.cloneOrden({
                            data: data,
                            wrap: _this.$el,
                            callback: function(_this) {
                                return function(resp) {
                                    window.Misc.successRedirect(resp.msg, window.Misc.urlFull(Route.route("ordenes.edit", {
                                        ordenes: resp.id
                                    })));
                                };
                            }()
                        });
                    }
                }
            }).render();
        },
        exportOrdenp: function(e) {
            e.preventDefault(), window.open(window.Misc.urlFull(Route.route("ordenes.exportar", {
                ordenes: this.model.get("id")
            })), "_blank");
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainPermisoView = Backbone.View.extend({
        el: "#permisos-main",
        initialize: function() {
            this.$permisosSearchTable = this.$("#permisos-search-table"), this.$permisosSearchTable.DataTable({
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("permisos.index")),
                columns: [ {
                    data: "name",
                    name: "name"
                }, {
                    data: "display_name",
                    name: "display_name"
                }, {
                    data: "description",
                    name: "description"
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "15%"
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreatePlanCuentaView = Backbone.View.extend({
        el: "#plancuentas-create",
        template: _.template($("#add-plancuentas-tpl").html() || ""),
        events: {
            "change input#plancuentas_cuenta": "cuentaChanged",
            "submit #form-plancuentas": "onStore"
        },
        initialize: function() {
            this.$wraperForm = this.$("#render-form-plancuentas"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.$nivel = this.$("#plancuentas_nivel"), 
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2();
        },
        cuentaChanged: function(e) {
            var _this = this;
            $.ajax({
                url: window.Misc.urlFull(Route.route("plancuentas.nivel")),
                type: "GET",
                data: {
                    plancuentas_cuenta: $(e.currentTarget).val()
                },
                beforeSend: function() {
                    _this.$nivel.val(""), window.Misc.setSpinner(_this.el);
                }
            }).done(function(resp) {
                window.Misc.removeSpinner(_this.el), resp.success && ((_.isUndefined(resp.nivel) || _.isNull(resp.nivel) || !_.isNumber(resp.nivel)) && alertify.error("Ocurrió un error definiendo el nivel de la cuenta, por favor verifique el número de caracteres."), 
                _this.$nivel.val(resp.nivel));
            }).fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner(_this.el), alertify.error(thrownError);
            });
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("plancuentas.show", {
                    plancuentas: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainPlanCuentasView = Backbone.View.extend({
        el: "#plancuentas-main",
        events: {
            "click .btn-search": "search",
            "click .btn-clear": "clear"
        },
        initialize: function() {
            var _this = this;
            this.$plancuentasSearchTable = this.$("#plancuentas-search-table"), this.$searchCuenta = this.$("#plancuentas_cuenta"), 
            this.$searchName = this.$("#plancuentas_nombre"), this.plancuentasSearchTable = this.$plancuentasSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull(Route.route("plancuentas.index")),
                    data: function(data) {
                        data.persistent = !0, data.plancuentas_cuenta = _this.$searchCuenta.val(), data.plancuentas_nombre = _this.$searchName.val();
                    }
                },
                columns: [ {
                    data: "plancuentas_cuenta",
                    name: "plancuentas_cuenta"
                }, {
                    data: "plancuentas_nivel",
                    name: "plancuentas_nivel"
                }, {
                    data: "plancuentas_nombre",
                    name: "plancuentas_nombre"
                }, {
                    data: "plancuentas_naturaleza",
                    name: "plancuentas_naturaleza"
                }, {
                    data: "plancuentas_tercero",
                    name: "plancuentas_tercero"
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "15%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("plancuentas.show", {
                            plancuentas: full.id
                        })) + '">' + data + "</a>";
                    }
                }, {
                    targets: 1,
                    width: "10%"
                }, {
                    targets: 3,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return "D" == data ? "Débito" : "Crédito";
                    }
                }, {
                    targets: 4,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return data ? "Si" : "No";
                    }
                } ]
            });
        },
        search: function(e) {
            e.preventDefault(), this.plancuentasSearchTable.ajax.reload();
        },
        clear: function(e) {
            e.preventDefault(), this.$searchCuenta.val(""), this.$searchName.val(""), this.plancuentasSearchTable.ajax.reload();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateProductoView = Backbone.View.extend({
        el: "#productos-create",
        template: _.template($("#add-producto-tpl").html() || ""),
        events: {
            "ifChecked #producto_serie": "serieChange",
            "ifChecked #producto_metrado": "metradoChange",
            "submit #form-productos": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-producto"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.$inputSerie = this.$("#producto_serie"), 
            this.$inputMetrado = this.$("#producto_metrado"), this.ready();
        },
        serieChange: function(e) {
            $(e.target).is(":checked") && this.$inputMetrado.iCheck("uncheck");
        },
        metradoChange: function(e) {
            $(e.target).is(":checked") && this.$inputSerie.iCheck("uncheck");
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("productos.show", {
                    productos: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainProductosView = Backbone.View.extend({
        el: "#productos-main",
        events: {
            "click .btn-search": "search",
            "click .btn-clear": "clear"
        },
        initialize: function() {
            var _this = this;
            this.$productosSearchTable = this.$("#productos-search-table"), this.$searchCod = this.$("#producto_codigo"), 
            this.$searchName = this.$("#producto_nombre"), this.productosSearchTable = this.$productosSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull(Route.route("productos.index")),
                    data: function(data) {
                        data.persistent = !0, data.producto_codigo = _this.$searchCod.val(), data.producto_nombre = _this.$searchName.val();
                    }
                },
                columns: [ {
                    data: "producto_codigo",
                    name: "producto_codigo"
                }, {
                    data: "producto_nombre",
                    name: "producto_nombre"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nuevo producto',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("productos.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("productos.show", {
                            productos: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        },
        search: function(e) {
            e.preventDefault(), this.productosSearchTable.ajax.reload();
        },
        clear: function(e) {
            e.preventDefault(), this.$searchCod.val(""), this.$searchName.val(""), this.productosSearchTable.ajax.reload();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AcabadoItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#productop-acabado-item-list-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AcabadosListView = Backbone.View.extend({
        el: "#browse-acabados-productop-list",
        events: {
            "click .item-productop6-remove": "removeOne"
        },
        parameters: {
            wrapper: null,
            edit: !1,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.parameters.wrapper, this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "store", this.storeOne), 
            this.listenTo(this.collection, "sync", this.responseServer), this.collection.fetch({
                data: {
                    productop_id: this.parameters.dataFilter.productop_id
                },
                reset: !0
            });
        },
        render: function() {},
        addOne: function(productop6Model) {
            var view = new app.AcabadoItemView({
                model: productop6Model,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            productop6Model.view = view, this.$el.prepend(view.render().el);
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        storeOne: function(data) {
            var _this = this;
            window.Misc.setSpinner(this.parameters.wrapper), data.productop6_productop = this.parameters.dataFilter.productop_id, 
            new app.Productop6Model().save(data, {
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner(_this.parameters.wrapper);
                        var text = resp.success ? "" : resp.errors;
                        if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                        _this.collection.add(model);
                    }
                },
                error: function(model, error) {
                    window.Misc.removeSpinner(_this.parameters.wrapper), alertify.error(error.statusText);
                }
            });
        },
        removeOne: function(e) {
            e.preventDefault();
            var resource = $(e.currentTarget).attr("data-resource"), model = this.collection.get(resource), _this = this;
            model instanceof Backbone.Model && model.destroy({
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        if (window.Misc.removeSpinner(_this.parameters.wrapper), !resp.success) return void alertify.error(resp.errors);
                        model.view.remove();
                    }
                }
            });
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AreaItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#productop-area-item-list-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AreasListView = Backbone.View.extend({
        el: "#browse-areas-productop-list",
        events: {
            "click .item-productop3-remove": "removeOne"
        },
        parameters: {
            wrapper: null,
            edit: !1,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.parameters.wrapper, this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "store", this.storeOne), 
            this.listenTo(this.collection, "sync", this.responseServer), this.collection.fetch({
                data: {
                    productop_id: this.parameters.dataFilter.productop_id
                },
                reset: !0
            });
        },
        render: function() {},
        addOne: function(productop3Model) {
            var view = new app.AreaItemView({
                model: productop3Model,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            productop3Model.view = view, this.$el.prepend(view.render().el);
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        storeOne: function(data) {
            var _this = this;
            window.Misc.setSpinner(this.parameters.wrapper), data.productop3_productop = this.parameters.dataFilter.productop_id, 
            new app.Productop3Model().save(data, {
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner(_this.parameters.wrapper);
                        var text = resp.success ? "" : resp.errors;
                        if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                        _this.collection.add(model);
                    }
                },
                error: function(model, error) {
                    window.Misc.removeSpinner(_this.parameters.wrapper), alertify.error(error.statusText);
                }
            });
        },
        removeOne: function(e) {
            e.preventDefault();
            var resource = $(e.currentTarget).attr("data-resource"), model = this.collection.get(resource), _this = this;
            model instanceof Backbone.Model && model.destroy({
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        if (window.Misc.removeSpinner(_this.parameters.wrapper), !resp.success) return void alertify.error(resp.errors);
                        model.view.remove();
                    }
                }
            });
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateProductopView = Backbone.View.extend({
        el: "#productosp-create",
        template: _.template($("#add-productop-tpl").html() || ""),
        events: {
            "ifChanged .change-productop-abierto-koi-component": "changedAbierto",
            "ifChanged .change-productop-cerrado-koi-component": "changedCerrado",
            "ifChanged .change-productop-3d-koi-component": "changed3d",
            "click .submit-productosp": "submitProductop",
            "submit #form-productosp": "onStore",
            "submit #form-productosp2": "onStoreTip",
            "submit #form-productosp3": "onStoreArea",
            "submit #form-productosp4": "onStoreMaquina",
            "submit #form-productosp5": "onStoreMaterial",
            "submit #form-productosp6": "onStoreAcabado"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-productop"), this.model.id != undefined && (this.tipsList = new app.TipsList(), 
            this.areasList = new app.AreasList(), this.maquinasList = new app.MaquinasList(), 
            this.materialesList = new app.MaterialesList(), this.acabadosList = new app.AcabadosList()), 
            this.listenTo(this.model, "change", this.render), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.$form = this.$("#form-productosp"), 
            this.$inputAbierto = $("#productop_abierto"), this.$inputAbiertoAncho = $("#productop_ancho_med"), 
            this.$inputAbiertoAlto = $("#productop_alto_med"), this.$inputCerrado = $("#productop_cerrado"), 
            this.$inputCerradoAncho = $("#productop_c_med_ancho"), this.$inputCerradoAlto = $("#productop_c_med_alto"), 
            this.$input3d = $("#productop_3d"), this.$input3dAncho = $("#productop_3d_ancho_med"), 
            this.$input3dAlto = $("#productop_3d_alto_med"), this.$input3dProfundidad = $("#productop_3d_profundidad_med"), 
            this.model.id != undefined && this.referenceViews(), this.ready();
        },
        referenceViews: function() {
            this.tipsListView = new app.TipsListView({
                collection: this.tipsList,
                parameters: {
                    edit: !0,
                    wrapper: this.$("#wrapper-productop-tips"),
                    dataFilter: {
                        productop_id: this.model.get("id")
                    }
                }
            }), this.areasListView = new app.AreasListView({
                collection: this.areasList,
                parameters: {
                    edit: !0,
                    wrapper: this.$("#wrapper-productop-areas"),
                    dataFilter: {
                        productop_id: this.model.get("id")
                    }
                }
            }), this.maquinasListView = new app.MaquinasListView({
                collection: this.maquinasList,
                parameters: {
                    edit: !0,
                    wrapper: this.$("#wrapper-productop-maquinas"),
                    dataFilter: {
                        productop_id: this.model.get("id")
                    }
                }
            }), this.materialesListView = new app.MaterialesListView({
                collection: this.materialesList,
                parameters: {
                    edit: !0,
                    wrapper: this.$("#wrapper-productop-materiales"),
                    dataFilter: {
                        productop_id: this.model.get("id")
                    }
                }
            }), this.acabadosListView = new app.AcabadosListView({
                collection: this.acabadosList,
                parameters: {
                    edit: !0,
                    wrapper: this.$("#wrapper-productop-acabados"),
                    dataFilter: {
                        productop_id: this.model.get("id")
                    }
                }
            });
        },
        submitProductop: function(e) {
            this.$form.submit();
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        changedAbierto: function(e) {
            $(e.target).is(":checked") ? (this.$input3d.iCheck("uncheck"), this.$input3d.iCheck("disable"), 
            this.$input3dAncho.prop("disabled", !0).val(""), this.$input3dAlto.prop("disabled", !0).val(""), 
            this.$input3dProfundidad.prop("disabled", !0).val("")) : (this.$input3d.iCheck("enable"), 
            this.$input3dAncho.prop("disabled", !1), this.$input3dAlto.prop("disabled", !1), 
            this.$input3dProfundidad.prop("disabled", !1));
        },
        changedCerrado: function(e) {
            $(e.target).is(":checked") ? (this.$input3d.iCheck("uncheck"), this.$input3d.iCheck("disable"), 
            this.$input3dAncho.prop("disabled", !0).val(""), this.$input3dAlto.prop("disabled", !0).val(""), 
            this.$input3dProfundidad.prop("disabled", !0).val("")) : (this.$input3d.iCheck("enable"), 
            this.$input3dAncho.prop("disabled", !1), this.$input3dAlto.prop("disabled", !1), 
            this.$input3dProfundidad.prop("disabled", !1));
        },
        changed3d: function(e) {
            $(e.target).is(":checked") ? (this.$inputAbierto.iCheck("uncheck"), this.$inputAbierto.iCheck("disable"), 
            this.$inputAbiertoAncho.prop("disabled", !0).val(""), this.$inputAbiertoAlto.prop("disabled", !0).val(""), 
            this.$inputCerrado.iCheck("uncheck"), this.$inputCerrado.iCheck("disable"), this.$inputCerradoAncho.prop("disabled", !0).val(""), 
            this.$inputCerradoAlto.prop("disabled", !0).val("")) : (this.$inputAbierto.iCheck("enable"), 
            this.$inputAbiertoAncho.prop("disabled", !1), this.$inputAbiertoAlto.prop("disabled", !1), 
            this.$inputCerrado.iCheck("enable"), this.$inputCerradoAncho.prop("disabled", !1), 
            this.$inputCerradoAlto.prop("disabled", !1));
        },
        onStoreTip: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.tipsList.trigger("store", data);
            }
        },
        onStoreArea: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.areasList.trigger("store", data);
            }
        },
        onStoreMaquina: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.maquinasList.trigger("store", data);
            }
        },
        onStoreMaterial: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.materialesList.trigger("store", data);
            }
        },
        onStoreAcabado: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.acabadosList.trigger("store", data);
            }
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck(), 
            "function" == typeof window.initComponent.initValidator && window.initComponent.initValidator();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                this.createProductopView instanceof Backbone.View && (this.createProductopView.stopListening(), 
                this.createProductopView.undelegateEvents()), Backbone.history.navigate(Route.route("productosp.edit", {
                    productosp: resp.id
                }), {
                    trigger: !0
                });
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainProductospView = Backbone.View.extend({
        el: "#productosp-main",
        events: {
            "click .btn-search": "search",
            "click .btn-clear": "clear"
        },
        initialize: function() {
            var _this = this;
            this.$productospSearchTable = this.$("#productosp-search-table"), this.$searchCod = this.$("#productop_codigo"), 
            this.$searchName = this.$("#productop_nombre"), this.productospSearchTable = this.$productospSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull(Route.route("productosp.index")),
                    data: function(data) {
                        data.persistent = !0, data.productop_codigo = _this.$searchCod.val(), data.productop_nombre = _this.$searchName.val();
                    }
                },
                columns: [ {
                    data: "productop_codigo",
                    name: "productop_codigo"
                }, {
                    data: "productop_nombre",
                    name: "productop_nombre"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nuevo producto',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("productosp.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("productosp.show", {
                            productosp: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        },
        search: function(e) {
            e.preventDefault(), this.productospSearchTable.ajax.reload();
        },
        clear: function(e) {
            e.preventDefault(), this.$searchCod.val(""), this.$searchName.val(""), this.productospSearchTable.ajax.reload();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MaquinaItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#productop-maquina-item-list-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MaquinasListView = Backbone.View.extend({
        el: "#browse-maquinas-productop-list",
        events: {
            "click .item-productop4-remove": "removeOne"
        },
        parameters: {
            wrapper: null,
            edit: !1,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.parameters.wrapper, this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "store", this.storeOne), 
            this.listenTo(this.collection, "sync", this.responseServer), this.collection.fetch({
                data: {
                    productop_id: this.parameters.dataFilter.productop_id
                },
                reset: !0
            });
        },
        render: function() {},
        addOne: function(productop4Model) {
            var view = new app.MaquinaItemView({
                model: productop4Model,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            productop4Model.view = view, this.$el.prepend(view.render().el);
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        storeOne: function(data) {
            var _this = this;
            window.Misc.setSpinner(this.parameters.wrapper), data.productop4_productop = this.parameters.dataFilter.productop_id, 
            new app.Productop4Model().save(data, {
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner(_this.parameters.wrapper);
                        var text = resp.success ? "" : resp.errors;
                        if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                        _this.collection.add(model);
                    }
                },
                error: function(model, error) {
                    window.Misc.removeSpinner(_this.parameters.wrapper), alertify.error(error.statusText);
                }
            });
        },
        removeOne: function(e) {
            e.preventDefault();
            var resource = $(e.currentTarget).attr("data-resource"), model = this.collection.get(resource), _this = this;
            model instanceof Backbone.Model && model.destroy({
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        if (window.Misc.removeSpinner(_this.parameters.wrapper), !resp.success) return void alertify.error(resp.errors);
                        model.view.remove();
                    }
                }
            });
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MaterialesListView = Backbone.View.extend({
        el: "#browse-materiales-productop-list",
        events: {
            "click .item-productop5-remove": "removeOne"
        },
        parameters: {
            wrapper: null,
            edit: !1,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.parameters.wrapper, this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "store", this.storeOne), 
            this.listenTo(this.collection, "sync", this.responseServer), this.collection.fetch({
                data: {
                    productop_id: this.parameters.dataFilter.productop_id
                },
                reset: !0
            });
        },
        render: function() {},
        addOne: function(productop5Model) {
            var view = new app.MaterialItemView({
                model: productop5Model,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            productop5Model.view = view, this.$el.prepend(view.render().el);
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        storeOne: function(data) {
            var _this = this;
            window.Misc.setSpinner(this.parameters.wrapper), data.productop5_productop = this.parameters.dataFilter.productop_id, 
            new app.Productop5Model().save(data, {
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner(_this.parameters.wrapper);
                        var text = resp.success ? "" : resp.errors;
                        if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                        _this.collection.add(model);
                    }
                },
                error: function(model, error) {
                    window.Misc.removeSpinner(_this.parameters.wrapper), alertify.error(error.statusText);
                }
            });
        },
        removeOne: function(e) {
            e.preventDefault();
            var resource = $(e.currentTarget).attr("data-resource"), model = this.collection.get(resource), _this = this;
            model instanceof Backbone.Model && model.destroy({
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        if (window.Misc.removeSpinner(_this.parameters.wrapper), !resp.success) return void alertify.error(resp.errors);
                        model.view.remove();
                    }
                }
            });
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MaterialItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#productop-material-item-list-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ShowProductopView = Backbone.View.extend({
        el: "#terceros-main",
        initialize: function() {
            this.model.id != undefined && (this.tipsList = new app.TipsList(), this.areasList = new app.AreasList(), 
            this.maquinasList = new app.MaquinasList(), this.materialesList = new app.MaterialesList(), 
            this.acabadosList = new app.AcabadosList(), this.referenceViews());
        },
        referenceViews: function() {
            this.tipsListView = new app.TipsListView({
                collection: this.tipsList,
                parameters: {
                    edit: !1,
                    wrapper: this.$("#wrapper-productop-tips"),
                    dataFilter: {
                        productop_id: this.model.get("id")
                    }
                }
            }), this.areasListView = new app.AreasListView({
                collection: this.areasList,
                parameters: {
                    edit: !1,
                    wrapper: this.$("#wrapper-productop-areas"),
                    dataFilter: {
                        productop_id: this.model.get("id")
                    }
                }
            }), this.maquinasListView = new app.MaquinasListView({
                collection: this.maquinasList,
                parameters: {
                    edit: !1,
                    wrapper: this.$("#wrapper-productop-maquinas"),
                    dataFilter: {
                        productop_id: this.model.get("id")
                    }
                }
            }), this.materialesListView = new app.MaterialesListView({
                collection: this.materialesList,
                parameters: {
                    edit: !1,
                    wrapper: this.$("#wrapper-productop-materiales"),
                    dataFilter: {
                        productop_id: this.model.get("id")
                    }
                }
            }), this.acabadosListView = new app.AcabadosListView({
                collection: this.acabadosList,
                parameters: {
                    edit: !1,
                    wrapper: this.$("#wrapper-productop-acabados"),
                    dataFilter: {
                        productop_id: this.model.get("id")
                    }
                }
            });
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.TipItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#productop-tip-item-list-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.TipsListView = Backbone.View.extend({
        el: "#browse-tips-productop-list",
        events: {
            "click .item-productop2-remove": "removeOne"
        },
        parameters: {
            wrapper: null,
            edit: !1,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.parameters.wrapper, this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "store", this.storeOne), 
            this.listenTo(this.collection, "sync", this.responseServer), this.collection.fetch({
                data: {
                    productop_id: this.parameters.dataFilter.productop_id
                },
                reset: !0
            });
        },
        render: function() {},
        addOne: function(productop2Model) {
            var view = new app.TipItemView({
                model: productop2Model,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            productop2Model.view = view, this.$el.prepend(view.render().el);
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        storeOne: function(data) {
            var _this = this;
            window.Misc.setSpinner(this.parameters.wrapper), data.productop2_productop = this.parameters.dataFilter.productop_id, 
            new app.Productop2Model().save(data, {
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner(_this.parameters.wrapper);
                        var text = resp.success ? "" : resp.errors;
                        if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                        _this.collection.add(model);
                    }
                },
                error: function(model, error) {
                    window.Misc.removeSpinner(_this.parameters.wrapper), alertify.error(error.statusText);
                }
            });
        },
        removeOne: function(e) {
            e.preventDefault();
            var resource = $(e.currentTarget).attr("data-resource"), model = this.collection.get(resource), _this = this;
            model instanceof Backbone.Model && model.destroy({
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        if (window.Misc.removeSpinner(_this.parameters.wrapper), !resp.success) return void alertify.error(resp.errors);
                        model.view.remove();
                    }
                }
            });
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreatePuntoventaView = Backbone.View.extend({
        el: "#puntosventa-create",
        template: _.template($("#add-puntoventa-tpl").html() || ""),
        events: {
            "submit #form-puntosventa": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-puntosventa"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("puntosventa.show", {
                    puntosventa: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainPuntoventaView = Backbone.View.extend({
        el: "#puntosventa-main",
        initialize: function() {
            this.$puntosventaSearchTable = this.$("#puntosventa-search-table"), this.$puntosventaSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("puntosventa.index")),
                columns: [ {
                    data: "puntoventa_nombre",
                    name: "puntoventa_nombre"
                }, {
                    data: "puntoventa_prefijo",
                    name: "puntoventa_prefijo"
                }, {
                    data: "puntoventa_resolucion_dian",
                    name: "puntoventa_resolucion_dian"
                }, {
                    data: "puntoventa_numero",
                    name: "puntoventa_numero"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nuevo punto de venta',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("puntosventa.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("puntosventa.show", {
                            puntosventa: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateRolView = Backbone.View.extend({
        el: "#rol-create",
        template: _.template($("#add-rol-tpl").html() || ""),
        events: {
            "submit #form-roles": "onStore",
            "click .toggle-children": "toggleChildren",
            "click .btn-set-permission": "changePermissions"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.stuffToDo = {}, this.stuffToVw = {}, this.$wraperForm = this.$("#render-form-rol"), 
            this.listenTo(this.model, "change", this.render), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.$form = this.$("#form-roles");
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        toggleChildren: function(e) {
            e.preventDefault();
            var resource = $(e.currentTarget).attr("data-resource"), father = $(e.currentTarget).attr("data-father"), nivel1 = $(e.currentTarget).attr("data-nivel1"), nivel2 = $(e.currentTarget).attr("data-nivel2");
            this.stuffToVw[resource] instanceof Backbone.View == 0 && (this.stuffToDo[resource] = new app.PermisosRolList(), 
            this.stuffToVw[resource] = new app.PermisosRolListView({
                el: "#wrapper-permisions-" + resource,
                collection: this.stuffToDo[resource],
                parameters: {
                    wrapper: this.$("#wrapper-father-" + father),
                    permissions: this.model.get("permissions"),
                    father: resource,
                    dataFilter: {
                        role_id: this.model.get("id"),
                        nivel1: nivel1,
                        nivel2: nivel2
                    }
                }
            }));
        },
        changePermissions: function(e) {
            e.preventDefault();
            var resource = $(e.currentTarget).attr("data-resource"), father = $(e.currentTarget).attr("data-father"), collection = this.stuffToDo[father], model = collection.get(resource);
            this.createPermisoRolView instanceof Backbone.View && (this.createPermisoRolView.stopListening(), 
            this.createPermisoRolView.undelegateEvents()), this.createPermisoRolView = new app.CreatePermisoRolView({
                model: model,
                collection: collection,
                parameters: {
                    permissions: this.model.get("permissions"),
                    dataFilter: {
                        role_id: this.model.get("id"),
                        nivel1: model.get("nivel1"),
                        nivel2: model.get("nivel2")
                    }
                }
            }), this.createPermisoRolView.render();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                Backbone.history.navigate(Route.route("roles.edit", {
                    roles: resp.id
                }), {
                    trigger: !0
                });
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreatePermisoRolView = Backbone.View.extend({
        el: "#modal-permisorol-component",
        template: _.template($("#edit-permissions-tpl").html() || ""),
        events: {
            "submit #form-permisorol-component": "onStore"
        },
        parameters: {
            permissions: [],
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$el.find(".inner-title-modal").empty().html(this.model.get("display_name")), 
            this.$wraperContent = this.$el.find(".modal-body"), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.permissions = this.parameters.permissions, this.$el.find(".content-modal").empty().html(this.template(attributes)), 
            this.ready(), this.$el.modal("show"), this;
        },
        ready: function() {
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck();
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                data.role_id = this.parameters.dataFilter.role_id, this.model.save(data, {
                    patch: !0
                });
            }
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.$wraperContent);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.$wraperContent), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                this.collection.fetch({
                    data: this.parameters.dataFilter,
                    reset: !0
                }), this.$el.modal("hide");
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainRolesView = Backbone.View.extend({
        el: "#roles-main",
        initialize: function() {
            this.$rolesSearchTable = this.$("#roles-search-table"), this.$rolesSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("roles.index")),
                columns: [ {
                    data: "display_name",
                    name: "display_name"
                }, {
                    data: "name",
                    name: "name"
                }, {
                    data: "description",
                    name: "description"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-plus"></i> Nuevo Rol',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("roles.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "25%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("roles.show", {
                            roles: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.PermisosRolItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#permissions-rol-list-tpl").html() || ""),
        parameters: {
            father: null,
            permissions: [],
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, attributes.father = this.parameters.father, 
            attributes.permissions = this.parameters.permissions, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.PermisosRolListView = Backbone.View.extend({
        events: {},
        parameters: {
            wrapper: null,
            father: null,
            edit: !1,
            permissions: [],
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "store", this.storeOne), 
            this.listenTo(this.collection, "sync", this.responseServer), this.collection.fetch({
                data: this.parameters.dataFilter,
                reset: !0
            });
        },
        render: function() {},
        addOne: function(moduloModel) {
            var view = new app.PermisosRolItemView({
                model: moduloModel,
                parameters: {
                    father: this.parameters.father,
                    permissions: this.parameters.permissions,
                    edit: this.parameters.edit
                }
            });
            moduloModel.view = view, this.$el.append(view.render().el);
        },
        addAll: function() {
            this.$el.find("tbody").html(""), this.collection.forEach(this.addOne, this);
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateSubGrupoView = Backbone.View.extend({
        el: "#subgrupos-create",
        template: _.template($("#add-subgrupo-tpl").html() || ""),
        events: {
            "submit #form-subgrupos": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-subgrupo"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("subgrupos.show", {
                    subgrupos: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainSubGruposView = Backbone.View.extend({
        el: "#subgrupos-main",
        initialize: function() {
            this.$subgruposSearchTable = this.$("#subgrupos-search-table"), this.$subgruposSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("subgrupos.index")),
                columns: [ {
                    data: "subgrupo_codigo",
                    name: "subgrupo_codigo"
                }, {
                    data: "subgrupo_nombre",
                    name: "subgrupo_nombre"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nuevo subgrupo',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("subgrupos.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("subgrupos.show", {
                            subgrupos: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateSucursalView = Backbone.View.extend({
        el: "#sucursales-create",
        template: _.template($("#add-sucursal-tpl").html() || ""),
        events: {
            "submit #form-sucursales": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-sucursal"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("sucursales.show", {
                    sucursales: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainSucursalesView = Backbone.View.extend({
        el: "#sucursales-main",
        initialize: function() {
            this.$sucursalesSearchTable = this.$("#sucursales-search-table"), this.$sucursalesSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("sucursales.index")),
                columns: [ {
                    data: "sucursal_nombre",
                    name: "sucursal_nombre"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nueva sucursal',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("sucursales.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("sucursales.show", {
                            sucursales: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ContactItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#contact-item-list-tpl").html() || ""),
        initialize: function() {
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return this.$el.html(this.template(attributes)), this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ContactsListView = Backbone.View.extend({
        el: "#browse-contact-list",
        events: {
            "click .btn-edit-tcontacto": "editOne"
        },
        parameters: {
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "sync", this.responseServer), 
            this.on("createOne", this.createOne, this), this.collection.fetch({
                data: {
                    tercero_id: this.parameters.dataFilter.tercero_id
                },
                reset: !0
            });
        },
        render: function() {},
        addOne: function(contactModel) {
            var view = new app.ContactItemView({
                model: contactModel
            });
            this.$el.append(view.render().el);
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        editOne: function(e) {
            e.preventDefault();
            var resource = $(e.currentTarget).attr("data-resource"), model = this.collection.get(resource);
            this.createTContactoView instanceof Backbone.View && (this.createTContactoView.stopListening(), 
            this.createTContactoView.undelegateEvents()), this.createTContactoView = new app.CreateTContactoView({
                model: model
            }), this.createTContactoView.render();
        },
        createOne: function(tercero, address, nomenclatura, municipio) {
            var _this = this;
            this.createTContactoView instanceof Backbone.View && (this.createTContactoView.stopListening(), 
            this.createTContactoView.undelegateEvents()), this.createTContactoView = new app.CreateTContactoView({
                model: new app.ContactoModel({
                    tcontacto_direccion: address,
                    tcontacto_direccion_nomenclatura: nomenclatura,
                    tcontacto_municipio: municipio
                }),
                collection: _this.collection,
                parameters: {
                    tercero_id: tercero
                }
            }), this.createTContactoView.render();
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.el);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateTerceroView = Backbone.View.extend({
        el: "#tercero-create",
        template: _.template($("#add-tercero-tpl").html() || ""),
        events: {
            "submit #form-tercero": "onStore",
            "submit #form-item-roles": "onStoreRol",
            "submit #form-changed-password": "onStorePassword",
            "ifChanged .change_employee": "changedEmployee",
            "ifChanged #tercero_tecnico": "changedTechnical",
            "ifChanged #tercero_coordinador": "changedCoordinador",
            "click .btn-add-tcontacto": "addContacto"
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.msgSuccess = "Tercero guardado con exito!", this.$wraperForm = this.$("#render-form-tercero"), 
            this.model.id != undefined && (this.contactsList = new app.ContactsList(), this.rolList = new app.RolList()), 
            this.listenTo(this.model, "change", this.render), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.$form = this.$("#form-tercero"), 
            this.$formAccounting = this.$("#form-accounting"), this.$formEmployee = this.$("#form-employee"), 
            this.$checkEmployee = this.$("#tercero_empleado"), this.$checkInternal = this.$("#tercero_interno"), 
            this.$coordinador_por = this.$("#tercero_coordinador_por"), this.$username = this.$("#username"), 
            this.$password = this.$("#password"), this.$password_confirmation = this.$("#password_confirmation"), 
            this.$wrapperEmployes = this.$("#wrapper-empleados"), this.$wrapperCoordinador = this.$("#wrapper-coordinador"), 
            this.model.id != undefined && this.referenceViews(), this.ready();
        },
        referenceViews: function() {
            this.contactsListView = new app.ContactsListView({
                collection: this.contactsList,
                parameters: {
                    edit: !0,
                    wrapper: this.$("#wrapper-tcontacto"),
                    dataFilter: {
                        tercero_id: this.model.get("id")
                    }
                }
            }), this.rolesListView = new app.RolesListView({
                collection: this.rolList,
                parameters: {
                    edit: !0,
                    wrapper: this.$("#wrapper-roles"),
                    dataFilter: {
                        tercero_id: this.model.get("id")
                    }
                }
            });
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = $.extend({}, window.Misc.formToJson(e.target), window.Misc.formToJson(this.$formAccounting), window.Misc.formToJson(this.$formEmployee));
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        onStoreRol: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.rolList.trigger("store", data);
            }
        },
        addContacto: function() {
            this.contactsListView.trigger("createOne", this.model.get("id"), this.model.get("tercero_direccion"), this.model.get("tercero_dir_nomenclatura"), this.model.get("tercero_municipio"));
        },
        changedTechnical: function(e) {
            $(e.target).is(":checked") ? this.$wrapperCoordinador.removeClass("hide") : this.$wrapperCoordinador.addClass("hide");
        },
        changedCoordinador: function(e) {
            var selected = $(e.target).is(":checked"), nombre = this.model.get("tercero_nombre1") + " " + this.model.get("tercero_nombre2") + " " + this.model.get("tercero_apellido1") + " " + this.model.get("tercero_apellido2"), select = [ {
                id: this.model.get("id"),
                text: nombre
            } ];
            selected ? (this.$coordinador_por.select2({
                data: select
            }).trigger("change"), this.$coordinador_por.select2({
                language: "es",
                placeholder: "Seleccione",
                allowClear: !1
            })) : this.$coordinador_por.find("option[value=" + this.model.get("id") + "]").remove();
        },
        changedEmployee: function(e) {
            this.$checkInternal.is(":checked") || this.$checkEmployee.is(":checked") ? this.$wrapperEmployes.removeClass("hide") : this.$wrapperEmployes.addClass("hide");
        },
        onStorePassword: function(e) {
            var _this = this;
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                data.id = this.model.get("id"), $.ajax({
                    type: "POST",
                    url: window.Misc.urlFull(Route.route("terceros.setpassword")),
                    data: data,
                    beforeSend: function() {
                        window.Misc.setSpinner(_this.$("#wrapper-password"));
                    }
                }).done(function(resp) {
                    if (window.Misc.removeSpinner(_this.el), !_.isUndefined(resp.success)) {
                        var text = resp.success ? "" : resp.errors;
                        if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                        alertify.success(resp.message);
                    }
                }).fail(function(jqXHR, ajaxOptions, thrownError) {
                    window.Misc.removeSpinner(_this.$("#wrapper-password")), alertify.error(thrownError);
                });
            }
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initInputMask && window.initComponent.initInputMask(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2(), 
            "function" == typeof window.initComponent.initICheck && window.initComponent.initICheck(), 
            "function" == typeof window.initComponent.initValidator && window.initComponent.initValidator();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                this.createTerceroView instanceof Backbone.View && (this.createTerceroView.stopListening(), 
                this.createTerceroView.undelegateEvents()), Backbone.history.navigate(Route.route("terceros.edit", {
                    terceros: resp.id
                }), {
                    trigger: !0
                });
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateTContactoView = Backbone.View.extend({
        el: "body",
        template: _.template($("#add-contacto-tpl").html() || ""),
        events: {
            "submit #form-tcontacto-component": "onStore"
        },
        parameters: {
            tercero_id: null
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change:id", this.render), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.model, "request", this.loadSpinner), this.$modalComponent = this.$("#modal-tcontacto-component");
        },
        render: function() {
            var attributes = this.model.toJSON();
            return this.$modalComponent.find(".content-modal").html("").html(this.template(attributes)), 
            this.$wraperContent = this.$("#content-tcontacto-component").find(".modal-body"), 
            this.ready(), this.$modalComponent.modal("show"), this;
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper(), 
            "function" == typeof window.initComponent.initInputMask && window.initComponent.initInputMask(), 
            "function" == typeof window.initComponent.initSelect2 && window.initComponent.initSelect2();
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                _.isUndefined(this.parameters.tercero_id) || _.isNull(this.parameters.tercero_id) || "" == this.parameters.tercero_id || (data.tcontacto_tercero = this.parameters.tercero_id), 
                this.model.save(data, {
                    patch: !0
                });
            }
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.$wraperContent);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.$wraperContent), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                this.collection instanceof Backbone.Collection && this.collection.add(model), this.$modalComponent.modal("hide");
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.Factura4ListView = Backbone.View.extend({
        el: "#browse-factura4-list",
        parameters: {
            edit: !1,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$valor = this.$(".total"), this.$totalCount = this.$("#total_count"), this.$porvencer = this.$("#porvencer"), 
            this.$porvencer_saldo = this.$("#porvencer_saldo"), this.$menor30 = this.$("#menor30"), 
            this.$menor30_saldo = this.$("#menor30_saldo"), this.$menor60 = this.$("#menor60"), 
            this.$menor60_saldo = this.$("#menor60_saldo"), this.$menor90 = this.$("#menor90"), 
            this.$menor90_saldo = this.$("#menor90_saldo"), this.$menor180 = this.$("#menor180"), 
            this.$menor180_saldo = this.$("#menor180_saldo"), this.$menor360 = this.$("#menor360"), 
            this.$menor360_saldo = this.$("#menor360_saldo"), this.$mayor360 = this.$("#mayor360"), 
            this.$mayor360_saldo = this.$("#mayor360_saldo"), this.listenTo(this.collection, "add", this.addOne), 
            this.listenTo(this.collection, "reset", this.addAll), this.listenTo(this.collection, "request", this.loadSpinner), 
            this.listenTo(this.collection, "sync", this.responseServer), this.collection.fetch({
                data: {
                    tercero: this.parameters.dataFilter.tercero,
                    factura1: this.parameters.dataFilter.factura1
                },
                reset: !0
            });
        },
        render: function() {},
        addOne: function(factura4Model) {
            var view = new app.Factura4ItemView({
                model: factura4Model,
                parameters: {
                    edit: this.parameters.edit,
                    call: this.parameters.call,
                    template: this.parameters.template
                }
            });
            factura4Model.view = view, this.$el.prepend(view.render().el), this.totalize();
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        totalize: function() {
            var data = this.collection.totalize();
            this.$valor.length && this.$valor.html(window.Misc.currency(data.valor)), this.$porvencer.length && (this.$totalCount.html(data.tcount), 
            this.$porvencer.html(data.porvencer.count), this.$porvencer_saldo.html(window.Misc.currency(data.porvencer.saldo))), 
            this.$menor30.length && (this.$menor30.html(data.menor30.count), this.$menor30_saldo.html(window.Misc.currency(data.menor30.saldo))), 
            this.$menor60.length && (this.$menor60.html(data.menor60.count), this.$menor60_saldo.html(window.Misc.currency(data.menor60.saldo))), 
            this.$menor90.length && (this.$menor90.html(data.menor90.count), this.$menor90_saldo.html(window.Misc.currency(data.menor90.saldo))), 
            this.$menor180.length && (this.$menor180.html(data.menor180.count), this.$menor180_saldo.html(window.Misc.currency(data.menor180.saldo))), 
            this.$menor360.length && (this.$menor360.html(data.menor360.count), this.$menor360_saldo.html(window.Misc.currency(data.menor360.saldo))), 
            this.$mayor360.length && (this.$mayor360.html(data.mayor360.count), this.$mayor360_saldo.html(window.Misc.currency(data.mayor360.saldo)));
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.Factura4ItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#add-tercero-cartera-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, attributes.days <= 0 && attributes.days >= -30 ? this.$el.addClass("bg-menor30") : attributes.days <= -31 && attributes.days >= -60 ? this.$el.addClass("bg-menor60") : attributes.days <= -61 && attributes.days >= -90 ? this.$el.addClass("bg-menor90") : attributes.days <= -91 && attributes.days >= -180 ? this.$el.addClass("bg-menor180") : attributes.days <= -181 && attributes.days >= -360 ? this.$el.addClass("bg-menor360") : attributes.days < -360 && this.$el.addClass("bg-mayor360"), 
            this.$el.html(this.template(attributes)), this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.FacturaptListView = Backbone.View.extend({
        el: "#browse-facturap-list",
        events: {},
        parameters: {
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "sync", this.responseServer), 
            this.collection.fetch({
                data: {
                    tercero_id: this.parameters.dataFilter.tercero_id
                },
                reset: !0
            });
        },
        render: function() {},
        addOne: function(Facturap2Model) {
            var view = new app.FacturaptItemView({
                model: Facturap2Model
            });
            this.$el.append(view.render().el);
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.el);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.FacturaptItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#facturapt-item-list-tpl").html() || ""),
        events: {},
        initialize: function() {
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return this.$el.html(this.template(attributes)), this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainTerceroView = Backbone.View.extend({
        el: "#terceros-main",
        events: {
            "click .btn-search": "search",
            "click .btn-clear": "clear"
        },
        initialize: function() {
            var _this = this;
            this.$tercerosSearchTable = this.$("#terceros-search-table"), this.$searchNit = this.$("#tercero_nit"), 
            this.$searchName = this.$("#tercero_nombre"), this.tercerosSearchTable = this.$tercerosSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull(Route.route("terceros.index")),
                    data: function(data) {
                        data.persistent = !0, data.tercero_nit = _this.$searchNit.val(), data.tercero_nombre = _this.$searchName.val();
                    }
                },
                columns: [ {
                    data: "tercero_nit",
                    name: "tercero_nit"
                }, {
                    data: "tercero_nombre",
                    name: "tercero_nombre"
                }, {
                    data: "tercero_razonsocial",
                    name: "tercero_razonsocial"
                }, {
                    data: "tercero_nombre1",
                    name: "tercero_nombre1"
                }, {
                    data: "tercero_nombre2",
                    name: "tercero_nombre2"
                }, {
                    data: "tercero_apellido1",
                    name: "tercero_apellido1"
                }, {
                    data: "tercero_apellido2",
                    name: "tercero_apellido2"
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "15%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("terceros.show", {
                            terceros: full.id
                        })) + '">' + data + "</a>";
                    }
                }, {
                    targets: 1,
                    width: "85%",
                    searchable: !1
                }, {
                    targets: [ 2, 3, 4, 5, 6 ],
                    visible: !1
                } ]
            });
        },
        search: function(e) {
            e.preventDefault(), this.tercerosSearchTable.ajax.reload();
        },
        clear: function(e) {
            e.preventDefault(), this.$searchNit.val(""), this.$searchName.val(""), this.tercerosSearchTable.ajax.reload();
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.RolesListView = Backbone.View.extend({
        el: "#browse-roles-list",
        events: {
            "click .item-roles-remove": "removeOne"
        },
        parameters: {
            wrapper: null,
            edit: !1,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "store", this.storeOne), 
            this.listenTo(this.collection, "sync", this.responseServer), this.collection.fetch({
                data: {
                    tercero_id: this.parameters.dataFilter.tercero_id
                },
                reset: !0
            });
        },
        render: function() {},
        addOne: function(usuariorolModel) {
            var view = new app.RolItemView({
                model: usuariorolModel,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            usuariorolModel.view = view, this.$el.prepend(view.render().el);
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        storeOne: function(data) {
            var _this = this;
            window.Misc.setSpinner(this.parameters.wrapper), data.user_id = this.parameters.dataFilter.tercero_id, 
            new app.UsuarioRolModel().save(data, {
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner(_this.parameters.wrapper);
                        var text = resp.success ? "" : resp.errors;
                        if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                        _this.collection.add(model);
                    }
                },
                error: function(model, error) {
                    window.Misc.removeSpinner(_this.parameters.wrapper), alertify.error(error.statusText);
                }
            });
        },
        removeOne: function(e) {
            e.preventDefault();
            var resource = $(e.currentTarget).attr("data-resource"), model = this.collection.get(resource), _this = this;
            model instanceof Backbone.Model && model.destroy({
                data: {
                    user_id: this.parameters.dataFilter.tercero_id
                },
                processData: !0,
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        if (window.Misc.removeSpinner(_this.parameters.wrapper), !resp.success) return void alertify.error(resp.errors);
                        model.view.remove();
                    }
                }
            });
        },
        loadSpinner: function(target, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(target, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.RolItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#roles-item-list-tpl").html() || ""),
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ShowTerceroView = Backbone.View.extend({
        el: "#terceros-main",
        initialize: function() {
            this.model.id != undefined && (this.contactsList = new app.ContactsList(), this.facturaptList = new app.FacturaptList(), 
            this.rolList = new app.RolList(), this.detalleFacturaList = new app.DetalleFactura4List(), 
            this.referenceViews());
        },
        referenceViews: function() {
            this.contactsListView = new app.ContactsListView({
                collection: this.contactsList,
                parameters: {
                    dataFilter: {
                        tercero_id: this.model.get("id")
                    }
                }
            }), this.rolesListView = new app.RolesListView({
                collection: this.rolList,
                parameters: {
                    edit: !1,
                    wrapper: this.$("#wrapper-roles"),
                    dataFilter: {
                        tercero_id: this.model.get("id")
                    }
                }
            }), this.facturaptListView = new app.FacturaptListView({
                collection: this.facturaptList,
                parameters: {
                    dataFilter: {
                        tercero_id: this.model.get("id")
                    }
                }
            }), this.factura4ListView = new app.Factura4ListView({
                collection: this.detalleFacturaList,
                parameters: {
                    edit: !1,
                    dataFilter: {
                        tercero: this.model.get("id")
                    }
                }
            });
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateTrasladoView = Backbone.View.extend({
        el: "#traslados-create",
        template: _.template($("#add-traslado-tpl").html() || ""),
        events: {
            "click .submit-traslado": "submitTraslado",
            "submit #form-item-traslado": "onStoreItem",
            "submit #form-traslado": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-traslado"), this.trasladoProductosList = new app.TrasladoProductosList(), 
            this.listenTo(this.model, "change", this.render), this.listenTo(this.model, "sync", this.responseServer), 
            this.listenTo(this.model, "request", this.loadSpinner);
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.$form = this.$("#form-traslado"), 
            this.$formItem = this.$("#form-item-traslado"), this.referenceViews();
        },
        referenceViews: function() {
            this.productosListView = new app.TrasladoProductosListView({
                collection: this.trasladoProductosList,
                parameters: {
                    wrapper: this.el,
                    edit: !0
                }
            });
        },
        submitTraslado: function(e) {
            this.$form.submit();
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                data.detalle = this.trasladoProductosList.toJSON(), this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        onStoreItem: function(e) {
            e.isDefaultPrevented() || (e.preventDefault(), this.trasladoProductosList.trigger("store", this.$(e.target)));
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("traslados.show", {
                    traslados: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainTrasladosView = Backbone.View.extend({
        el: "#traslados-main",
        initialize: function() {
            this.$trasladosSearchTable = this.$("#traslados-search-table"), this.$trasladosSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("traslados.index")),
                columns: [ {
                    data: "traslado1_numero",
                    name: "traslado1_numero"
                }, {
                    data: "sucursa_origen",
                    name: "sucursa_origen"
                }, {
                    data: "sucursa_destino",
                    name: "sucursa_destino"
                }, {
                    data: "traslado1_fecha",
                    name: "traslado1_fecha"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nuevo traslado',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("traslados.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("traslados.show", {
                            traslados: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.ShowTrasladoView = Backbone.View.extend({
        el: "#traslados-show",
        initialize: function() {
            this.model.id != undefined && (this.trasladoProductosList = new app.TrasladoProductosList(), 
            this.referenceViews());
        },
        referenceViews: function() {
            this.productosListView = new app.TrasladoProductosListView({
                collection: this.trasladoProductosList,
                parameters: {
                    wrapper: this.el,
                    edit: !1,
                    dataFilter: {
                        traslado: this.model.get("id")
                    }
                }
            });
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.TrasladoProductosListView = Backbone.View.extend({
        el: "#browse-detalle-traslado-list",
        events: {
            "click .item-traslado2-remove": "removeOne"
        },
        parameters: {
            wrapper: null,
            edit: !1,
            dataFilter: {}
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$costoTotal = this.$("#total-costo"), this.confCollection = {
                reset: !0,
                data: {}
            }, this.listenTo(this.collection, "add", this.addOne), this.listenTo(this.collection, "reset", this.addAll), 
            this.listenTo(this.collection, "request", this.loadSpinner), this.listenTo(this.collection, "store", this.storeOne), 
            this.listenTo(this.collection, "sync", this.responseServer), _.isUndefined(this.parameters.dataFilter.traslado) || _.isNull(this.parameters.dataFilter.traslado) || (this.confCollection.data.traslado = this.parameters.dataFilter.traslado, 
            this.collection.fetch(this.confCollection));
        },
        addOne: function(Traslado2Model) {
            var view = new app.TrasladoProductosItemView({
                model: Traslado2Model,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            Traslado2Model.view = view, this.$el.append(view.render().el);
        },
        addAll: function() {
            this.collection.forEach(this.addOne, this);
        },
        storeOne: function(form) {
            var _this = this, data = window.Misc.formToJson(form);
            window.Misc.setSpinner(this.parameters.wrapper), new app.Traslado2Model().save(data, {
                success: function(model, resp) {
                    if (!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner(_this.parameters.wrapper);
                        var text = resp.success ? "" : resp.errors;
                        if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                        _this.collection.add(model);
                    }
                },
                error: function(model, error) {
                    window.Misc.removeSpinner(_this.parameters.wrapper), alertify.error(error.statusText);
                }
            });
        },
        removeOne: function(e) {
            e.preventDefault();
            var resource = $(e.currentTarget).attr("data-resource"), model = this.collection.get(resource);
            model instanceof Backbone.Model && (model.view.remove(), this.collection.remove(model));
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.parameters.wrapper);
        },
        responseServer: function(model, resp, opts) {
            window.Misc.removeSpinner(this.parameters.wrapper);
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.TrasladoProductosItemView = Backbone.View.extend({
        tagName: "tr",
        template: _.template($("#add-traslado2-item-tpl").html() || ""),
        events: {},
        parameters: {
            edit: !1
        },
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.listenTo(this.model, "change", this.render);
        },
        render: function() {
            var attributes = this.model.toJSON();
            return attributes.edit = this.parameters.edit, this.$el.html(this.template(attributes)), 
            this;
        }
    });
}(jQuery, 0, this.document), app || (app = {}), function($, window, document, undefined) {
    app.CreateUnidadView = Backbone.View.extend({
        el: "#unidades-create",
        template: _.template($("#add-unidad-tpl").html() || ""),
        events: {
            "submit #form-unidades": "onStore"
        },
        parameters: {},
        initialize: function(opts) {
            opts !== undefined && _.isObject(opts.parameters) && (this.parameters = $.extend({}, this.parameters, opts.parameters)), 
            this.$wraperForm = this.$("#render-form-unidad"), this.listenTo(this.model, "change", this.render), 
            this.listenTo(this.model, "sync", this.responseServer), this.listenTo(this.model, "request", this.loadSpinner);
        },
        onStore: function(e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                var data = window.Misc.formToJson(e.target);
                this.model.save(data, {
                    patch: !0,
                    silent: !0
                });
            }
        },
        render: function() {
            var attributes = this.model.toJSON();
            this.$wraperForm.html(this.template(attributes)), this.ready();
        },
        ready: function() {
            "function" == typeof window.initComponent.initToUpper && window.initComponent.initToUpper();
        },
        loadSpinner: function(model, xhr, opts) {
            window.Misc.setSpinner(this.el);
        },
        responseServer: function(model, resp, opts) {
            if (window.Misc.removeSpinner(this.el), !_.isUndefined(resp.success)) {
                var text = resp.success ? "" : resp.errors;
                if (_.isObject(resp.errors) && (text = window.Misc.parseErrors(resp.errors)), !resp.success) return void alertify.error(text);
                window.Misc.redirect(window.Misc.urlFull(Route.route("unidades.show", {
                    unidades: resp.id
                })));
            }
        }
    });
}(jQuery, this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.MainUnidadesView = Backbone.View.extend({
        el: "#unidades-main",
        initialize: function() {
            this.$unidadesSearchTable = this.$("#unidades-search-table"), this.$unidadesSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: !0,
                serverSide: !0,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull(Route.route("unidades.index")),
                columns: [ {
                    data: "unidadmedida_sigla",
                    name: "unidadmedida_sigla"
                }, {
                    data: "unidadmedida_nombre",
                    name: "unidadmedida_nombre"
                } ],
                buttons: [ {
                    text: '<i class="fa fa-user-plus"></i> Nuevo unidad',
                    className: "btn-sm",
                    action: function(e, dt, node, config) {
                        window.Misc.redirect(window.Misc.urlFull(Route.route("unidades.create")));
                    }
                } ],
                columnDefs: [ {
                    targets: 0,
                    width: "10%",
                    render: function(data, type, full, row) {
                        return '<a href="' + window.Misc.urlFull(Route.route("unidades.show", {
                            unidades: full.id
                        })) + '">' + data + "</a>";
                    }
                } ]
            });
        }
    });
}(jQuery, this, this.document), app || (app = {}), function(window, document, undefined) {
    app.AsientoCuentasList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("asientos.detalle.index"));
        },
        model: app.Asiento2Model,
        initialize: function() {},
        debitos: function() {
            return this.reduce(function(sum, model) {
                return sum + parseFloat(model.get("asiento2_debito"));
            }, 0);
        },
        creditos: function() {
            return this.reduce(function(sum, model) {
                return sum + parseFloat(model.get("asiento2_credito"));
            }, 0);
        },
        totalize: function() {
            var debitos = this.debitos(), creditos = this.creditos();
            return {
                debitos: debitos,
                creditos: creditos,
                diferencia: Math.abs(creditos - debitos)
            };
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.AsientoFacturaCommentsList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("asientos.facturas.detalle.index"));
        },
        model: app.Factura3Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.AsientoMovimientosList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("asientos.detalle.movimientos"));
        },
        model: app.AsientoMovModel,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.FacturaList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("asientos.facturas.facturadas"));
        },
        model: app.FacturaModel,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.DetalleFactura4List = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("asientos.facturas.factura.index"));
        },
        model: app.Factura4Model,
        initialize: function() {},
        valor: function() {
            return this.reduce(function(sum, model) {
                return sum + parseFloat(model.get("factura4_saldo"));
            }, 0);
        },
        calculate: function(modelos) {
            return {
                saldo: _.reduce(modelos, function(sum, model) {
                    return sum + parseFloat(model.get("factura4_saldo"));
                }, 0),
                count: modelos.length
            };
        },
        matchPorvencer: function() {
            var match = _.filter(this.models, function(item) {
                return item.get("days") > 0;
            });
            return this.calculate(match);
        },
        matchMayor360: function() {
            var match = _.filter(this.models, function(item) {
                return item.get("days") < -360;
            });
            return this.calculate(match);
        },
        matchMenor360: function() {
            var match = _.filter(this.models, function(item) {
                return item.get("days") <= -181 && item.get("days") >= -360;
            });
            return this.calculate(match);
        },
        matchMenor180: function() {
            var match = _.filter(this.models, function(item) {
                return item.get("days") <= -91 && item.get("days") >= -180;
            });
            return this.calculate(match);
        },
        matchMenor90: function() {
            var match = _.filter(this.models, function(item) {
                return item.get("days") <= -61 && item.get("days") >= -90;
            });
            return this.calculate(match);
        },
        matchMenor60: function() {
            var match = _.filter(this.models, function(item) {
                return item.get("days") <= -31 && item.get("days") >= -60;
            });
            return this.calculate(match);
        },
        matchMenor30: function() {
            var match = _.filter(this.models, function(item) {
                return item.get("days") <= 0 && item.get("days") >= -30;
            });
            return this.calculate(match);
        },
        totalize: function() {
            var valor = this.valor(), porvencer = this.matchPorvencer(), mayor360 = this.matchMayor360(), menor360 = this.matchMenor360(), menor180 = this.matchMenor180(), menor90 = this.matchMenor90(), menor60 = this.matchMenor60(), menor30 = this.matchMenor30();
            return {
                valor: valor,
                porvencer: porvencer,
                mayor360: mayor360,
                menor360: menor360,
                menor180: menor180,
                menor90: menor90,
                menor60: menor60,
                menor30: menor30,
                tcount: porvencer.count + menor30.count + menor60.count + menor90.count + menor180.count + menor360.count + mayor360.count
            };
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.CuotasFPList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("facturap.cuotas.index"));
        },
        model: app.Facturap2Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.AcabadosProductopList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("ordenes.productos.acabados.index"));
        },
        model: app.Ordenp5Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.DespachospPendientesOrdenList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("ordenes.despachos.pendientes"));
        },
        model: app.Ordenp2Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.DespachopOrdenList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("ordenes.despachos.index"));
        },
        model: app.DespachopModel,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.MaquinasProductopList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("ordenes.productos.maquinas.index"));
        },
        model: app.Ordenp3Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.MaterialesProductopList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("ordenes.productos.materiales.index"));
        },
        model: app.Ordenp4Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.ProductopOrdenList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("ordenes.productos.index"));
        },
        model: app.Ordenp2Model,
        initialize: function() {},
        unidades: function() {
            return this.reduce(function(sum, model) {
                return sum + model.get("orden2_cantidad");
            }, 0);
        },
        subtotal: function() {
            return this.reduce(function(sum, model) {
                return sum + parseFloat(model.get("orden2_precio_total"));
            }, 0);
        },
        totalize: function() {
            return {
                unidades: this.unidades(),
                subtotal: this.subtotal()
            };
        }
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.ItemRolloINList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("productos.rollos.index"));
        },
        model: app.ItemRolloModel,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.ProductoSeriesINList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("productos.index"));
        },
        model: app.ProductoModel,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.AcabadosList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("productosp.acabados.index"));
        },
        model: app.Productop6Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.AreasList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("productosp.areas.index"));
        },
        model: app.Productop3Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.MaquinasList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("productosp.maquinas.index"));
        },
        model: app.Productop4Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.MaterialesList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("productosp.materiales.index"));
        },
        model: app.Productop5Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.TipsList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("productosp.tips.index"));
        },
        model: app.Productop2Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.PermisosRolList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("roles.permisos.index"));
        },
        model: app.ModuloModel,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.ContactsList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("terceros.contactos.index"));
        },
        model: app.ContactoModel,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.FacturaptList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("terceros.facturap"));
        },
        model: app.Facturap2Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.RolList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("terceros.roles.index"));
        },
        model: app.UsuarioRolModel,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function(window, document, undefined) {
    app.TrasladoProductosList = Backbone.Collection.extend({
        url: function() {
            return window.Misc.urlFull(Route.route("traslados.detalle.index"));
        },
        model: app.Traslado2Model,
        initialize: function() {}
    });
}(this, this.document), app || (app = {}), function($, window, document, undefined) {
    app.AppRouter = new (Backbone.Router.extend({
        routes: {
            "login(/)": "getLogin",
            "terceros(/)": "getTercerosMain",
            "terceros/create(/)": "getTercerosCreate",
            "terceros/:tercero(/)": "getTercerosShow",
            "terceros/:tercero/edit(/)": "getTercerosEdit",
            "empresa(/)": "getEmpresaEdit",
            "municipios(/)": "getMunicipiosMain",
            "departamentos(/)": "getDepartamentosMain",
            "actividades(/)": "getActividadesMain",
            "actividades/create(/)": "getActividadesCreate",
            "actividades/:actividad/edit(/)": "getActividadesEdit",
            "sucursales(/)": "getSucursalesMain",
            "sucursales/create(/)": "getSucursalesCreate",
            "sucursales/:sucursal/edit(/)": "getSucursalesEdit",
            "roles(/)": "getRolesMain",
            "roles/create(/)": "getRolesCreate",
            "roles/:rol/edit(/)": "getRolesEdit",
            "permisos(/)": "getPermisosMain",
            "modulos(/)": "getModulosMain",
            "puntosventa(/)": "getPuntosVentaMain",
            "puntosventa/create(/)": "getPuntosVentaCreate",
            "puntosventa/:puntoventa/edit(/)": "getPuntosVentaEdit",
            "plancuentas(/)": "getPlanCuentasMain",
            "plancuentas/create(/)": "getPlanCuentasCreate",
            "plancuentas/:plancuenta/edit(/)": "getPlanCuentasEdit",
            "centroscosto(/)": "getCentrosCostoMain",
            "centroscosto/create(/)": "getCentrosCostoCreate",
            "centroscosto/:centrocosto/edit(/)": "getCentrosCostoEdit",
            "asientos(/)": "getAsientosMain",
            "asientos/create(/)": "getAsientosCreate",
            "asientos/:asientos(/)": "getAsientosShow",
            "asientos/:asiento/edit(/)": "getAsientosEdit",
            "documentos(/)": "getDocumentosMain",
            "documentos/create(/)": "getDocumentosCreate",
            "documentos/:documento/edit(/)": "getDocumentosEdit",
            "folders(/)": "getFoldersMain",
            "folders/create(/)": "getFoldersCreate",
            "folders/:folder/edit(/)": "getFoldersEdit",
            "subgrupos(/)": "getSubGruposMain",
            "subgrupos/create(/)": "getSubGruposCreate",
            "subgrupos/:subgrupo/edit(/)": "getSubGruposEdit",
            "grupos(/)": "getGruposMain",
            "grupos/create(/)": "getGruposCreate",
            "grupos/:grupo/edit(/)": "getGruposEdit",
            "unidades(/)": "getUnidadesMain",
            "unidades/create(/)": "getUnidadesCreate",
            "unidades/:unidad/edit(/)": "getUnidadesEdit",
            "productos(/)": "getProductosMain",
            "productos/create(/)": "getProductosCreate",
            "productos/:producto/edit(/)": "getProductosEdit",
            "traslados(/)": "getTrasladosMain",
            "traslados/create(/)": "getTrasladosCreate",
            "traslados/:traslado(/)": "getTrasladosShow",
            "areasp(/)": "getAreaspMain",
            "areasp/create(/)": "getAreaspCreate",
            "areasp/:areap/edit(/)": "getAreaspEdit",
            "acabadosp(/)": "getAcabadospMain",
            "acabadosp/create(/)": "getAcabadospCreate",
            "acabadosp/:acabadop/edit(/)": "getAcabadospEdit",
            "maquinasp(/)": "getMaquinaspMain",
            "maquinasp/create(/)": "getMaquinaspCreate",
            "maquinasp/:maquinap/edit(/)": "getMaquinaspEdit",
            "materialesp(/)": "getMaterialespMain",
            "materialesp/create(/)": "getMaterialespCreate",
            "materialesp/:materialp/edit(/)": "getMaterialespEdit",
            "ordenes(/)": "getOrdenesMain",
            "ordenes/create(/)": "getOrdenesCreate",
            "ordenes/:orden(/)": "getOrdenesShow",
            "ordenes/:orden/edit(/)": "getOrdenesEdit",
            "ordenes/productos/create(/)(?*queryString)": "getOrdenesProductoCreate",
            "ordenes/productos/:producto/edit(/)": "getOrdenesProductoEdit",
            "productosp(/)": "getProductospMain",
            "productosp/create(/)": "getProductospCreate",
            "productosp/:producto(/)": "getProductospShow",
            "productosp/:producto/edit(/)": "getProductospEdit"
        },
        parseQueryString: function(queryString) {
            var params = {};
            return queryString && _.each(_.map(decodeURI(queryString).split(/&/g), function(el, i) {
                var aux = el.split("="), o = {};
                if (aux.length >= 1) {
                    var val = undefined;
                    2 == aux.length && (val = aux[1]), o[aux[0]] = val;
                }
                return o;
            }), function(o) {
                _.extend(params, o);
            }), params;
        },
        initialize: function(opts) {
            this.componentGlobalView = new app.ComponentGlobalView(), this.componentAddressView = new app.ComponentAddressView(), 
            this.componentCreateResourceView = new app.ComponentCreateResourceView(), this.componentSearchTerceroView = new app.ComponentSearchTerceroView(), 
            this.componentSearchCuentaView = new app.ComponentSearchCuentaView(), this.componentDocumentView = new app.ComponentDocumentView(), 
            this.componentReportView = new app.ComponentReportView(), this.componentTerceroView = new app.ComponentTerceroView(), 
            this.componentSearchFacturaView = new app.ComponentSearchFacturaView(), this.componentSearchOrdenPView = new app.ComponentSearchOrdenPView(), 
            this.componentSearchProductoView = new app.ComponentSearchProductoView(), this.componentSearchContactoView = new app.ComponentSearchContactoView(), 
            this.componentConsecutiveView = new app.ComponentConsecutiveView();
        },
        start: function() {
            var config = {
                pushState: !0
            };
            "-1" != document.domain.search(/(104.236.57.82|localhost)/gi) && (config.root = "/vaziko/public/"), 
            Backbone.history.start(config);
        },
        getLogin: function() {
            this.loginView instanceof Backbone.View && (this.loginView.stopListening(), this.loginView.undelegateEvents()), 
            this.loginView = new app.UserLoginView();
        },
        getTercerosMain: function() {
            this.mainTerceroView instanceof Backbone.View && (this.mainTerceroView.stopListening(), 
            this.mainTerceroView.undelegateEvents()), this.mainTerceroView = new app.MainTerceroView();
        },
        getTercerosCreate: function() {
            this.terceroModel = new app.TerceroModel(), this.createTerceroView instanceof Backbone.View && (this.createTerceroView.stopListening(), 
            this.createTerceroView.undelegateEvents()), this.createTerceroView = new app.CreateTerceroView({
                model: this.terceroModel
            }), this.createTerceroView.render();
        },
        getTercerosShow: function(tercero) {
            this.terceroModel = new app.TerceroModel(), this.terceroModel.set({
                id: tercero
            }, {
                silent: !0
            }), this.showTerceroView instanceof Backbone.View && (this.showTerceroView.stopListening(), 
            this.showTerceroView.undelegateEvents()), this.showTerceroView = new app.ShowTerceroView({
                model: this.terceroModel
            });
        },
        getTercerosEdit: function(tercero) {
            this.terceroModel = new app.TerceroModel(), this.terceroModel.set({
                id: tercero
            }, {
                silent: !0
            }), this.createTerceroView instanceof Backbone.View && (this.createTerceroView.stopListening(), 
            this.createTerceroView.undelegateEvents()), this.createTerceroView = new app.CreateTerceroView({
                model: this.terceroModel
            }), this.terceroModel.fetch();
        },
        getEmpresaEdit: function() {
            this.empresaModel = new app.EmpresaModel(), this.createEmpresaView instanceof Backbone.View && (this.createEmpresaView.stopListening(), 
            this.createEmpresaView.undelegateEvents()), this.createEmpresaView = new app.CreateEmpresaView({
                model: this.empresaModel
            }), this.empresaModel.fetch();
        },
        getMunicipiosMain: function() {
            this.mainMunicipioView instanceof Backbone.View && (this.mainMunicipioView.stopListening(), 
            this.mainMunicipioView.undelegateEvents()), this.mainMunicipioView = new app.MainMunicipioView();
        },
        getDepartamentosMain: function() {
            this.mainDepartamentoView instanceof Backbone.View && (this.mainDepartamentoView.stopListening(), 
            this.mainDepartamentoView.undelegateEvents()), this.mainDepartamentoView = new app.MainDepartamentoView();
        },
        getActividadesMain: function() {
            this.mainActividadView instanceof Backbone.View && (this.mainActividadView.stopListening(), 
            this.mainActividadView.undelegateEvents()), this.mainActividadView = new app.MainActividadView();
        },
        getActividadesCreate: function() {
            this.actividadModel = new app.ActividadModel(), this.createActividadView instanceof Backbone.View && (this.createActividadView.stopListening(), 
            this.createActividadView.undelegateEvents()), this.createActividadView = new app.CreateActividadView({
                model: this.actividadModel
            }), this.createActividadView.render();
        },
        getActividadesEdit: function(actividad) {
            this.actividadModel = new app.ActividadModel(), this.actividadModel.set({
                id: actividad
            }, {
                silent: !0
            }), this.createActividadView instanceof Backbone.View && (this.createActividadView.stopListening(), 
            this.createActividadView.undelegateEvents()), this.createActividadView = new app.CreateActividadView({
                model: this.actividadModel
            }), this.actividadModel.fetch();
        },
        getSucursalesMain: function() {
            this.mainSucursalesView instanceof Backbone.View && (this.mainSucursalesView.stopListening(), 
            this.mainSucursalesView.undelegateEvents()), this.mainSucursalesView = new app.MainSucursalesView();
        },
        getSucursalesCreate: function() {
            this.sucursalModel = new app.SucursalModel(), this.createSucursalView instanceof Backbone.View && (this.createSucursalView.stopListening(), 
            this.createSucursalView.undelegateEvents()), this.createSucursalView = new app.CreateSucursalView({
                model: this.sucursalModel
            }), this.createSucursalView.render();
        },
        getSucursalesEdit: function(sucursal) {
            this.sucursalModel = new app.SucursalModel(), this.sucursalModel.set({
                id: sucursal
            }, {
                silent: !0
            }), this.createSucursalView instanceof Backbone.View && (this.createSucursalView.stopListening(), 
            this.createSucursalView.undelegateEvents()), this.createSucursalView = new app.CreateSucursalView({
                model: this.sucursalModel
            }), this.sucursalModel.fetch();
        },
        getRolesMain: function() {
            this.mainRolesView instanceof Backbone.View && (this.mainRolesView.stopListening(), 
            this.mainRolesView.undelegateEvents()), this.mainRolesView = new app.MainRolesView();
        },
        getRolesCreate: function() {
            this.rolModel = new app.RolModel(), this.createRolView instanceof Backbone.View && (this.createRolView.stopListening(), 
            this.createRolView.undelegateEvents()), this.createRolView = new app.CreateRolView({
                model: this.rolModel
            }), this.createRolView.render();
        },
        getRolesEdit: function(rol) {
            this.rolModel = new app.RolModel(), this.rolModel.set({
                id: rol
            }, {
                silent: !0
            }), this.createRolView instanceof Backbone.View && (this.createRolView.stopListening(), 
            this.createRolView.undelegateEvents()), this.createRolView = new app.CreateRolView({
                model: this.rolModel
            }), this.rolModel.fetch();
        },
        getPermisosMain: function() {
            this.mainPermisoView instanceof Backbone.View && (this.mainPermisoView.stopListening(), 
            this.mainPermisoView.undelegateEvents()), this.mainPermisoView = new app.MainPermisoView();
        },
        getModulosMain: function() {
            this.mainModuloView instanceof Backbone.View && (this.mainModuloView.stopListening(), 
            this.mainModuloView.undelegateEvents()), this.mainModuloView = new app.MainModuloView();
        },
        getPuntosVentaMain: function() {
            this.mainPuntoventaView instanceof Backbone.View && (this.mainPuntoventaView.stopListening(), 
            this.mainPuntoventaView.undelegateEvents()), this.mainPuntoventaView = new app.MainPuntoventaView();
        },
        getPuntosVentaCreate: function() {
            this.puntoVentaModel = new app.PuntoVentaModel(), this.createPuntoventaView instanceof Backbone.View && (this.createPuntoventaView.stopListening(), 
            this.createPuntoventaView.undelegateEvents()), this.createPuntoventaView = new app.CreatePuntoventaView({
                model: this.puntoVentaModel
            }), this.createPuntoventaView.render();
        },
        getPuntosVentaEdit: function(puntoventa) {
            this.puntoVentaModel = new app.PuntoVentaModel(), this.puntoVentaModel.set({
                id: puntoventa
            }, {
                silent: !0
            }), this.createPuntoventaView instanceof Backbone.View && (this.createPuntoventaView.stopListening(), 
            this.createPuntoventaView.undelegateEvents()), this.createPuntoventaView = new app.CreatePuntoventaView({
                model: this.puntoVentaModel
            }), this.puntoVentaModel.fetch();
        },
        getPlanCuentasMain: function() {
            this.mainPlanCuentasView instanceof Backbone.View && (this.mainPlanCuentasView.stopListening(), 
            this.mainPlanCuentasView.undelegateEvents()), this.mainPlanCuentasView = new app.MainPlanCuentasView();
        },
        getPlanCuentasCreate: function() {
            this.planCuentaModel = new app.PlanCuentaModel(), this.createPlanCuentaView instanceof Backbone.View && (this.createPlanCuentaView.stopListening(), 
            this.createPlanCuentaView.undelegateEvents()), this.createPlanCuentaView = new app.CreatePlanCuentaView({
                model: this.planCuentaModel
            }), this.createPlanCuentaView.render();
        },
        getPlanCuentasEdit: function(plancuenta) {
            this.planCuentaModel = new app.PlanCuentaModel(), this.planCuentaModel.set({
                id: plancuenta
            }, {
                silent: !0
            }), this.createPlanCuentaView instanceof Backbone.View && (this.createPlanCuentaView.stopListening(), 
            this.createPlanCuentaView.undelegateEvents()), this.createPlanCuentaView = new app.CreatePlanCuentaView({
                model: this.planCuentaModel
            }), this.planCuentaModel.fetch();
        },
        getCentrosCostoMain: function() {
            this.mainCentrosCostoView instanceof Backbone.View && (this.mainCentrosCostoView.stopListening(), 
            this.mainCentrosCostoView.undelegateEvents()), this.mainCentrosCostoView = new app.MainCentrosCostoView();
        },
        getCentrosCostoCreate: function() {
            this.centroCostoModel = new app.CentroCostoModel(), this.createCentroCostoView instanceof Backbone.View && (this.createCentroCostoView.stopListening(), 
            this.createCentroCostoView.undelegateEvents()), this.createCentroCostoView = new app.CreateCentroCostoView({
                model: this.centroCostoModel,
                parameters: {
                    callback: "toShow"
                }
            }), this.createCentroCostoView.render();
        },
        getCentrosCostoEdit: function(centrocosto) {
            this.centroCostoModel = new app.CentroCostoModel(), this.centroCostoModel.set({
                id: centrocosto
            }, {
                silent: !0
            }), this.createCentroCostoView instanceof Backbone.View && (this.createCentroCostoView.stopListening(), 
            this.createCentroCostoView.undelegateEvents()), this.createCentroCostoView = new app.CreateCentroCostoView({
                model: this.centroCostoModel,
                parameters: {
                    callback: "toShow"
                }
            }), this.centroCostoModel.fetch();
        },
        getAsientosMain: function() {
            this.mainAsientosView instanceof Backbone.View && (this.mainAsientosView.stopListening(), 
            this.mainAsientosView.undelegateEvents()), this.mainAsientosView = new app.MainAsientosView();
        },
        getAsientosCreate: function() {
            this.asientoModel = new app.AsientoModel(), this.createAsientoView instanceof Backbone.View && (this.createAsientoView.stopListening(), 
            this.createAsientoView.undelegateEvents()), this.createAsientoView = new app.CreateAsientoView({
                model: this.asientoModel
            }), this.createAsientoView.render();
        },
        getAsientosShow: function(asiento) {
            this.asientoModel = new app.AsientoModel(), this.asientoModel.set({
                id: asiento
            }, {
                silent: !0
            }), this.showAsientoView instanceof Backbone.View && (this.showAsientoView.stopListening(), 
            this.showAsientoView.undelegateEvents()), this.showAsientoView = new app.ShowAsientoView({
                model: this.asientoModel
            });
        },
        getAsientosEdit: function(asiento) {
            this.asientoModel = new app.AsientoModel(), this.asientoModel.set({
                id: asiento
            }, {
                silent: !0
            }), this.editAsientoView instanceof Backbone.View && (this.editAsientoView.stopListening(), 
            this.editAsientoView.undelegateEvents()), this.createAsientoView instanceof Backbone.View && (this.createAsientoView.stopListening(), 
            this.createAsientoView.undelegateEvents()), this.editAsientoView = new app.EditAsientoView({
                model: this.asientoModel
            }), this.asientoModel.fetch();
        },
        getFoldersMain: function() {
            this.mainFoldersView instanceof Backbone.View && (this.mainFoldersView.stopListening(), 
            this.mainFoldersView.undelegateEvents()), this.mainFoldersView = new app.MainFoldersView();
        },
        getFoldersCreate: function() {
            this.folderModel = new app.FolderModel(), this.createFolderView instanceof Backbone.View && (this.createFolderView.stopListening(), 
            this.createFolderView.undelegateEvents()), this.createFolderView = new app.CreateFolderView({
                model: this.folderModel
            }), this.createFolderView.render();
        },
        getFoldersEdit: function(folder) {
            this.folderModel = new app.FolderModel(), this.folderModel.set({
                id: folder
            }, {
                silent: !0
            }), this.createFolderView instanceof Backbone.View && (this.createFolderView.stopListening(), 
            this.createFolderView.undelegateEvents()), this.createFolderView = new app.CreateFolderView({
                model: this.folderModel
            }), this.folderModel.fetch();
        },
        getDocumentosMain: function() {
            this.mainDocumentosView instanceof Backbone.View && (this.mainDocumentosView.stopListening(), 
            this.mainDocumentosView.undelegateEvents()), this.mainDocumentosView = new app.MainDocumentosView();
        },
        getDocumentosCreate: function() {
            this.documentoModel = new app.DocumentoModel(), this.createDocumentoView instanceof Backbone.View && (this.createDocumentoView.stopListening(), 
            this.createDocumentoView.undelegateEvents()), this.createDocumentoView = new app.CreateDocumentoView({
                model: this.documentoModel
            }), this.createDocumentoView.render();
        },
        getDocumentosEdit: function(documento) {
            this.documentoModel = new app.DocumentoModel(), this.documentoModel.set({
                id: documento
            }, {
                silent: !0
            }), this.createDocumentoView instanceof Backbone.View && (this.createDocumentoView.stopListening(), 
            this.createDocumentoView.undelegateEvents()), this.createDocumentoView = new app.CreateDocumentoView({
                model: this.documentoModel
            }), this.documentoModel.fetch();
        },
        getSubGruposMain: function() {
            this.mainSubGruposView instanceof Backbone.View && (this.mainSubGruposView.stopListening(), 
            this.mainSubGruposView.undelegateEvents()), this.mainSubGruposView = new app.MainSubGruposView();
        },
        getSubGruposCreate: function() {
            this.subGrupoModel = new app.SubGrupoModel(), this.createSubGrupoView instanceof Backbone.View && (this.createSubGrupoView.stopListening(), 
            this.createSubGrupoView.undelegateEvents()), this.createSubGrupoView = new app.CreateSubGrupoView({
                model: this.subGrupoModel
            }), this.createSubGrupoView.render();
        },
        getSubGruposEdit: function(subgrupo) {
            this.subGrupoModel = new app.SubGrupoModel(), this.subGrupoModel.set({
                id: subgrupo
            }, {
                silent: !0
            }), this.createSubGrupoView instanceof Backbone.View && (this.createSubGrupoView.stopListening(), 
            this.createSubGrupoView.undelegateEvents()), this.createSubGrupoView = new app.CreateSubGrupoView({
                model: this.subGrupoModel
            }), this.subGrupoModel.fetch();
        },
        getGruposMain: function() {
            this.mainGruposView instanceof Backbone.View && (this.mainGruposView.stopListening(), 
            this.mainGruposView.undelegateEvents()), this.mainGruposView = new app.MainGruposView();
        },
        getGruposCreate: function() {
            this.grupoModel = new app.GrupoModel(), this.createGrupoView instanceof Backbone.View && (this.createGrupoView.stopListening(), 
            this.createGrupoView.undelegateEvents()), this.createGrupoView = new app.CreateGrupoView({
                model: this.grupoModel
            }), this.createGrupoView.render();
        },
        getGruposEdit: function(grupo) {
            this.grupoModel = new app.GrupoModel(), this.grupoModel.set({
                id: grupo
            }, {
                silent: !0
            }), this.createGrupoView instanceof Backbone.View && (this.createGrupoView.stopListening(), 
            this.createGrupoView.undelegateEvents()), this.createGrupoView = new app.CreateGrupoView({
                model: this.grupoModel
            }), this.grupoModel.fetch();
        },
        getUnidadesMain: function() {
            this.mainUnidadesView instanceof Backbone.View && (this.mainUnidadesView.stopListening(), 
            this.mainUnidadesView.undelegateEvents()), this.mainUnidadesView = new app.MainUnidadesView();
        },
        getUnidadesCreate: function() {
            this.unidadModel = new app.UnidadModel(), this.createUnidadView instanceof Backbone.View && (this.createUnidadView.stopListening(), 
            this.createUnidadView.undelegateEvents()), this.createUnidadView = new app.CreateUnidadView({
                model: this.unidadModel
            }), this.createUnidadView.render();
        },
        getUnidadesEdit: function(unidad) {
            this.unidadModel = new app.UnidadModel(), this.unidadModel.set({
                id: unidad
            }, {
                silent: !0
            }), this.createUnidadView instanceof Backbone.View && (this.createUnidadView.stopListening(), 
            this.createUnidadView.undelegateEvents()), this.createUnidadView = new app.CreateUnidadView({
                model: this.unidadModel
            }), this.unidadModel.fetch();
        },
        getProductosMain: function() {
            this.mainProductosView instanceof Backbone.View && (this.mainProductosView.stopListening(), 
            this.mainProductosView.undelegateEvents()), this.mainProductosView = new app.MainProductosView();
        },
        getProductosCreate: function() {
            this.productoModel = new app.ProductoModel(), this.createProductoView instanceof Backbone.View && (this.createProductoView.stopListening(), 
            this.createProductoView.undelegateEvents()), this.createProductoView = new app.CreateProductoView({
                model: this.productoModel
            }), this.createProductoView.render();
        },
        getProductosEdit: function(producto) {
            this.productoModel = new app.ProductoModel(), this.productoModel.set({
                id: producto
            }, {
                silent: !0
            }), this.createProductoView instanceof Backbone.View && (this.createProductoView.stopListening(), 
            this.createProductoView.undelegateEvents()), this.createProductoView = new app.CreateProductoView({
                model: this.productoModel
            }), this.productoModel.fetch();
        },
        getTrasladosMain: function() {
            this.mainTrasladosView instanceof Backbone.View && (this.mainTrasladosView.stopListening(), 
            this.mainTrasladosView.undelegateEvents()), this.mainTrasladosView = new app.MainTrasladosView();
        },
        getTrasladosCreate: function() {
            this.trasladoModel = new app.TrasladoModel(), this.createTrasladoView instanceof Backbone.View && (this.createTrasladoView.stopListening(), 
            this.createTrasladoView.undelegateEvents()), this.createTrasladoView = new app.CreateTrasladoView({
                model: this.trasladoModel
            }), this.createTrasladoView.render();
        },
        getTrasladosShow: function(traslado) {
            this.trasladoModel = new app.TrasladoModel(), this.trasladoModel.set({
                id: traslado
            }, {
                silent: !0
            }), this.showTrasladoView instanceof Backbone.View && (this.showTrasladoView.stopListening(), 
            this.showTrasladoView.undelegateEvents()), this.showTrasladoView = new app.ShowTrasladoView({
                model: this.trasladoModel
            });
        },
        getAreaspMain: function() {
            this.mainAreaspView instanceof Backbone.View && (this.mainAreaspView.stopListening(), 
            this.mainAreaspView.undelegateEvents()), this.mainAreaspView = new app.MainAreaspView();
        },
        getAreaspCreate: function() {
            this.areapModel = new app.AreapModel(), this.createAreapView instanceof Backbone.View && (this.createAreapView.stopListening(), 
            this.createAreapView.undelegateEvents()), this.createAreapView = new app.CreateAreapView({
                model: this.areapModel
            }), this.createAreapView.render();
        },
        getAreaspEdit: function(areap) {
            this.areapModel = new app.AreapModel(), this.areapModel.set({
                id: areap
            }, {
                silent: !0
            }), this.createAreapView instanceof Backbone.View && (this.createAreapView.stopListening(), 
            this.createAreapView.undelegateEvents()), this.createAreapView = new app.CreateAreapView({
                model: this.areapModel
            }), this.areapModel.fetch();
        },
        getAcabadospMain: function() {
            this.mainAcabadospView instanceof Backbone.View && (this.mainAcabadospView.stopListening(), 
            this.mainAcabadospView.undelegateEvents()), this.mainAcabadospView = new app.MainAcabadospView();
        },
        getAcabadospCreate: function() {
            this.acabadopModel = new app.AcabadopModel(), this.createAcabadospView instanceof Backbone.View && (this.createAcabadospView.stopListening(), 
            this.createAcabadospView.undelegateEvents()), this.createAcabadospView = new app.CreateAcabadospView({
                model: this.acabadopModel
            }), this.createAcabadospView.render();
        },
        getAcabadospEdit: function(acabado) {
            this.acabadopModel = new app.AcabadopModel(), this.acabadopModel.set({
                id: acabado
            }, {
                silent: !0
            }), this.createAcabadospView instanceof Backbone.View && (this.createAcabadospView.stopListening(), 
            this.createAcabadospView.undelegateEvents()), this.createAcabadospView = new app.CreateAcabadospView({
                model: this.acabadopModel
            }), this.acabadopModel.fetch();
        },
        getMaquinaspMain: function() {
            this.mainMaquinaspView instanceof Backbone.View && (this.mainMaquinaspView.stopListening(), 
            this.mainMaquinaspView.undelegateEvents()), this.mainMaquinaspView = new app.MainMaquinaspView();
        },
        getMaquinaspCreate: function() {
            this.maquinapModel = new app.MaquinapModel(), this.createMaquinapView instanceof Backbone.View && (this.createMaquinapView.stopListening(), 
            this.createMaquinapView.undelegateEvents()), this.createMaquinapView = new app.CreateMaquinapView({
                model: this.maquinapModel
            }), this.createMaquinapView.render();
        },
        getMaquinaspEdit: function(maquinap) {
            this.maquinapModel = new app.MaquinapModel(), this.maquinapModel.set({
                id: maquinap
            }, {
                silent: !0
            }), this.createMaquinapView instanceof Backbone.View && (this.createMaquinapView.stopListening(), 
            this.createMaquinapView.undelegateEvents()), this.createMaquinapView = new app.CreateMaquinapView({
                model: this.maquinapModel
            }), this.maquinapModel.fetch();
        },
        getMaterialespMain: function() {
            this.mainMaterialespView instanceof Backbone.View && (this.mainMaterialespView.stopListening(), 
            this.mainMaterialespView.undelegateEvents()), this.mainMaterialespView = new app.MainMaterialespView();
        },
        getMaterialespCreate: function() {
            this.materialpModel = new app.MaterialpModel(), this.createMaterialpView instanceof Backbone.View && (this.createMaterialpView.stopListening(), 
            this.createMaterialpView.undelegateEvents()), this.createMaterialpView = new app.CreateMaterialpView({
                model: this.materialpModel
            }), this.createMaterialpView.render();
        },
        getMaterialespEdit: function(materialp) {
            this.materialpModel = new app.MaterialpModel(), this.materialpModel.set({
                id: materialp
            }, {
                silent: !0
            }), this.createMaterialpView instanceof Backbone.View && (this.createMaterialpView.stopListening(), 
            this.createMaterialpView.undelegateEvents()), this.createMaterialpView = new app.CreateMaterialpView({
                model: this.materialpModel
            }), this.materialpModel.fetch();
        },
        getOrdenesMain: function() {
            this.mainOrdenesView instanceof Backbone.View && (this.mainOrdenesView.stopListening(), 
            this.mainOrdenesView.undelegateEvents()), this.mainOrdenesView = new app.MainOrdenesView();
        },
        getOrdenesCreate: function() {
            this.ordenpModel = new app.OrdenpModel(), this.createOrdenpView instanceof Backbone.View && (this.createOrdenpView.stopListening(), 
            this.createOrdenpView.undelegateEvents()), this.createOrdenpView = new app.CreateOrdenpView({
                model: this.ordenpModel
            }), this.createOrdenpView.render();
        },
        getOrdenesShow: function(orden) {
            this.ordenpModel = new app.OrdenpModel(), this.ordenpModel.set({
                id: orden
            }, {
                silent: !0
            }), this.showOrdenesView instanceof Backbone.View && (this.showOrdenesView.stopListening(), 
            this.showOrdenesView.undelegateEvents()), this.showOrdenesView = new app.ShowOrdenesView({
                model: this.ordenpModel
            });
        },
        getOrdenesEdit: function(orden) {
            this.ordenpModel = new app.OrdenpModel(), this.ordenpModel.set({
                id: orden
            }, {
                silent: !0
            }), this.createOrdenpView instanceof Backbone.View && (this.createOrdenpView.stopListening(), 
            this.createOrdenpView.undelegateEvents()), this.createOrdenpView = new app.CreateOrdenpView({
                model: this.ordenpModel
            }), this.ordenpModel.fetch();
        },
        getProductospMain: function() {
            this.mainProductospView instanceof Backbone.View && (this.mainProductospView.stopListening(), 
            this.mainProductospView.undelegateEvents()), this.mainProductospView = new app.MainProductospView();
        },
        getOrdenesProductoCreate: function(queryString) {
            var queries = this.parseQueryString(queryString);
            this.ordenp2Model = new app.Ordenp2Model(), this.createOrdenp2View instanceof Backbone.View && (this.createOrdenp2View.stopListening(), 
            this.createOrdenp2View.undelegateEvents()), this.createOrdenp2View = new app.CreateOrdenp2View({
                model: this.ordenp2Model,
                parameters: {
                    data: {
                        orden2_orden: queries.ordenp,
                        orden2_productop: queries.productop
                    }
                }
            }), this.createOrdenp2View.render();
        },
        getOrdenesProductoEdit: function(producto) {
            this.ordenp2Model = new app.Ordenp2Model(), this.ordenp2Model.set({
                id: producto
            }, {
                silent: !0
            }), this.createOrdenp2View instanceof Backbone.View && (this.createOrdenp2View.stopListening(), 
            this.createOrdenp2View.undelegateEvents()), this.createOrdenp2View = new app.CreateOrdenp2View({
                model: this.ordenp2Model
            }), this.ordenp2Model.fetch();
        },
        getProductospCreate: function() {
            this.productopModel = new app.ProductopModel(), this.createProductopView instanceof Backbone.View && (this.createProductopView.stopListening(), 
            this.createProductopView.undelegateEvents()), this.createProductopView = new app.CreateProductopView({
                model: this.productopModel
            }), this.createProductopView.render();
        },
        getProductospShow: function(producto) {
            this.productopModel = new app.ProductopModel(), this.productopModel.set({
                id: producto
            }, {
                silent: !0
            }), this.showProductopView instanceof Backbone.View && (this.showProductopView.stopListening(), 
            this.showProductopView.undelegateEvents()), this.showProductopView = new app.ShowProductopView({
                model: this.productopModel
            });
        },
        getProductospEdit: function(producto) {
            this.productopModel = new app.ProductopModel(), this.productopModel.set({
                id: producto
            }, {
                silent: !0
            }), this.createProductopView instanceof Backbone.View && (this.createProductopView.stopListening(), 
            this.createProductopView.undelegateEvents()), this.createProductopView = new app.CreateProductopView({
                model: this.productopModel
            }), this.productopModel.fetch();
        }
    }))();
}(jQuery, 0, this.document);

var app = app || {};

!function($, window, document, undefined) {
    var InitComponent = function() {
        $.ajaxSetup({
            cache: !1,
            headers: {
                "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
            }
        });
    };
    String.prototype.replaceAll = function(search, replace) {
        return replace ? this.replace(new RegExp("[" + search + "]", "g"), replace) : this;
    }, InitComponent.prototype = {
        initialize: function() {
            this.initApp(), this.initICheck(), this.initAlertify(), this.initInputMask(), this.initSelect2(), 
            this.initToUpper(), this.initSpinner(), this.initDatePicker(), this.initTimePicker();
        },
        initApp: function() {
            window.app.AppRouter.start();
        },
        initICheck: function() {
            $("input").iCheck({
                checkboxClass: "icheckbox_minimal-green",
                radioClass: "iradio_minimal-green"
            });
        },
        initAlertify: function() {
            alertify.logPosition("bottom right");
        },
        initInputMask: function() {
            $("[data-mask]").inputmask(), $("[data-currency]").inputmask({
                radixPoint: ",",
                alias: "currency",
                removeMaskOnSubmit: !0,
                unmaskAsNumber: !0,
                min: 0
            }), $("[data-currency-negative]").inputmask({
                radixPoint: ",",
                alias: "currency",
                prefix: "",
                removeMaskOnSubmit: !0,
                unmaskAsNumber: !0
            });
        },
        initSelect2: function() {
            var config = {
                ".select2-default": {
                    language: "es",
                    placeholder: "Seleccione",
                    allowClear: !1
                },
                ".select2-default-clear": {
                    language: "es",
                    placeholder: "Seleccione",
                    allowClear: !0
                },
                ".choice-select-autocomplete": {
                    language: "es",
                    placeholder: "Seleccione una opción",
                    ajax: {
                        delay: 250,
                        data: function(params) {
                            return {
                                q: params.term,
                                page: params.page
                            };
                        },
                        processResults: function(data, params) {
                            return params.page = params.page || 1, {
                                results: data,
                                pagination: {
                                    more: 30 * params.page < data.total_count
                                }
                            };
                        },
                        escapeMarkup: function(markup) {
                            return markup;
                        },
                        cache: !0,
                        minimumInputLength: 1
                    }
                }
            };
            for (var selector in config) $(selector).each(function(index, el) {
                var $el = $(el);
                if ($el.data("select2") == undefined && ($el.select2(config[selector]), ".choice-select-autocomplete" == selector)) {
                    var initialId = $el.data("initial-value"), $option = null;
                    if (initialId) {
                        var ajaxOptions = $el.data("select2").dataAdapter.ajaxOptions;
                        $option = $("<option selected>Cargando...</option>").val(initialId), $el.append($option).trigger("change"), 
                        $.get(ajaxOptions.url, {
                            id: initialId
                        }, function(data) {
                            $option.text(data[0].text).val(data[0].id), $option.removeData(), $el.trigger("change");
                        });
                    }
                }
            });
        },
        initToUpper: function() {
            $(".input-toupper").change(function() {
                $(this).val($(this).val().toUpperCase());
            }), $(".input-lower").change(function() {
                for (var dato = $(this).val($(this).val().toLowerCase()), reg = /[^a-z0-9]/i, valor = "", i = 0; i <= dato.val().length - 1; i++) reg.test(dato.val().charAt(i)) || (dato.val().replace(reg, ""), 
                valor += dato.val().charAt(i));
                $(this).val(valor);
            });
        },
        initSpinner: function() {
            $(".spinner-percentage").spinner({
                step: .1,
                start: 0,
                min: 0,
                max: 100,
                numberFormat: "n",
                stop: function(event, ui) {
                    _.isNull(this.value) || _.isUndefined(this.value) || _.isEmpty(this.value) || (!$.isNumeric(this.value) || this.value > 100 || this.value < 0) && $(this).spinner("value", 0);
                }
            });
        },
        initValidator: function() {
            $('form[data-toggle="validator"]').each(function() {
                var $form = $(this);
                $.fn.validator.call($form, $form.data());
            });
        },
        initDatePicker: function() {
            $(".datepicker").datepicker({
                autoclose: !0,
                language: "es",
                format: "yyyy-mm-dd"
            });
        },
        initTimePicker: function() {
            $(".timepicker").timepicker({
                showInputs: !1,
                showMeridian: !1
            });
        }
    }, $(function() {
        window.initComponent = new InitComponent(), window.initComponent.initialize();
    });
}(jQuery, this, this.document);